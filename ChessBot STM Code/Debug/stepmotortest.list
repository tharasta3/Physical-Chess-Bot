
stepmotortest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c0  0800b578  0800b578  0000c578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce38  0800ce38  0000e3ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce38  0800ce38  0000de38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce40  0800ce40  0000e3ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce40  0800ce40  0000de40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce44  0800ce44  0000de44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003ec  20000000  0800ce48  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200003ec  0800d234  0000e3ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800d234  0000e7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e3ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164a9  00000000  00000000  0000e41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab2  00000000  00000000  000248c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00027378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002bb4a  00000000  00000000  00028700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016ebb  00000000  00000000  0005424a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010c638  00000000  00000000  0006b105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0017773d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f40  00000000  00000000  00177780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006318  00000000  00000000  001786c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200003ec 	.word	0x200003ec
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b55c 	.word	0x0800b55c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200003f0 	.word	0x200003f0
 80001fc:	0800b55c 	.word	0x0800b55c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <ILI9341_Select+0x14>)
 8000ed2:	f003 fcaf 	bl	8004834 <HAL_GPIO_WritePin>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	48000400 	.word	0x48000400

08000ee0 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <ILI9341_Unselect+0x14>)
 8000eea:	f003 fca3 	bl	8004834 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	48000400 	.word	0x48000400

08000ef8 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2110      	movs	r1, #16
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f003 fc96 	bl	8004834 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f003 f9b3 	bl	8004274 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2110      	movs	r1, #16
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f16:	f003 fc8d 	bl	8004834 <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2140      	movs	r1, #64	@ 0x40
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f32:	f003 fc7f 	bl	8004834 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f36:	1df9      	adds	r1, r7, #7
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <ILI9341_WriteCommand+0x2c>)
 8000f40:	f005 fa0f 	bl	8006362 <HAL_SPI_Transmit>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200005c4 	.word	0x200005c4

08000f50 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2140      	movs	r1, #64	@ 0x40
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f62:	f003 fc67 	bl	8004834 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f66:	e015      	b.n	8000f94 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f6e:	bf28      	it	cs
 8000f70:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000f74:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f76:	89fa      	ldrh	r2, [r7, #14]
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <ILI9341_WriteData+0x54>)
 8000f80:	f005 f9ef 	bl	8006362 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1e6      	bne.n	8000f68 <ILI9341_WriteData+0x18>
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200005c4 	.word	0x200005c4

08000fa8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80bb      	strh	r3, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000fc6:	202a      	movs	r0, #42	@ 0x2a
 8000fc8:	f7ff ffaa 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	73bb      	strb	r3, [r7, #14]
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffac 	bl	8000f50 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000ff8:	202b      	movs	r0, #43	@ 0x2b
 8000ffa:	f7ff ff91 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	723b      	strb	r3, [r7, #8]
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	727b      	strb	r3, [r7, #9]
 800100e:	883b      	ldrh	r3, [r7, #0]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72bb      	strb	r3, [r7, #10]
 8001018:	883b      	ldrh	r3, [r7, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2104      	movs	r1, #4
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff93 	bl	8000f50 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800102a:	202c      	movs	r0, #44	@ 0x2c
 800102c:	f7ff ff78 	bl	8000f20 <ILI9341_WriteCommand>
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}

08001038 <ILI9341_Init>:

void ILI9341_Init() {
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b09b      	sub	sp, #108	@ 0x6c
 800103c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800103e:	f7ff ff43 	bl	8000ec8 <ILI9341_Select>
    ILI9341_Reset();
 8001042:	f7ff ff59 	bl	8000ef8 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff ff6a 	bl	8000f20 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800104c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001050:	f003 f910 	bl	8004274 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001054:	20cb      	movs	r0, #203	@ 0xcb
 8001056:	f7ff ff63 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800105a:	4a87      	ldr	r2, [pc, #540]	@ (8001278 <ILI9341_Init+0x240>)
 800105c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001064:	6018      	str	r0, [r3, #0]
 8001066:	3304      	adds	r3, #4
 8001068:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800106a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800106e:	2105      	movs	r1, #5
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff6d 	bl	8000f50 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8001076:	20cf      	movs	r0, #207	@ 0xcf
 8001078:	f7ff ff52 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800107c:	4a7f      	ldr	r2, [pc, #508]	@ (800127c <ILI9341_Init+0x244>)
 800107e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	4611      	mov	r1, r2
 8001086:	8019      	strh	r1, [r3, #0]
 8001088:	3302      	adds	r3, #2
 800108a:	0c12      	lsrs	r2, r2, #16
 800108c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800108e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001092:	2103      	movs	r1, #3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5b 	bl	8000f50 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800109a:	20e8      	movs	r0, #232	@ 0xe8
 800109c:	f7ff ff40 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80010a0:	4a77      	ldr	r2, [pc, #476]	@ (8001280 <ILI9341_Init+0x248>)
 80010a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	4611      	mov	r1, r2
 80010aa:	8019      	strh	r1, [r3, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	0c12      	lsrs	r2, r2, #16
 80010b0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010b6:	2103      	movs	r1, #3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff49 	bl	8000f50 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80010be:	20ea      	movs	r0, #234	@ 0xea
 80010c0:	f7ff ff2e 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 80010ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ce:	2102      	movs	r1, #2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff3d 	bl	8000f50 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80010d6:	20ed      	movs	r0, #237	@ 0xed
 80010d8:	f7ff ff22 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80010dc:	4b69      	ldr	r3, [pc, #420]	@ (8001284 <ILI9341_Init+0x24c>)
 80010de:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 80010e0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010e4:	2104      	movs	r1, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff32 	bl	8000f50 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80010ec:	20f7      	movs	r0, #247	@ 0xf7
 80010ee:	f7ff ff17 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80010f2:	2320      	movs	r3, #32
 80010f4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80010f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff26 	bl	8000f50 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001104:	20c0      	movs	r0, #192	@ 0xc0
 8001106:	f7ff ff0b 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800110a:	2323      	movs	r3, #35	@ 0x23
 800110c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8001110:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff1a 	bl	8000f50 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800111c:	20c1      	movs	r0, #193	@ 0xc1
 800111e:	f7ff feff 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8001122:	2310      	movs	r3, #16
 8001124:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8001128:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800112c:	2101      	movs	r1, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff0e 	bl	8000f50 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001134:	20c5      	movs	r0, #197	@ 0xc5
 8001136:	f7ff fef3 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800113a:	f642 033e 	movw	r3, #10302	@ 0x283e
 800113e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8001142:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001146:	2102      	movs	r1, #2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff01 	bl	8000f50 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800114e:	20c7      	movs	r0, #199	@ 0xc7
 8001150:	f7ff fee6 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8001154:	2386      	movs	r3, #134	@ 0x86
 8001156:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800115a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800115e:	2101      	movs	r1, #1
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fef5 	bl	8000f50 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8001166:	2036      	movs	r0, #54	@ 0x36
 8001168:	f7ff feda 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800116c:	2348      	movs	r3, #72	@ 0x48
 800116e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8001172:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001176:	2101      	movs	r1, #1
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fee9 	bl	8000f50 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800117e:	203a      	movs	r0, #58	@ 0x3a
 8001180:	f7ff fece 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001184:	2355      	movs	r3, #85	@ 0x55
 8001186:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 800118a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fedd 	bl	8000f50 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8001196:	20b1      	movs	r0, #177	@ 0xb1
 8001198:	f7ff fec2 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 800119c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011a0:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80011a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a6:	2102      	movs	r1, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fed1 	bl	8000f50 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80011ae:	20b6      	movs	r0, #182	@ 0xb6
 80011b0:	f7ff feb6 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80011b4:	4a34      	ldr	r2, [pc, #208]	@ (8001288 <ILI9341_Init+0x250>)
 80011b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	4611      	mov	r1, r2
 80011be:	8019      	strh	r1, [r3, #0]
 80011c0:	3302      	adds	r3, #2
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ca:	2103      	movs	r1, #3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff febf 	bl	8000f50 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80011d2:	20f2      	movs	r0, #242	@ 0xf2
 80011d4:	f7ff fea4 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 80011de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e2:	2101      	movs	r1, #1
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff feb3 	bl	8000f50 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80011ea:	2026      	movs	r0, #38	@ 0x26
 80011ec:	f7ff fe98 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80011f0:	2301      	movs	r3, #1
 80011f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 80011f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fea7 	bl	8000f50 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001202:	20e0      	movs	r0, #224	@ 0xe0
 8001204:	f7ff fe8c 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <ILI9341_Init+0x254>)
 800120a:	f107 0414 	add.w	r4, r7, #20
 800120e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001210:	c407      	stmia	r4!, {r0, r1, r2}
 8001212:	8023      	strh	r3, [r4, #0]
 8001214:	3402      	adds	r4, #2
 8001216:	0c1b      	lsrs	r3, r3, #16
 8001218:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	210f      	movs	r1, #15
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe95 	bl	8000f50 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001226:	20e1      	movs	r0, #225	@ 0xe1
 8001228:	f7ff fe7a 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <ILI9341_Init+0x258>)
 800122e:	1d3c      	adds	r4, r7, #4
 8001230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001232:	c407      	stmia	r4!, {r0, r1, r2}
 8001234:	8023      	strh	r3, [r4, #0]
 8001236:	3402      	adds	r4, #2
 8001238:	0c1b      	lsrs	r3, r3, #16
 800123a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	210f      	movs	r1, #15
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fe85 	bl	8000f50 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8001246:	2011      	movs	r0, #17
 8001248:	f7ff fe6a 	bl	8000f20 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800124c:	2078      	movs	r0, #120	@ 0x78
 800124e:	f003 f811 	bl	8004274 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8001252:	2029      	movs	r0, #41	@ 0x29
 8001254:	f7ff fe64 	bl	8000f20 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8001258:	2036      	movs	r0, #54	@ 0x36
 800125a:	f7ff fe61 	bl	8000f20 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800125e:	2348      	movs	r3, #72	@ 0x48
 8001260:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001262:	463b      	mov	r3, r7
 8001264:	2101      	movs	r1, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fe72 	bl	8000f50 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800126c:	f7ff fe38 	bl	8000ee0 <ILI9341_Unselect>
}
 8001270:	bf00      	nop
 8001272:	376c      	adds	r7, #108	@ 0x6c
 8001274:	46bd      	mov	sp, r7
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	0800b578 	.word	0x0800b578
 800127c:	0800b580 	.word	0x0800b580
 8001280:	0800b584 	.word	0x0800b584
 8001284:	81120364 	.word	0x81120364
 8001288:	0800b588 	.word	0x0800b588
 800128c:	0800b58c 	.word	0x0800b58c
 8001290:	0800b59c 	.word	0x0800b59c

08001294 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001294:	b082      	sub	sp, #8
 8001296:	b580      	push	{r7, lr}
 8001298:	b088      	sub	sp, #32
 800129a:	af00      	add	r7, sp, #0
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	460b      	mov	r3, r1
 80012a4:	80bb      	strh	r3, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012ae:	461a      	mov	r2, r3
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4413      	add	r3, r2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012be:	4619      	mov	r1, r3
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	440b      	add	r3, r1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	88b9      	ldrh	r1, [r7, #4]
 80012cc:	88f8      	ldrh	r0, [r7, #6]
 80012ce:	f7ff fe6b 	bl	8000fa8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e041      	b.n	800135c <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 80012d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	3b20      	subs	r3, #32
 80012de:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	440b      	add	r3, r1
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	e027      	b.n	800134a <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800130a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	743b      	strb	r3, [r7, #16]
 8001314:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001316:	b2db      	uxtb	r3, r3
 8001318:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2102      	movs	r1, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe15 	bl	8000f50 <ILI9341_WriteData>
 8001326:	e00d      	b.n	8001344 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001328:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	733b      	strb	r3, [r7, #12]
 8001332:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001334:	b2db      	uxtb	r3, r3
 8001336:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fe06 	bl	8000f50 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	3301      	adds	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800134e:	461a      	mov	r2, r3
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4293      	cmp	r3, r2
 8001354:	d3d1      	bcc.n	80012fa <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001360:	461a      	mov	r2, r3
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	4293      	cmp	r3, r2
 8001366:	d3b7      	bcc.n	80012d8 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001374:	b002      	add	sp, #8
 8001376:	4770      	bx	lr

08001378 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001378:	b082      	sub	sp, #8
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af04      	add	r7, sp, #16
 8001380:	603a      	str	r2, [r7, #0]
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	4603      	mov	r3, r0
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	460b      	mov	r3, r1
 800138a:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800138c:	f7ff fd9c 	bl	8000ec8 <ILI9341_Select>

    while(*str) {
 8001390:	e02e      	b.n	80013f0 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	7d3a      	ldrb	r2, [r7, #20]
 8001396:	4413      	add	r3, r2
 8001398:	2bef      	cmp	r3, #239	@ 0xef
 800139a:	dd14      	ble.n	80013c6 <ILI9341_WriteString+0x4e>
            x = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013a0:	7d7b      	ldrb	r3, [r7, #21]
 80013a2:	461a      	mov	r2, r3
 80013a4:	88bb      	ldrh	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	7d7a      	ldrb	r2, [r7, #21]
 80013ae:	4413      	add	r3, r2
 80013b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013b4:	da21      	bge.n	80013fa <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b20      	cmp	r3, #32
 80013bc:	d103      	bne.n	80013c6 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	603b      	str	r3, [r7, #0]
                continue;
 80013c4:	e014      	b.n	80013f0 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	88b9      	ldrh	r1, [r7, #4]
 80013cc:	88f8      	ldrh	r0, [r7, #6]
 80013ce:	8c3b      	ldrh	r3, [r7, #32]
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	8bbb      	ldrh	r3, [r7, #28]
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f7ff ff5a 	bl	8001294 <ILI9341_WriteChar>
        x += font.width;
 80013e0:	7d3b      	ldrb	r3, [r7, #20]
 80013e2:	461a      	mov	r2, r3
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	4413      	add	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
        str++;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1cc      	bne.n	8001392 <ILI9341_WriteString+0x1a>
 80013f8:	e000      	b.n	80013fc <ILI9341_WriteString+0x84>
                break;
 80013fa:	bf00      	nop
    }

    ILI9341_Unselect();
 80013fc:	f7ff fd70 	bl	8000ee0 <ILI9341_Unselect>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800140a:	b002      	add	sp, #8
 800140c:	4770      	bx	lr
	...

08001410 <Up>:
/**
  * @brief  Spin the motor in the "up" direction.
  * @retval None
  */
void Up()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800141a:	480d      	ldr	r0, [pc, #52]	@ (8001450 <Up+0x40>)
 800141c:	f003 fa0a 	bl	8004834 <HAL_GPIO_WritePin>
    // Set PA3 (A0) HIGH
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001426:	480b      	ldr	r0, [pc, #44]	@ (8001454 <Up+0x44>)
 8001428:	f003 fa04 	bl	8004834 <HAL_GPIO_WritePin>
    // Set PC0 (A1) LOW
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001432:	4809      	ldr	r0, [pc, #36]	@ (8001458 <Up+0x48>)
 8001434:	f003 f9fe 	bl	8004834 <HAL_GPIO_WritePin>
    HAL_Delay(4000);
 8001438:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800143c:	f002 ff1a 	bl	8004274 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001446:	4802      	ldr	r0, [pc, #8]	@ (8001450 <Up+0x40>)
 8001448:	f003 f9f4 	bl	8004834 <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	48001000 	.word	0x48001000
 8001454:	48000c00 	.word	0x48000c00
 8001458:	48001400 	.word	0x48001400

0800145c <Down>:
/**
  * @brief  Spin the motor in the "down" direction.
  * @retval None
  */
void Down()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001466:	480d      	ldr	r0, [pc, #52]	@ (800149c <Down+0x40>)
 8001468:	f003 f9e4 	bl	8004834 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001472:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <Down+0x44>)
 8001474:	f003 f9de 	bl	8004834 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800147e:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <Down+0x48>)
 8001480:	f003 f9d8 	bl	8004834 <HAL_GPIO_WritePin>


    HAL_Delay(4000);
 8001484:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001488:	f002 fef4 	bl	8004274 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001492:	4802      	ldr	r0, [pc, #8]	@ (800149c <Down+0x40>)
 8001494:	f003 f9ce 	bl	8004834 <HAL_GPIO_WritePin>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	48001000 	.word	0x48001000
 80014a0:	48001400 	.word	0x48001400
 80014a4:	48000c00 	.word	0x48000c00

080014a8 <hormove>:

void hormove(int dir) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	if (dir == 0) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <hormove+0x1a>
		HAL_GPIO_WritePin(HDIR_GPIO_Port, HDIR_Pin, GPIO_PIN_RESET); //move to the right (8->1)
 80014b6:	2200      	movs	r2, #0
 80014b8:	2110      	movs	r1, #16
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <hormove+0x48>)
 80014bc:	f003 f9ba 	bl	8004834 <HAL_GPIO_WritePin>
 80014c0:	e004      	b.n	80014cc <hormove+0x24>
	}
	else {
		HAL_GPIO_WritePin(HDIR_GPIO_Port, HDIR_Pin, GPIO_PIN_SET); //move to the left (1->8)
 80014c2:	2201      	movs	r2, #1
 80014c4:	2110      	movs	r1, #16
 80014c6:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <hormove+0x48>)
 80014c8:	f003 f9b4 	bl	8004834 <HAL_GPIO_WritePin>
	}
   hmove = 1;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <hormove+0x4c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
   countmax = 2225; // change to 1/2 square size
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <hormove+0x50>)
 80014d4:	f640 02b1 	movw	r2, #2225	@ 0x8b1
 80014d8:	601a      	str	r2, [r3, #0]
   while (hmove == 1) {}
 80014da:	bf00      	nop
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <hormove+0x4c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d0fb      	beq.n	80014dc <hormove+0x34>
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	48000800 	.word	0x48000800
 80014f4:	20000678 	.word	0x20000678
 80014f8:	20000684 	.word	0x20000684

080014fc <vertmove>:

void vertmove(int dir) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if (dir == 0) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <vertmove+0x1a>
		HAL_GPIO_WritePin(VDIR_GPIO_Port, VDIR_Pin, GPIO_PIN_SET); //move up (8->1)
 800150a:	2201      	movs	r2, #1
 800150c:	2108      	movs	r1, #8
 800150e:	480d      	ldr	r0, [pc, #52]	@ (8001544 <vertmove+0x48>)
 8001510:	f003 f990 	bl	8004834 <HAL_GPIO_WritePin>
 8001514:	e004      	b.n	8001520 <vertmove+0x24>
	}
	else {
		HAL_GPIO_WritePin(VDIR_GPIO_Port, VDIR_Pin, GPIO_PIN_RESET); // move down (1->8)
 8001516:	2200      	movs	r2, #0
 8001518:	2108      	movs	r1, #8
 800151a:	480a      	ldr	r0, [pc, #40]	@ (8001544 <vertmove+0x48>)
 800151c:	f003 f98a 	bl	8004834 <HAL_GPIO_WritePin>
	}
   vmove = 1;
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <vertmove+0x4c>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]
   countmax = 2225; // change to 1/2 square size
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <vertmove+0x50>)
 8001528:	f640 02b1 	movw	r2, #2225	@ 0x8b1
 800152c:	601a      	str	r2, [r3, #0]
   while (vmove == 1) {}
 800152e:	bf00      	nop
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <vertmove+0x4c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d0fb      	beq.n	8001530 <vertmove+0x34>
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	48000800 	.word	0x48000800
 8001548:	2000067c 	.word	0x2000067c
 800154c:	20000684 	.word	0x20000684

08001550 <forcemove>:

void forcemove(int st[2], int e[2]) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	int hdist = e[0] - st[0]; // start col - end col = horizontal dist
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	61fb      	str	r3, [r7, #28]
	int vdist = e[1] - st[1]; // start row - end row = vertical dist
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3304      	adds	r3, #4
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3304      	adds	r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	61bb      	str	r3, [r7, #24]
	int hdir = 1;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
	int vdir = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	613b      	str	r3, [r7, #16]
	if (hdist < 0) {
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da04      	bge.n	800158e <forcemove+0x3e>
		hdist *= -1;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	425b      	negs	r3, r3
 8001588:	61fb      	str	r3, [r7, #28]
		hdir = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
	}
	if (vdist < 0) {
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da04      	bge.n	800159e <forcemove+0x4e>
		vdist *= -1;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	425b      	negs	r3, r3
 8001598:	61bb      	str	r3, [r7, #24]
		vdir = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
	}
	for (int i = 0; i < hdist; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e008      	b.n	80015b6 <forcemove+0x66>
		hormove(hdir); //move 1 full inch
 80015a4:	6978      	ldr	r0, [r7, #20]
 80015a6:	f7ff ff7f 	bl	80014a8 <hormove>
		hormove(hdir);
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff7c 	bl	80014a8 <hormove>
	for (int i = 0; i < hdist; i++) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbf2      	blt.n	80015a4 <forcemove+0x54>
	}
	for (int i = 0; i < vdist; i++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	e008      	b.n	80015d6 <forcemove+0x86>
		vertmove(vdir); //move 1 full inch
 80015c4:	6938      	ldr	r0, [r7, #16]
 80015c6:	f7ff ff99 	bl	80014fc <vertmove>
		vertmove(vdir);
 80015ca:	6938      	ldr	r0, [r7, #16]
 80015cc:	f7ff ff96 	bl	80014fc <vertmove>
	for (int i = 0; i < vdist; i++) {
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbf2      	blt.n	80015c4 <forcemove+0x74>
	}
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <moveRelative>:


//GABE CODE
void moveRelative(int dir, int quarter_inches) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < quarter_inches; i++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e03e      	b.n	8001676 <moveRelative+0x8e>
		if (dir == NORTH) { //increasing row, vert = +
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <moveRelative+0x28>
			HAL_GPIO_WritePin(VDIR_GPIO_Port, VDIR_Pin, GPIO_PIN_RESET); //move to the right (8->1)
 80015fe:	2200      	movs	r2, #0
 8001600:	2108      	movs	r1, #8
 8001602:	4821      	ldr	r0, [pc, #132]	@ (8001688 <moveRelative+0xa0>)
 8001604:	f003 f916 	bl	8004834 <HAL_GPIO_WritePin>
			vmove = 1;
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <moveRelative+0xa4>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e022      	b.n	8001656 <moveRelative+0x6e>
		}
		else if (dir == EAST) { //increasing row, hor = +
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <moveRelative+0x40>
			HAL_GPIO_WritePin(HDIR_GPIO_Port, HDIR_Pin, GPIO_PIN_SET); //move to the left (1->8)
 8001616:	2201      	movs	r2, #1
 8001618:	2110      	movs	r1, #16
 800161a:	481b      	ldr	r0, [pc, #108]	@ (8001688 <moveRelative+0xa0>)
 800161c:	f003 f90a 	bl	8004834 <HAL_GPIO_WritePin>
			hmove = 1;
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <moveRelative+0xa8>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e016      	b.n	8001656 <moveRelative+0x6e>
		}
		else if (dir == WEST) { //increasing row, hor = -
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d108      	bne.n	8001640 <moveRelative+0x58>
			HAL_GPIO_WritePin(HDIR_GPIO_Port, HDIR_Pin, GPIO_PIN_RESET); //move to the left (1->8)
 800162e:	2200      	movs	r2, #0
 8001630:	2110      	movs	r1, #16
 8001632:	4815      	ldr	r0, [pc, #84]	@ (8001688 <moveRelative+0xa0>)
 8001634:	f003 f8fe 	bl	8004834 <HAL_GPIO_WritePin>
			hmove = 1;
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <moveRelative+0xa8>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00a      	b.n	8001656 <moveRelative+0x6e>
		}
		else if (dir == SOUTH) { //increasing row, vert = -
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d107      	bne.n	8001656 <moveRelative+0x6e>
			HAL_GPIO_WritePin(VDIR_GPIO_Port, VDIR_Pin, GPIO_PIN_SET); //move to the left (1->8)
 8001646:	2201      	movs	r2, #1
 8001648:	2108      	movs	r1, #8
 800164a:	480f      	ldr	r0, [pc, #60]	@ (8001688 <moveRelative+0xa0>)
 800164c:	f003 f8f2 	bl	8004834 <HAL_GPIO_WritePin>
			vmove = 1;
 8001650:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <moveRelative+0xa4>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]
		}
	   countmax = 556; // 1/4 inch
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <moveRelative+0xac>)
 8001658:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800165c:	601a      	str	r2, [r3, #0]
	   while (hmove == 1 || vmove == 1) {}
 800165e:	bf00      	nop
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <moveRelative+0xa8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d0fb      	beq.n	8001660 <moveRelative+0x78>
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <moveRelative+0xa4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d0f7      	beq.n	8001660 <moveRelative+0x78>
	for (int i = 0; i < quarter_inches; i++) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbbc      	blt.n	80015f8 <moveRelative+0x10>
	}
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	48000800 	.word	0x48000800
 800168c:	2000067c 	.word	0x2000067c
 8001690:	20000678 	.word	0x20000678
 8001694:	20000684 	.word	0x20000684

08001698 <shiftPiece>:

void shiftPiece(int row, int col, int dir) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	if((row == 1 && dir == SOUTH) || (row == 8 && dir == NORTH) || (col == 1 && dir == WEST) || (col == 8 && dir == EAST))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <shiftPiece+0x18>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d042      	beq.n	8001736 <shiftPiece+0x9e>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d102      	bne.n	80016bc <shiftPiece+0x24>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03c      	beq.n	8001736 <shiftPiece+0x9e>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <shiftPiece+0x30>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d036      	beq.n	8001736 <shiftPiece+0x9e>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d102      	bne.n	80016d4 <shiftPiece+0x3c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d030      	beq.n	8001736 <shiftPiece+0x9e>
	    return;
    if(currstate[row-1][col-1]) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3b01      	subs	r3, #1
 80016dc:	4918      	ldr	r1, [pc, #96]	@ (8001740 <shiftPiece+0xa8>)
 80016de:	00d2      	lsls	r2, r2, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d026      	beq.n	8001738 <shiftPiece+0xa0>
    	int next[2] = {col, row};
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	617b      	str	r3, [r7, #20]
        forcemove(currpos, next);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	4812      	ldr	r0, [pc, #72]	@ (8001744 <shiftPiece+0xac>)
 80016fa:	f7ff ff29 	bl	8001550 <forcemove>
        currpos[0] = next[0];
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <shiftPiece+0xac>)
 8001702:	6013      	str	r3, [r2, #0]
        currpos[1] = next[1];
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4a0f      	ldr	r2, [pc, #60]	@ (8001744 <shiftPiece+0xac>)
 8001708:	6053      	str	r3, [r2, #4]
        Up();
 800170a:	f7ff fe81 	bl	8001410 <Up>
        moveRelative(dir, 2);
 800170e:	2102      	movs	r1, #2
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff69 	bl	80015e8 <moveRelative>
        Down();
 8001716:	f7ff fea1 	bl	800145c <Down>
        moveRelative((dir+2)%4, 2);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3302      	adds	r3, #2
 800171e:	425a      	negs	r2, r3
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	f002 0203 	and.w	r2, r2, #3
 8001728:	bf58      	it	pl
 800172a:	4253      	negpl	r3, r2
 800172c:	2102      	movs	r1, #2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff5a 	bl	80015e8 <moveRelative>
 8001734:	e000      	b.n	8001738 <shiftPiece+0xa0>
	    return;
 8001736:	bf00      	nop
    }
}
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20000208 	.word	0x20000208

08001748 <undoShift>:

void undoShift(int row, int col, int dir) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	if((row == 1 && dir == SOUTH) || (row == 8 && dir == NORTH) || (col == 1 && dir == WEST) || (col == 8 && dir == EAST))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d102      	bne.n	8001760 <undoShift+0x18>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d042      	beq.n	80017e6 <undoShift+0x9e>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b08      	cmp	r3, #8
 8001764:	d102      	bne.n	800176c <undoShift+0x24>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d03c      	beq.n	80017e6 <undoShift+0x9e>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <undoShift+0x30>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d036      	beq.n	80017e6 <undoShift+0x9e>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d102      	bne.n	8001784 <undoShift+0x3c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d030      	beq.n	80017e6 <undoShift+0x9e>
	    return;
    if(currstate[row-1][col-1]) {
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e5a      	subs	r2, r3, #1
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3b01      	subs	r3, #1
 800178c:	4918      	ldr	r1, [pc, #96]	@ (80017f0 <undoShift+0xa8>)
 800178e:	00d2      	lsls	r2, r2, #3
 8001790:	4413      	add	r3, r2
 8001792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d026      	beq.n	80017e8 <undoShift+0xa0>
    	int next[2] = {col, row};
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	617b      	str	r3, [r7, #20]
        forcemove(currpos, next);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	4812      	ldr	r0, [pc, #72]	@ (80017f4 <undoShift+0xac>)
 80017aa:	f7ff fed1 	bl	8001550 <forcemove>
        currpos[0] = next[0];
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <undoShift+0xac>)
 80017b2:	6013      	str	r3, [r2, #0]
        currpos[1] = next[1];
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <undoShift+0xac>)
 80017b8:	6053      	str	r3, [r2, #4]
        moveRelative(dir, 2);
 80017ba:	2102      	movs	r1, #2
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff13 	bl	80015e8 <moveRelative>
        Up();
 80017c2:	f7ff fe25 	bl	8001410 <Up>
        moveRelative((dir+2)%4, 2);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3302      	adds	r3, #2
 80017ca:	425a      	negs	r2, r3
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	bf58      	it	pl
 80017d6:	4253      	negpl	r3, r2
 80017d8:	2102      	movs	r1, #2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff04 	bl	80015e8 <moveRelative>
        Down();
 80017e0:	f7ff fe3c 	bl	800145c <Down>
 80017e4:	e000      	b.n	80017e8 <undoShift+0xa0>
	    return;
 80017e6:	bf00      	nop
    }
}
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000208 	.word	0x20000208

080017f8 <shiftAll>:

void shiftAll(int start[2], int end[2]) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
    int col_dif = end[0] - start[0];
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	60fb      	str	r3, [r7, #12]
    int row_dif = end[1] - start[1];
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3304      	adds	r3, #4
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3304      	adds	r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	60bb      	str	r3, [r7, #8]

    if (abs(col_dif) > abs(row_dif)) { // horizontal
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001824:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bfb8      	it	lt
 800182e:	425b      	neglt	r3, r3
 8001830:	429a      	cmp	r2, r3
 8001832:	f340 80b1 	ble.w	8001998 <shiftAll+0x1a0>
        if (col_dif > 0) { // right
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd56      	ble.n	80018ea <shiftAll+0xf2>
            if (row_dif > 0) { // right up
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	dd29      	ble.n	8001896 <shiftAll+0x9e>
                shiftPiece(start[1], RIGHT, SOUTH);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2202      	movs	r2, #2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff ff21 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], RIGHT2, SOUTH);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3302      	adds	r3, #2
 8001862:	2202      	movs	r2, #2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff ff17 	bl	8001698 <shiftPiece>
                shiftPiece(UP, start[0], NORTH);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	1c58      	adds	r0, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff ff0d 	bl	8001698 <shiftPiece>
                shiftPiece(UP, RIGHT, NORTH);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1c58      	adds	r0, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff ff02 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], LEFT, WEST);
                shiftPiece(DOWN, LEFT, WEST);
            }
        }
    }
}
 8001894:	e130      	b.n	8001af8 <shiftAll+0x300>
                shiftPiece(start[1], RIGHT, NORTH);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3304      	adds	r3, #4
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff fef7 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], RIGHT2, NORTH);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3302      	adds	r3, #2
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff feed 	bl	8001698 <shiftPiece>
                shiftPiece(UP, start[0], SOUTH);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3304      	adds	r3, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1c58      	adds	r0, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2202      	movs	r2, #2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff fee3 	bl	8001698 <shiftPiece>
                shiftPiece(DOWN, RIGHT, SOUTH);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	1e58      	subs	r0, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	2202      	movs	r2, #2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff fed8 	bl	8001698 <shiftPiece>
}
 80018e8:	e106      	b.n	8001af8 <shiftAll+0x300>
            if (row_dif > 0) { // left up
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd29      	ble.n	8001944 <shiftAll+0x14c>
                shiftPiece(start[1], LEFT, SOUTH);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	2202      	movs	r2, #2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff feca 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], LEFT2, SOUTH);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3b02      	subs	r3, #2
 8001910:	2202      	movs	r2, #2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff fec0 	bl	8001698 <shiftPiece>
                shiftPiece(UP, start[0], NORTH);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3304      	adds	r3, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1c58      	adds	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff feb6 	bl	8001698 <shiftPiece>
                shiftPiece(UP, LEFT, NORTH);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	1c58      	adds	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff feab 	bl	8001698 <shiftPiece>
}
 8001942:	e0d9      	b.n	8001af8 <shiftAll+0x300>
                shiftPiece(start[1], LEFT, NORTH);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3304      	adds	r3, #4
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff fea0 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], LEFT2, NORTH);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3304      	adds	r3, #4
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3b02      	subs	r3, #2
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff fe96 	bl	8001698 <shiftPiece>
                shiftPiece(DOWN, start[0], SOUTH);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3304      	adds	r3, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1e58      	subs	r0, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2202      	movs	r2, #2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff fe8c 	bl	8001698 <shiftPiece>
                shiftPiece(DOWN, LEFT, SOUTH);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	2202      	movs	r2, #2
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff fe81 	bl	8001698 <shiftPiece>
}
 8001996:	e0af      	b.n	8001af8 <shiftAll+0x300>
        if (row_dif > 0) { // up
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dd56      	ble.n	8001a4c <shiftAll+0x254>
            if (col_dif > 0) { // up right
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dd29      	ble.n	80019f8 <shiftAll+0x200>
                shiftPiece(UP, start[0], WEST);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3304      	adds	r3, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	1c58      	adds	r0, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2203      	movs	r2, #3
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff fe70 	bl	8001698 <shiftPiece>
                shiftPiece(UP2, start[0], WEST);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1c98      	adds	r0, r3, #2
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2203      	movs	r2, #3
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff fe66 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], RIGHT, EAST);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3304      	adds	r3, #4
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	2201      	movs	r2, #1
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff fe5c 	bl	8001698 <shiftPiece>
                shiftPiece(UP, RIGHT, EAST);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1c58      	adds	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	2201      	movs	r2, #1
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff fe51 	bl	8001698 <shiftPiece>
}
 80019f6:	e07f      	b.n	8001af8 <shiftAll+0x300>
                shiftPiece(UP, start[0], EAST);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3304      	adds	r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1c58      	adds	r0, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff fe46 	bl	8001698 <shiftPiece>
                shiftPiece(UP2, start[0], EAST);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1c98      	adds	r0, r3, #2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff fe3c 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], LEFT, WEST);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3304      	adds	r3, #4
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff fe32 	bl	8001698 <shiftPiece>
                shiftPiece(UP, LEFT, WEST);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1c58      	adds	r0, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff fe27 	bl	8001698 <shiftPiece>
}
 8001a4a:	e055      	b.n	8001af8 <shiftAll+0x300>
            if (col_dif > 0) { // down right
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dd29      	ble.n	8001aa6 <shiftAll+0x2ae>
                shiftPiece(DOWN, start[0], WEST);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1e58      	subs	r0, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff fe19 	bl	8001698 <shiftPiece>
                shiftPiece(DOWN2, start[0], WEST);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1e98      	subs	r0, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2203      	movs	r2, #3
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff fe0f 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], RIGHT, EAST);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	2201      	movs	r2, #1
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff fe05 	bl	8001698 <shiftPiece>
                shiftPiece(DOWN, RIGHT, EAST);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3304      	adds	r3, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1e58      	subs	r0, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff fdfa 	bl	8001698 <shiftPiece>
}
 8001aa4:	e028      	b.n	8001af8 <shiftAll+0x300>
                shiftPiece(DOWN, start[0], EAST);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	1e58      	subs	r0, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff fdef 	bl	8001698 <shiftPiece>
                shiftPiece(DOWN2, start[0], EAST);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1e98      	subs	r0, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff fde5 	bl	8001698 <shiftPiece>
                shiftPiece(start[1], LEFT, WEST);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff fddb 	bl	8001698 <shiftPiece>
                shiftPiece(DOWN, LEFT, WEST);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1e58      	subs	r0, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff fdd0 	bl	8001698 <shiftPiece>
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <undoshiftAll>:

void undoshiftAll(int start[2], int end[2]) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    int col_dif = end[0] - start[0];
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	60fb      	str	r3, [r7, #12]
    int row_dif = end[1] - start[1];
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	60bb      	str	r3, [r7, #8]


    if (abs(col_dif) > abs(row_dif)) { // horizontal
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b2c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bfb8      	it	lt
 8001b36:	425b      	neglt	r3, r3
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f340 80b1 	ble.w	8001ca0 <undoshiftAll+0x1a0>
        if (col_dif > 0) { // right
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dd56      	ble.n	8001bf2 <undoshiftAll+0xf2>
            if (row_dif > 0) { // right up
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	dd29      	ble.n	8001b9e <undoshiftAll+0x9e>
                undoShift(start[1], RIGHT, SOUTH);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	2202      	movs	r2, #2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff fdf5 	bl	8001748 <undoShift>
                undoShift(start[1], RIGHT2, SOUTH);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3302      	adds	r3, #2
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff fdeb 	bl	8001748 <undoShift>
                undoShift(UP, start[0], NORTH);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	1c58      	adds	r0, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff fde1 	bl	8001748 <undoShift>
                undoShift(UP, RIGHT, NORTH);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	1c58      	adds	r0, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff fdd6 	bl	8001748 <undoShift>
                undoShift(start[1], LEFT, WEST);
                undoShift(DOWN, LEFT, WEST);
            }
        }
    }
}
 8001b9c:	e130      	b.n	8001e00 <undoshiftAll+0x300>
                undoShift(start[1], RIGHT, NORTH);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7ff fdcb 	bl	8001748 <undoShift>
                undoShift(start[1], RIGHT2, NORTH);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff fdc1 	bl	8001748 <undoShift>
                undoShift(UP, start[0], SOUTH);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1c58      	adds	r0, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7ff fdb7 	bl	8001748 <undoShift>
                undoShift(DOWN, RIGHT, SOUTH);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1e58      	subs	r0, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	2202      	movs	r2, #2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff fdac 	bl	8001748 <undoShift>
}
 8001bf0:	e106      	b.n	8001e00 <undoshiftAll+0x300>
            if (row_dif > 0) { // left up
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	dd29      	ble.n	8001c4c <undoshiftAll+0x14c>
                undoShift(start[1], LEFT, SOUTH);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	2202      	movs	r2, #2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7ff fd9e 	bl	8001748 <undoShift>
                undoShift(start[1], LEFT2, SOUTH);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3b02      	subs	r3, #2
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7ff fd94 	bl	8001748 <undoShift>
                undoShift(UP, start[0], NORTH);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1c58      	adds	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7ff fd8a 	bl	8001748 <undoShift>
                undoShift(UP, LEFT, NORTH);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	1c58      	adds	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	2200      	movs	r2, #0
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7ff fd7f 	bl	8001748 <undoShift>
}
 8001c4a:	e0d9      	b.n	8001e00 <undoshiftAll+0x300>
                undoShift(start[1], LEFT, NORTH);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7ff fd74 	bl	8001748 <undoShift>
                undoShift(start[1], LEFT2, NORTH);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3b02      	subs	r3, #2
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7ff fd6a 	bl	8001748 <undoShift>
                undoShift(DOWN, start[0], SOUTH);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2202      	movs	r2, #2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7ff fd60 	bl	8001748 <undoShift>
                undoShift(DOWN, LEFT, SOUTH);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	2202      	movs	r2, #2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7ff fd55 	bl	8001748 <undoShift>
}
 8001c9e:	e0af      	b.n	8001e00 <undoshiftAll+0x300>
        if (row_dif > 0) { // up
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dd56      	ble.n	8001d54 <undoshiftAll+0x254>
            if (col_dif > 0) { // up right
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	dd29      	ble.n	8001d00 <undoshiftAll+0x200>
                undoShift(UP, start[0], WEST);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1c58      	adds	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7ff fd44 	bl	8001748 <undoShift>
                undoShift(UP2, start[0], WEST);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	1c98      	adds	r0, r3, #2
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7ff fd3a 	bl	8001748 <undoShift>
                undoShift(start[1], RIGHT, EAST);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7ff fd30 	bl	8001748 <undoShift>
                undoShift(UP, RIGHT, EAST);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1c58      	adds	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7ff fd25 	bl	8001748 <undoShift>
}
 8001cfe:	e07f      	b.n	8001e00 <undoshiftAll+0x300>
                undoShift(UP, start[0], EAST);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1c58      	adds	r0, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7ff fd1a 	bl	8001748 <undoShift>
                undoShift(UP2, start[0], EAST);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1c98      	adds	r0, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7ff fd10 	bl	8001748 <undoShift>
                undoShift(start[1], LEFT, WEST);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7ff fd06 	bl	8001748 <undoShift>
                undoShift(UP, LEFT, WEST);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	1c58      	adds	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7ff fcfb 	bl	8001748 <undoShift>
}
 8001d52:	e055      	b.n	8001e00 <undoshiftAll+0x300>
            if (col_dif > 0) { // down right
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dd29      	ble.n	8001dae <undoshiftAll+0x2ae>
                undoShift(DOWN, start[0], WEST);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1e58      	subs	r0, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2203      	movs	r2, #3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7ff fced 	bl	8001748 <undoShift>
                undoShift(DOWN2, start[0], WEST);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1e98      	subs	r0, r3, #2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7ff fce3 	bl	8001748 <undoShift>
                undoShift(start[1], RIGHT, EAST);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7ff fcd9 	bl	8001748 <undoShift>
                undoShift(DOWN, RIGHT, EAST);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1e58      	subs	r0, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	2201      	movs	r2, #1
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7ff fcce 	bl	8001748 <undoShift>
}
 8001dac:	e028      	b.n	8001e00 <undoshiftAll+0x300>
                undoShift(DOWN, start[0], EAST);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3304      	adds	r3, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	1e58      	subs	r0, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7ff fcc3 	bl	8001748 <undoShift>
                undoShift(DOWN2, start[0], EAST);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	1e98      	subs	r0, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7ff fcb9 	bl	8001748 <undoShift>
                undoShift(start[1], LEFT, WEST);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7ff fcaf 	bl	8001748 <undoShift>
                undoShift(DOWN, LEFT, WEST);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	1e58      	subs	r0, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7ff fca4 	bl	8001748 <undoShift>
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <shiftKnight>:

void shiftKnight(int start[2], int end[2]) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
    int col_dif = end[0] - start[0];
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	60fb      	str	r3, [r7, #12]
    int row_dif = end[1] - start[1];
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	3304      	adds	r3, #4
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	60bb      	str	r3, [r7, #8]

    Up();
 8001e2e:	f7ff faef 	bl	8001410 <Up>
    if (abs(col_dif) > abs(row_dif)) { // horizontal
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e38:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bfb8      	it	lt
 8001e42:	425b      	neglt	r3, r3
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dd3c      	ble.n	8001ec2 <shiftKnight+0xba>
        if (col_dif > 0) { // right
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	dd1c      	ble.n	8001e88 <shiftKnight+0x80>
            if (row_dif > 0) { // right up
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	dd0c      	ble.n	8001e6e <shiftKnight+0x66>
                moveRelative(NORTH, 4);
 8001e54:	2104      	movs	r1, #4
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fbc6 	bl	80015e8 <moveRelative>
                moveRelative(EAST, 16);
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f7ff fbc2 	bl	80015e8 <moveRelative>
                moveRelative(NORTH, 4);
 8001e64:	2104      	movs	r1, #4
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff fbbe 	bl	80015e8 <moveRelative>
 8001e6c:	e065      	b.n	8001f3a <shiftKnight+0x132>
            } else { // right down
                moveRelative(SOUTH, 4);
 8001e6e:	2104      	movs	r1, #4
 8001e70:	2002      	movs	r0, #2
 8001e72:	f7ff fbb9 	bl	80015e8 <moveRelative>
                moveRelative(EAST, 16);
 8001e76:	2110      	movs	r1, #16
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff fbb5 	bl	80015e8 <moveRelative>
                moveRelative(SOUTH, 4);
 8001e7e:	2104      	movs	r1, #4
 8001e80:	2002      	movs	r0, #2
 8001e82:	f7ff fbb1 	bl	80015e8 <moveRelative>
 8001e86:	e058      	b.n	8001f3a <shiftKnight+0x132>
            }
        } else { // left
            if (row_dif > 0) { // left up
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	dd0c      	ble.n	8001ea8 <shiftKnight+0xa0>
                moveRelative(NORTH, 4);
 8001e8e:	2104      	movs	r1, #4
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fba9 	bl	80015e8 <moveRelative>
                moveRelative(WEST, 16);
 8001e96:	2110      	movs	r1, #16
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f7ff fba5 	bl	80015e8 <moveRelative>
                moveRelative(NORTH, 4);
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fba1 	bl	80015e8 <moveRelative>
 8001ea6:	e048      	b.n	8001f3a <shiftKnight+0x132>
            } else { // left down
                moveRelative(SOUTH, 4);
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fb9c 	bl	80015e8 <moveRelative>
                moveRelative(WEST, 16);
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f7ff fb98 	bl	80015e8 <moveRelative>
                moveRelative(SOUTH, 4);
 8001eb8:	2104      	movs	r1, #4
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f7ff fb94 	bl	80015e8 <moveRelative>
 8001ec0:	e03b      	b.n	8001f3a <shiftKnight+0x132>
            }
        }
    } else { // vertical
        if (row_dif > 0) { // up
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	dd1c      	ble.n	8001f02 <shiftKnight+0xfa>
            if (col_dif > 0) { // up right
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dd0c      	ble.n	8001ee8 <shiftKnight+0xe0>
                moveRelative(EAST, 4);
 8001ece:	2104      	movs	r1, #4
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff fb89 	bl	80015e8 <moveRelative>
                moveRelative(NORTH, 16);
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff fb85 	bl	80015e8 <moveRelative>
                moveRelative(EAST, 4);
 8001ede:	2104      	movs	r1, #4
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff fb81 	bl	80015e8 <moveRelative>
 8001ee6:	e028      	b.n	8001f3a <shiftKnight+0x132>
            } else { // up left
                moveRelative(WEST, 4);
 8001ee8:	2104      	movs	r1, #4
 8001eea:	2003      	movs	r0, #3
 8001eec:	f7ff fb7c 	bl	80015e8 <moveRelative>
                moveRelative(NORTH, 16);
 8001ef0:	2110      	movs	r1, #16
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fb78 	bl	80015e8 <moveRelative>
                moveRelative(WEST, 4);
 8001ef8:	2104      	movs	r1, #4
 8001efa:	2003      	movs	r0, #3
 8001efc:	f7ff fb74 	bl	80015e8 <moveRelative>
 8001f00:	e01b      	b.n	8001f3a <shiftKnight+0x132>
            }
        } else { // down
            if (col_dif > 0) { // down right
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	dd0c      	ble.n	8001f22 <shiftKnight+0x11a>
                moveRelative(EAST, 4);
 8001f08:	2104      	movs	r1, #4
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff fb6c 	bl	80015e8 <moveRelative>
                moveRelative(SOUTH, 16);
 8001f10:	2110      	movs	r1, #16
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7ff fb68 	bl	80015e8 <moveRelative>
                moveRelative(EAST, 4);
 8001f18:	2104      	movs	r1, #4
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff fb64 	bl	80015e8 <moveRelative>
 8001f20:	e00b      	b.n	8001f3a <shiftKnight+0x132>
            }
            else { // down left
                moveRelative(WEST, 4);
 8001f22:	2104      	movs	r1, #4
 8001f24:	2003      	movs	r0, #3
 8001f26:	f7ff fb5f 	bl	80015e8 <moveRelative>
                moveRelative(SOUTH, 16);
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f7ff fb5b 	bl	80015e8 <moveRelative>
                moveRelative(WEST, 4);
 8001f32:	2104      	movs	r1, #4
 8001f34:	2003      	movs	r0, #3
 8001f36:	f7ff fb57 	bl	80015e8 <moveRelative>
            }
        }
    }
    Down();
 8001f3a:	f7ff fa8f 	bl	800145c <Down>
    currpos[0] = end[0];
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <shiftKnight+0x150>)
 8001f44:	6013      	str	r3, [r2, #0]
	currpos[1] = end[1];
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a03      	ldr	r2, [pc, #12]	@ (8001f58 <shiftKnight+0x150>)
 8001f4c:	6053      	str	r3, [r2, #4]
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000208 	.word	0x20000208

08001f5c <moveKnight>:

void moveKnight(int start[2], int end[2]) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    shiftAll(start, end);
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fc45 	bl	80017f8 <shiftAll>
    forcemove(currpos, start);
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	480d      	ldr	r0, [pc, #52]	@ (8001fa8 <moveKnight+0x4c>)
 8001f72:	f7ff faed 	bl	8001550 <forcemove>
    shiftKnight(start, end);
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff45 	bl	8001e08 <shiftKnight>
    undoshiftAll(start, end);
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fdbd 	bl	8001b00 <undoshiftAll>
    forcemove(currpos, end);
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	4807      	ldr	r0, [pc, #28]	@ (8001fa8 <moveKnight+0x4c>)
 8001f8a:	f7ff fae1 	bl	8001550 <forcemove>
    currpos[0] = end[0];
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <moveKnight+0x4c>)
 8001f94:	6013      	str	r3, [r2, #0]
    currpos[1] = end[1];
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a03      	ldr	r2, [pc, #12]	@ (8001fa8 <moveKnight+0x4c>)
 8001f9c:	6053      	str	r3, [r2, #4]
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000208 	.word	0x20000208

08001fac <play_audio>:

//END GABE CODE

void play_audio() {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0); // Set GPIO low
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fb6:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <play_audio+0x28>)
 8001fb8:	f002 fc3c 	bl	8004834 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc0:	f002 f958 	bl	8004274 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fca:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <play_audio+0x28>)
 8001fcc:	f002 fc32 	bl	8004834 <HAL_GPIO_WritePin>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	48001400 	.word	0x48001400

08001fd8 <init>:

void init() {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 8001fdc:	f7fe ff80 	bl	8000ee0 <ILI9341_Unselect>
    ILI9341_Init();
 8001fe0:	f7ff f82a 	bl	8001038 <ILI9341_Init>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <diagonalmove>:

void diagonalmove(int hdir, int vdir) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	if (hdir == 0) {
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <diagonalmove+0x1c>
		HAL_GPIO_WritePin(HDIR_GPIO_Port, HDIR_Pin, GPIO_PIN_RESET); //move to the right (8->1)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	4817      	ldr	r0, [pc, #92]	@ (800205c <diagonalmove+0x74>)
 8001ffe:	f002 fc19 	bl	8004834 <HAL_GPIO_WritePin>
 8002002:	e004      	b.n	800200e <diagonalmove+0x26>
	}
	else {
		HAL_GPIO_WritePin(HDIR_GPIO_Port, HDIR_Pin, GPIO_PIN_SET); //move to the left (1->8)
 8002004:	2201      	movs	r2, #1
 8002006:	2110      	movs	r1, #16
 8002008:	4814      	ldr	r0, [pc, #80]	@ (800205c <diagonalmove+0x74>)
 800200a:	f002 fc13 	bl	8004834 <HAL_GPIO_WritePin>
	}

	if (vdir == 0) {
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <diagonalmove+0x38>
		HAL_GPIO_WritePin(VDIR_GPIO_Port, VDIR_Pin, GPIO_PIN_SET); //move up (8->1)
 8002014:	2201      	movs	r2, #1
 8002016:	2108      	movs	r1, #8
 8002018:	4810      	ldr	r0, [pc, #64]	@ (800205c <diagonalmove+0x74>)
 800201a:	f002 fc0b 	bl	8004834 <HAL_GPIO_WritePin>
 800201e:	e004      	b.n	800202a <diagonalmove+0x42>
	}
	else {
		HAL_GPIO_WritePin(VDIR_GPIO_Port, VDIR_Pin, GPIO_PIN_RESET); // move down (1->8)
 8002020:	2200      	movs	r2, #0
 8002022:	2108      	movs	r1, #8
 8002024:	480d      	ldr	r0, [pc, #52]	@ (800205c <diagonalmove+0x74>)
 8002026:	f002 fc05 	bl	8004834 <HAL_GPIO_WritePin>
	}
	hmove = 1;
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <diagonalmove+0x78>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
	vmove = 1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <diagonalmove+0x7c>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]
	countmax = 2225;
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <diagonalmove+0x80>)
 8002038:	f640 02b1 	movw	r2, #2225	@ 0x8b1
 800203c:	601a      	str	r2, [r3, #0]
	while (vmove == 1 || hmove == 1) {}
 800203e:	bf00      	nop
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <diagonalmove+0x7c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d0fb      	beq.n	8002040 <diagonalmove+0x58>
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <diagonalmove+0x78>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d0f7      	beq.n	8002040 <diagonalmove+0x58>
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	48000800 	.word	0x48000800
 8002060:	20000678 	.word	0x20000678
 8002064:	2000067c 	.word	0x2000067c
 8002068:	20000684 	.word	0x20000684

0800206c <homing>:

void homing()
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
	int xgo = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	607b      	str	r3, [r7, #4]
	int ygo = 1;
 8002076:	2301      	movs	r3, #1
 8002078:	603b      	str	r3, [r7, #0]
	while (xgo == 1) {
 800207a:	e019      	b.n	80020b0 <homing+0x44>
		HAL_GPIO_WritePin(HDIR_GPIO_Port, HDIR_Pin, GPIO_PIN_SET); //move left
 800207c:	2201      	movs	r2, #1
 800207e:	2110      	movs	r1, #16
 8002080:	481e      	ldr	r0, [pc, #120]	@ (80020fc <homing+0x90>)
 8002082:	f002 fbd7 	bl	8004834 <HAL_GPIO_WritePin>
		hmove = 1;
 8002086:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <homing+0x94>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]
	    countmax = 1; // change to 1/2 square size
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <homing+0x98>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
	    while (hmove == 1) {}
 8002092:	bf00      	nop
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <homing+0x94>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d0fb      	beq.n	8002094 <homing+0x28>
	    if (HAL_GPIO_ReadPin(xlimit_GPIO_Port, xlimit_Pin) == 0) {
 800209c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020a0:	4819      	ldr	r0, [pc, #100]	@ (8002108 <homing+0x9c>)
 80020a2:	f002 fbaf 	bl	8004804 <HAL_GPIO_ReadPin>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <homing+0x44>
	    	xgo = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
	while (xgo == 1) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d0e2      	beq.n	800207c <homing+0x10>
	    }
	}
	while (ygo == 1) {
 80020b6:	e019      	b.n	80020ec <homing+0x80>
		HAL_GPIO_WritePin(VDIR_GPIO_Port, VDIR_Pin, GPIO_PIN_RESET); //move down
 80020b8:	2200      	movs	r2, #0
 80020ba:	2108      	movs	r1, #8
 80020bc:	480f      	ldr	r0, [pc, #60]	@ (80020fc <homing+0x90>)
 80020be:	f002 fbb9 	bl	8004834 <HAL_GPIO_WritePin>
		vmove = 1;
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <homing+0xa0>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
	    countmax = 1; // change to 1/2 square size
 80020c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <homing+0x98>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
	    while (vmove == 1) {}
 80020ce:	bf00      	nop
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <homing+0xa0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d0fb      	beq.n	80020d0 <homing+0x64>
	    if (HAL_GPIO_ReadPin(ylimit_GPIO_Port, ylimit_Pin) == 0) {
 80020d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <homing+0xa4>)
 80020de:	f002 fb91 	bl	8004804 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <homing+0x80>
	    	ygo = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	603b      	str	r3, [r7, #0]
	while (ygo == 1) {
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d0e2      	beq.n	80020b8 <homing+0x4c>
	    }
	}
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	48000800 	.word	0x48000800
 8002100:	20000678 	.word	0x20000678
 8002104:	20000684 	.word	0x20000684
 8002108:	48001000 	.word	0x48001000
 800210c:	2000067c 	.word	0x2000067c
 8002110:	48000400 	.word	0x48000400

08002114 <movefrom>:

void movefrom(int st[2], int e[2]) { //st[col, row] e[col, row] (1-8)
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
	int hdist = e[0] - st[0]; // start col - end col = horizontal dist
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
	int vdist = e[1] - st[1]; // start row - end row = vertical dist
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	3304      	adds	r3, #4
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3304      	adds	r3, #4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	623b      	str	r3, [r7, #32]
	int hdir = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
	int vdir = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
	if (hdist < 0) {
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	2b00      	cmp	r3, #0
 8002146:	da04      	bge.n	8002152 <movefrom+0x3e>
		hdist *= -1;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	425b      	negs	r3, r3
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
		hdir = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
	}
	if (vdist < 0) {
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da04      	bge.n	8002162 <movefrom+0x4e>
		vdist *= -1;
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	425b      	negs	r3, r3
 800215c:	623b      	str	r3, [r7, #32]
		vdir = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
	}
	if (vdist == 0) { // moving only horizontally
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d114      	bne.n	8002192 <movefrom+0x7e>
		Up();
 8002168:	f7ff f952 	bl	8001410 <Up>
		for (int i = 0; i < hdist; i++) {
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e008      	b.n	8002184 <movefrom+0x70>
			hormove(hdir); //move 1 full inch
 8002172:	69f8      	ldr	r0, [r7, #28]
 8002174:	f7ff f998 	bl	80014a8 <hormove>
			hormove(hdir);
 8002178:	69f8      	ldr	r0, [r7, #28]
 800217a:	f7ff f995 	bl	80014a8 <hormove>
		for (int i = 0; i < hdist; i++) {
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf2      	blt.n	8002172 <movefrom+0x5e>
		}
		Down();
 800218c:	f7ff f966 	bl	800145c <Down>
		Down();
	}
	else {
		moveKnight(st, e);//knight move
	}
}
 8002190:	e036      	b.n	8002200 <movefrom+0xec>
	else if (hdist == 0) {
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	2b00      	cmp	r3, #0
 8002196:	d114      	bne.n	80021c2 <movefrom+0xae>
		Up();
 8002198:	f7ff f93a 	bl	8001410 <Up>
		for (int i = 0; i < vdist; i++) {
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	e008      	b.n	80021b4 <movefrom+0xa0>
			vertmove(vdir); //move 1 full inch
 80021a2:	69b8      	ldr	r0, [r7, #24]
 80021a4:	f7ff f9aa 	bl	80014fc <vertmove>
			vertmove(vdir);
 80021a8:	69b8      	ldr	r0, [r7, #24]
 80021aa:	f7ff f9a7 	bl	80014fc <vertmove>
		for (int i = 0; i < vdist; i++) {
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	3301      	adds	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf2      	blt.n	80021a2 <movefrom+0x8e>
		Down();
 80021bc:	f7ff f94e 	bl	800145c <Down>
}
 80021c0:	e01e      	b.n	8002200 <movefrom+0xec>
	else if (hdist == vdist) {
 80021c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d116      	bne.n	80021f8 <movefrom+0xe4>
		Up();
 80021ca:	f7ff f921 	bl	8001410 <Up>
		for (int i = 0; i < vdist; i++) {
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e00a      	b.n	80021ea <movefrom+0xd6>
			diagonalmove(hdir, vdir);
 80021d4:	69b9      	ldr	r1, [r7, #24]
 80021d6:	69f8      	ldr	r0, [r7, #28]
 80021d8:	f7ff ff06 	bl	8001fe8 <diagonalmove>
			diagonalmove(hdir, vdir);
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	69f8      	ldr	r0, [r7, #28]
 80021e0:	f7ff ff02 	bl	8001fe8 <diagonalmove>
		for (int i = 0; i < vdist; i++) {
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	dbf0      	blt.n	80021d4 <movefrom+0xc0>
		Down();
 80021f2:	f7ff f933 	bl	800145c <Down>
}
 80021f6:	e003      	b.n	8002200 <movefrom+0xec>
		moveKnight(st, e);//knight move
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff feae 	bl	8001f5c <moveKnight>
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	@ 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <readsensor>:



void readsensor() {
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b0d9      	sub	sp, #356	@ 0x164
 800220c:	af06      	add	r7, sp, #24
	//col 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,  1);
 800220e:	2201      	movs	r2, #1
 8002210:	2104      	movs	r1, #4
 8002212:	48dc      	ldr	r0, [pc, #880]	@ (8002584 <readsensor+0x37c>)
 8002214:	f002 fb0e 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c1r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8002218:	2104      	movs	r1, #4
 800221a:	48db      	ldr	r0, [pc, #876]	@ (8002588 <readsensor+0x380>)
 800221c:	f002 faf2 	bl	8004804 <HAL_GPIO_ReadPin>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	GPIO_PinState pin_c1r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8002226:	2110      	movs	r1, #16
 8002228:	48d7      	ldr	r0, [pc, #860]	@ (8002588 <readsensor+0x380>)
 800222a:	f002 faeb 	bl	8004804 <HAL_GPIO_ReadPin>
 800222e:	4603      	mov	r3, r0
 8002230:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	GPIO_PinState pin_c1r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8002234:	2120      	movs	r1, #32
 8002236:	48d4      	ldr	r0, [pc, #848]	@ (8002588 <readsensor+0x380>)
 8002238:	f002 fae4 	bl	8004804 <HAL_GPIO_ReadPin>
 800223c:	4603      	mov	r3, r0
 800223e:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
	GPIO_PinState pin_c1r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8002242:	2140      	movs	r1, #64	@ 0x40
 8002244:	48d0      	ldr	r0, [pc, #832]	@ (8002588 <readsensor+0x380>)
 8002246:	f002 fadd 	bl	8004804 <HAL_GPIO_ReadPin>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
	GPIO_PinState pin_c1r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8002250:	2108      	movs	r1, #8
 8002252:	48cd      	ldr	r0, [pc, #820]	@ (8002588 <readsensor+0x380>)
 8002254:	f002 fad6 	bl	8004804 <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
	GPIO_PinState pin_c1r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 800225e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002262:	48ca      	ldr	r0, [pc, #808]	@ (800258c <readsensor+0x384>)
 8002264:	f002 face 	bl	8004804 <HAL_GPIO_ReadPin>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
	GPIO_PinState pin_c1r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 800226e:	2180      	movs	r1, #128	@ 0x80
 8002270:	48c6      	ldr	r0, [pc, #792]	@ (800258c <readsensor+0x384>)
 8002272:	f002 fac7 	bl	8004804 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
	GPIO_PinState pin_c1r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 800227c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002280:	48c2      	ldr	r0, [pc, #776]	@ (800258c <readsensor+0x384>)
 8002282:	f002 fabf 	bl	8004804 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,  0);
 800228c:	2200      	movs	r2, #0
 800228e:	2104      	movs	r1, #4
 8002290:	48bc      	ldr	r0, [pc, #752]	@ (8002584 <readsensor+0x37c>)
 8002292:	f002 facf 	bl	8004834 <HAL_GPIO_WritePin>

	//col 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  1);
 8002296:	2201      	movs	r2, #1
 8002298:	2140      	movs	r1, #64	@ 0x40
 800229a:	48ba      	ldr	r0, [pc, #744]	@ (8002584 <readsensor+0x37c>)
 800229c:	f002 faca 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c2r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 80022a0:	2104      	movs	r1, #4
 80022a2:	48b9      	ldr	r0, [pc, #740]	@ (8002588 <readsensor+0x380>)
 80022a4:	f002 faae 	bl	8004804 <HAL_GPIO_ReadPin>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
	GPIO_PinState pin_c2r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 80022ae:	2110      	movs	r1, #16
 80022b0:	48b5      	ldr	r0, [pc, #724]	@ (8002588 <readsensor+0x380>)
 80022b2:	f002 faa7 	bl	8004804 <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
	GPIO_PinState pin_c2r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 80022bc:	2120      	movs	r1, #32
 80022be:	48b2      	ldr	r0, [pc, #712]	@ (8002588 <readsensor+0x380>)
 80022c0:	f002 faa0 	bl	8004804 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
	GPIO_PinState pin_c2r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 80022ca:	2140      	movs	r1, #64	@ 0x40
 80022cc:	48ae      	ldr	r0, [pc, #696]	@ (8002588 <readsensor+0x380>)
 80022ce:	f002 fa99 	bl	8004804 <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
	GPIO_PinState pin_c2r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 80022d8:	2108      	movs	r1, #8
 80022da:	48ab      	ldr	r0, [pc, #684]	@ (8002588 <readsensor+0x380>)
 80022dc:	f002 fa92 	bl	8004804 <HAL_GPIO_ReadPin>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
	GPIO_PinState pin_c2r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 80022e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ea:	48a8      	ldr	r0, [pc, #672]	@ (800258c <readsensor+0x384>)
 80022ec:	f002 fa8a 	bl	8004804 <HAL_GPIO_ReadPin>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
	GPIO_PinState pin_c2r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80022f6:	2180      	movs	r1, #128	@ 0x80
 80022f8:	48a4      	ldr	r0, [pc, #656]	@ (800258c <readsensor+0x384>)
 80022fa:	f002 fa83 	bl	8004804 <HAL_GPIO_ReadPin>
 80022fe:	4603      	mov	r3, r0
 8002300:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
	GPIO_PinState pin_c2r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8002304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002308:	48a0      	ldr	r0, [pc, #640]	@ (800258c <readsensor+0x384>)
 800230a:	f002 fa7b 	bl	8004804 <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	f887 3130 	strb.w	r3, [r7, #304]	@ 0x130
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  0);
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	@ 0x40
 8002318:	489a      	ldr	r0, [pc, #616]	@ (8002584 <readsensor+0x37c>)
 800231a:	f002 fa8b 	bl	8004834 <HAL_GPIO_WritePin>

	//col 3
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2,  1);
 800231e:	2201      	movs	r2, #1
 8002320:	2104      	movs	r1, #4
 8002322:	489a      	ldr	r0, [pc, #616]	@ (800258c <readsensor+0x384>)
 8002324:	f002 fa86 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c3r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8002328:	2104      	movs	r1, #4
 800232a:	4897      	ldr	r0, [pc, #604]	@ (8002588 <readsensor+0x380>)
 800232c:	f002 fa6a 	bl	8004804 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
	GPIO_PinState pin_c3r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8002336:	2110      	movs	r1, #16
 8002338:	4893      	ldr	r0, [pc, #588]	@ (8002588 <readsensor+0x380>)
 800233a:	f002 fa63 	bl	8004804 <HAL_GPIO_ReadPin>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
	GPIO_PinState pin_c3r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8002344:	2120      	movs	r1, #32
 8002346:	4890      	ldr	r0, [pc, #576]	@ (8002588 <readsensor+0x380>)
 8002348:	f002 fa5c 	bl	8004804 <HAL_GPIO_ReadPin>
 800234c:	4603      	mov	r3, r0
 800234e:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
	GPIO_PinState pin_c3r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8002352:	2140      	movs	r1, #64	@ 0x40
 8002354:	488c      	ldr	r0, [pc, #560]	@ (8002588 <readsensor+0x380>)
 8002356:	f002 fa55 	bl	8004804 <HAL_GPIO_ReadPin>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
	GPIO_PinState pin_c3r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8002360:	2108      	movs	r1, #8
 8002362:	4889      	ldr	r0, [pc, #548]	@ (8002588 <readsensor+0x380>)
 8002364:	f002 fa4e 	bl	8004804 <HAL_GPIO_ReadPin>
 8002368:	4603      	mov	r3, r0
 800236a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	GPIO_PinState pin_c3r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 800236e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002372:	4886      	ldr	r0, [pc, #536]	@ (800258c <readsensor+0x384>)
 8002374:	f002 fa46 	bl	8004804 <HAL_GPIO_ReadPin>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
	GPIO_PinState pin_c3r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 800237e:	2180      	movs	r1, #128	@ 0x80
 8002380:	4882      	ldr	r0, [pc, #520]	@ (800258c <readsensor+0x384>)
 8002382:	f002 fa3f 	bl	8004804 <HAL_GPIO_ReadPin>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
	GPIO_PinState pin_c3r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 800238c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002390:	487e      	ldr	r0, [pc, #504]	@ (800258c <readsensor+0x384>)
 8002392:	f002 fa37 	bl	8004804 <HAL_GPIO_ReadPin>
 8002396:	4603      	mov	r3, r0
 8002398:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2,  0);
 800239c:	2200      	movs	r2, #0
 800239e:	2104      	movs	r1, #4
 80023a0:	487a      	ldr	r0, [pc, #488]	@ (800258c <readsensor+0x384>)
 80023a2:	f002 fa47 	bl	8004834 <HAL_GPIO_WritePin>

	//col 4
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1,  1);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2102      	movs	r1, #2
 80023aa:	4878      	ldr	r0, [pc, #480]	@ (800258c <readsensor+0x384>)
 80023ac:	f002 fa42 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c4r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 80023b0:	2104      	movs	r1, #4
 80023b2:	4875      	ldr	r0, [pc, #468]	@ (8002588 <readsensor+0x380>)
 80023b4:	f002 fa26 	bl	8004804 <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	GPIO_PinState pin_c4r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 80023be:	2110      	movs	r1, #16
 80023c0:	4871      	ldr	r0, [pc, #452]	@ (8002588 <readsensor+0x380>)
 80023c2:	f002 fa1f 	bl	8004804 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
	GPIO_PinState pin_c4r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 80023cc:	2120      	movs	r1, #32
 80023ce:	486e      	ldr	r0, [pc, #440]	@ (8002588 <readsensor+0x380>)
 80023d0:	f002 fa18 	bl	8004804 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
	GPIO_PinState pin_c4r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 80023da:	2140      	movs	r1, #64	@ 0x40
 80023dc:	486a      	ldr	r0, [pc, #424]	@ (8002588 <readsensor+0x380>)
 80023de:	f002 fa11 	bl	8004804 <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
	GPIO_PinState pin_c4r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 80023e8:	2108      	movs	r1, #8
 80023ea:	4867      	ldr	r0, [pc, #412]	@ (8002588 <readsensor+0x380>)
 80023ec:	f002 fa0a 	bl	8004804 <HAL_GPIO_ReadPin>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
	GPIO_PinState pin_c4r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 80023f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023fa:	4864      	ldr	r0, [pc, #400]	@ (800258c <readsensor+0x384>)
 80023fc:	f002 fa02 	bl	8004804 <HAL_GPIO_ReadPin>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
	GPIO_PinState pin_c4r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8002406:	2180      	movs	r1, #128	@ 0x80
 8002408:	4860      	ldr	r0, [pc, #384]	@ (800258c <readsensor+0x384>)
 800240a:	f002 f9fb 	bl	8004804 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
	GPIO_PinState pin_c4r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8002414:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002418:	485c      	ldr	r0, [pc, #368]	@ (800258c <readsensor+0x384>)
 800241a:	f002 f9f3 	bl	8004804 <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	f887 3120 	strb.w	r3, [r7, #288]	@ 0x120
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1,  0);
 8002424:	2200      	movs	r2, #0
 8002426:	2102      	movs	r1, #2
 8002428:	4858      	ldr	r0, [pc, #352]	@ (800258c <readsensor+0x384>)
 800242a:	f002 fa03 	bl	8004834 <HAL_GPIO_WritePin>

	//col 5
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,  1);
 800242e:	2201      	movs	r2, #1
 8002430:	2101      	movs	r1, #1
 8002432:	4856      	ldr	r0, [pc, #344]	@ (800258c <readsensor+0x384>)
 8002434:	f002 f9fe 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c5r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8002438:	2104      	movs	r1, #4
 800243a:	4853      	ldr	r0, [pc, #332]	@ (8002588 <readsensor+0x380>)
 800243c:	f002 f9e2 	bl	8004804 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	GPIO_PinState pin_c5r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8002446:	2110      	movs	r1, #16
 8002448:	484f      	ldr	r0, [pc, #316]	@ (8002588 <readsensor+0x380>)
 800244a:	f002 f9db 	bl	8004804 <HAL_GPIO_ReadPin>
 800244e:	4603      	mov	r3, r0
 8002450:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
	GPIO_PinState pin_c5r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8002454:	2120      	movs	r1, #32
 8002456:	484c      	ldr	r0, [pc, #304]	@ (8002588 <readsensor+0x380>)
 8002458:	f002 f9d4 	bl	8004804 <HAL_GPIO_ReadPin>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	GPIO_PinState pin_c5r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8002462:	2140      	movs	r1, #64	@ 0x40
 8002464:	4848      	ldr	r0, [pc, #288]	@ (8002588 <readsensor+0x380>)
 8002466:	f002 f9cd 	bl	8004804 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
	GPIO_PinState pin_c5r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8002470:	2108      	movs	r1, #8
 8002472:	4845      	ldr	r0, [pc, #276]	@ (8002588 <readsensor+0x380>)
 8002474:	f002 f9c6 	bl	8004804 <HAL_GPIO_ReadPin>
 8002478:	4603      	mov	r3, r0
 800247a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	GPIO_PinState pin_c5r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 800247e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002482:	4842      	ldr	r0, [pc, #264]	@ (800258c <readsensor+0x384>)
 8002484:	f002 f9be 	bl	8004804 <HAL_GPIO_ReadPin>
 8002488:	4603      	mov	r3, r0
 800248a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
	GPIO_PinState pin_c5r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 800248e:	2180      	movs	r1, #128	@ 0x80
 8002490:	483e      	ldr	r0, [pc, #248]	@ (800258c <readsensor+0x384>)
 8002492:	f002 f9b7 	bl	8004804 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
	GPIO_PinState pin_c5r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 800249c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024a0:	483a      	ldr	r0, [pc, #232]	@ (800258c <readsensor+0x384>)
 80024a2:	f002 f9af 	bl	8004804 <HAL_GPIO_ReadPin>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f887 3118 	strb.w	r3, [r7, #280]	@ 0x118
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,  0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2101      	movs	r1, #1
 80024b0:	4836      	ldr	r0, [pc, #216]	@ (800258c <readsensor+0x384>)
 80024b2:	f002 f9bf 	bl	8004834 <HAL_GPIO_WritePin>

	//col 6
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1);
 80024b6:	2201      	movs	r2, #1
 80024b8:	2101      	movs	r1, #1
 80024ba:	4835      	ldr	r0, [pc, #212]	@ (8002590 <readsensor+0x388>)
 80024bc:	f002 f9ba 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c6r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 80024c0:	2104      	movs	r1, #4
 80024c2:	4831      	ldr	r0, [pc, #196]	@ (8002588 <readsensor+0x380>)
 80024c4:	f002 f99e 	bl	8004804 <HAL_GPIO_ReadPin>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	GPIO_PinState pin_c6r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 80024ce:	2110      	movs	r1, #16
 80024d0:	482d      	ldr	r0, [pc, #180]	@ (8002588 <readsensor+0x380>)
 80024d2:	f002 f997 	bl	8004804 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
	GPIO_PinState pin_c6r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 80024dc:	2120      	movs	r1, #32
 80024de:	482a      	ldr	r0, [pc, #168]	@ (8002588 <readsensor+0x380>)
 80024e0:	f002 f990 	bl	8004804 <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
	GPIO_PinState pin_c6r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 80024ea:	2140      	movs	r1, #64	@ 0x40
 80024ec:	4826      	ldr	r0, [pc, #152]	@ (8002588 <readsensor+0x380>)
 80024ee:	f002 f989 	bl	8004804 <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
	GPIO_PinState pin_c6r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 80024f8:	2108      	movs	r1, #8
 80024fa:	4823      	ldr	r0, [pc, #140]	@ (8002588 <readsensor+0x380>)
 80024fc:	f002 f982 	bl	8004804 <HAL_GPIO_ReadPin>
 8002500:	4603      	mov	r3, r0
 8002502:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	GPIO_PinState pin_c6r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8002506:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800250a:	4820      	ldr	r0, [pc, #128]	@ (800258c <readsensor+0x384>)
 800250c:	f002 f97a 	bl	8004804 <HAL_GPIO_ReadPin>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
	GPIO_PinState pin_c6r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8002516:	2180      	movs	r1, #128	@ 0x80
 8002518:	481c      	ldr	r0, [pc, #112]	@ (800258c <readsensor+0x384>)
 800251a:	f002 f973 	bl	8004804 <HAL_GPIO_ReadPin>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
	GPIO_PinState pin_c6r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8002524:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002528:	4818      	ldr	r0, [pc, #96]	@ (800258c <readsensor+0x384>)
 800252a:	f002 f96b 	bl	8004804 <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0);
 8002534:	2200      	movs	r2, #0
 8002536:	2101      	movs	r1, #1
 8002538:	4815      	ldr	r0, [pc, #84]	@ (8002590 <readsensor+0x388>)
 800253a:	f002 f97b 	bl	8004834 <HAL_GPIO_WritePin>

	//col 7
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  1);
 800253e:	2201      	movs	r2, #1
 8002540:	2102      	movs	r1, #2
 8002542:	4813      	ldr	r0, [pc, #76]	@ (8002590 <readsensor+0x388>)
 8002544:	f002 f976 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c7r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8002548:	2104      	movs	r1, #4
 800254a:	480f      	ldr	r0, [pc, #60]	@ (8002588 <readsensor+0x380>)
 800254c:	f002 f95a 	bl	8004804 <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	GPIO_PinState pin_c7r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8002556:	2110      	movs	r1, #16
 8002558:	480b      	ldr	r0, [pc, #44]	@ (8002588 <readsensor+0x380>)
 800255a:	f002 f953 	bl	8004804 <HAL_GPIO_ReadPin>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	GPIO_PinState pin_c7r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8002564:	2120      	movs	r1, #32
 8002566:	4808      	ldr	r0, [pc, #32]	@ (8002588 <readsensor+0x380>)
 8002568:	f002 f94c 	bl	8004804 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	GPIO_PinState pin_c7r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8002572:	2140      	movs	r1, #64	@ 0x40
 8002574:	4804      	ldr	r0, [pc, #16]	@ (8002588 <readsensor+0x380>)
 8002576:	f002 f945 	bl	8004804 <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	GPIO_PinState pin_c7r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8002580:	2108      	movs	r1, #8
 8002582:	e007      	b.n	8002594 <readsensor+0x38c>
 8002584:	48000400 	.word	0x48000400
 8002588:	48001000 	.word	0x48001000
 800258c:	48001400 	.word	0x48001400
 8002590:	48000c00 	.word	0x48000c00
 8002594:	48d8      	ldr	r0, [pc, #864]	@ (80028f8 <readsensor+0x6f0>)
 8002596:	f002 f935 	bl	8004804 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
	GPIO_PinState pin_c7r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 80025a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025a4:	48d5      	ldr	r0, [pc, #852]	@ (80028fc <readsensor+0x6f4>)
 80025a6:	f002 f92d 	bl	8004804 <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	GPIO_PinState pin_c7r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80025b0:	2180      	movs	r1, #128	@ 0x80
 80025b2:	48d2      	ldr	r0, [pc, #840]	@ (80028fc <readsensor+0x6f4>)
 80025b4:	f002 f926 	bl	8004804 <HAL_GPIO_ReadPin>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
	GPIO_PinState pin_c7r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 80025be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025c2:	48ce      	ldr	r0, [pc, #824]	@ (80028fc <readsensor+0x6f4>)
 80025c4:	f002 f91e 	bl	8004804 <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f887 3108 	strb.w	r3, [r7, #264]	@ 0x108
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2102      	movs	r1, #2
 80025d2:	48cb      	ldr	r0, [pc, #812]	@ (8002900 <readsensor+0x6f8>)
 80025d4:	f002 f92e 	bl	8004834 <HAL_GPIO_WritePin>

	//col 8
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0,  1);
 80025d8:	2201      	movs	r2, #1
 80025da:	2101      	movs	r1, #1
 80025dc:	48c9      	ldr	r0, [pc, #804]	@ (8002904 <readsensor+0x6fc>)
 80025de:	f002 f929 	bl	8004834 <HAL_GPIO_WritePin>
	GPIO_PinState pin_c8r1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 80025e2:	2104      	movs	r1, #4
 80025e4:	48c4      	ldr	r0, [pc, #784]	@ (80028f8 <readsensor+0x6f0>)
 80025e6:	f002 f90d 	bl	8004804 <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	GPIO_PinState pin_c8r2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 80025f0:	2110      	movs	r1, #16
 80025f2:	48c1      	ldr	r0, [pc, #772]	@ (80028f8 <readsensor+0x6f0>)
 80025f4:	f002 f906 	bl	8004804 <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
	GPIO_PinState pin_c8r3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 80025fe:	2120      	movs	r1, #32
 8002600:	48bd      	ldr	r0, [pc, #756]	@ (80028f8 <readsensor+0x6f0>)
 8002602:	f002 f8ff 	bl	8004804 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
	GPIO_PinState pin_c8r4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 800260c:	2140      	movs	r1, #64	@ 0x40
 800260e:	48ba      	ldr	r0, [pc, #744]	@ (80028f8 <readsensor+0x6f0>)
 8002610:	f002 f8f8 	bl	8004804 <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
	GPIO_PinState pin_c8r5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 800261a:	2108      	movs	r1, #8
 800261c:	48b6      	ldr	r0, [pc, #728]	@ (80028f8 <readsensor+0x6f0>)
 800261e:	f002 f8f1 	bl	8004804 <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
	GPIO_PinState pin_c8r6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8002628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800262c:	48b3      	ldr	r0, [pc, #716]	@ (80028fc <readsensor+0x6f4>)
 800262e:	f002 f8e9 	bl	8004804 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
	GPIO_PinState pin_c8r7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8002638:	2180      	movs	r1, #128	@ 0x80
 800263a:	48b0      	ldr	r0, [pc, #704]	@ (80028fc <readsensor+0x6f4>)
 800263c:	f002 f8e2 	bl	8004804 <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
	GPIO_PinState pin_c8r8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8002646:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800264a:	48ac      	ldr	r0, [pc, #688]	@ (80028fc <readsensor+0x6f4>)
 800264c:	f002 f8da 	bl	8004804 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0,  0);
 8002656:	2200      	movs	r2, #0
 8002658:	2101      	movs	r1, #1
 800265a:	48aa      	ldr	r0, [pc, #680]	@ (8002904 <readsensor+0x6fc>)
 800265c:	f002 f8ea 	bl	8004834 <HAL_GPIO_WritePin>

	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r1, pin_c2r1, pin_c3r1, pin_c4r1, pin_c5r1, pin_c6r1, pin_c7r1, pin_c8r1);
 8002660:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8002664:	461d      	mov	r5, r3
 8002666:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800266a:	461e      	mov	r6, r3
 800266c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002670:	469c      	mov	ip, r3
 8002672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002676:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800267a:	f897 1117 	ldrb.w	r1, [r7, #279]	@ 0x117
 800267e:	f897 010f 	ldrb.w	r0, [r7, #271]	@ 0x10f
 8002682:	f897 4107 	ldrb.w	r4, [r7, #263]	@ 0x107
 8002686:	9404      	str	r4, [sp, #16]
 8002688:	9003      	str	r0, [sp, #12]
 800268a:	9102      	str	r1, [sp, #8]
 800268c:	9201      	str	r2, [sp, #4]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4663      	mov	r3, ip
 8002692:	4632      	mov	r2, r6
 8002694:	4629      	mov	r1, r5
 8002696:	489c      	ldr	r0, [pc, #624]	@ (8002908 <readsensor+0x700>)
 8002698:	f006 ff8a 	bl	80095b0 <iprintf>
	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r2, pin_c2r2, pin_c3r2, pin_c4r2, pin_c5r2, pin_c6r2, pin_c7r2, pin_c8r2);
 800269c:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 80026a0:	461d      	mov	r5, r3
 80026a2:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 80026a6:	461e      	mov	r6, r3
 80026a8:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80026ac:	469c      	mov	ip, r3
 80026ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80026b2:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 80026b6:	f897 1116 	ldrb.w	r1, [r7, #278]	@ 0x116
 80026ba:	f897 010e 	ldrb.w	r0, [r7, #270]	@ 0x10e
 80026be:	f897 4106 	ldrb.w	r4, [r7, #262]	@ 0x106
 80026c2:	9404      	str	r4, [sp, #16]
 80026c4:	9003      	str	r0, [sp, #12]
 80026c6:	9102      	str	r1, [sp, #8]
 80026c8:	9201      	str	r2, [sp, #4]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4663      	mov	r3, ip
 80026ce:	4632      	mov	r2, r6
 80026d0:	4629      	mov	r1, r5
 80026d2:	488d      	ldr	r0, [pc, #564]	@ (8002908 <readsensor+0x700>)
 80026d4:	f006 ff6c 	bl	80095b0 <iprintf>
	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r3, pin_c2r3, pin_c3r3, pin_c4r3, pin_c5r3, pin_c6r3, pin_c7r3, pin_c8r3);
 80026d8:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 80026dc:	461d      	mov	r5, r3
 80026de:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 80026e2:	461e      	mov	r6, r3
 80026e4:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80026e8:	469c      	mov	ip, r3
 80026ea:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 80026ee:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 80026f2:	f897 1115 	ldrb.w	r1, [r7, #277]	@ 0x115
 80026f6:	f897 010d 	ldrb.w	r0, [r7, #269]	@ 0x10d
 80026fa:	f897 4105 	ldrb.w	r4, [r7, #261]	@ 0x105
 80026fe:	9404      	str	r4, [sp, #16]
 8002700:	9003      	str	r0, [sp, #12]
 8002702:	9102      	str	r1, [sp, #8]
 8002704:	9201      	str	r2, [sp, #4]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4663      	mov	r3, ip
 800270a:	4632      	mov	r2, r6
 800270c:	4629      	mov	r1, r5
 800270e:	487e      	ldr	r0, [pc, #504]	@ (8002908 <readsensor+0x700>)
 8002710:	f006 ff4e 	bl	80095b0 <iprintf>
	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r4, pin_c2r4, pin_c3r4, pin_c4r4, pin_c5r4, pin_c6r4, pin_c7r4, pin_c8r4);
 8002714:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 8002718:	461d      	mov	r5, r3
 800271a:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 800271e:	461e      	mov	r6, r3
 8002720:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8002724:	469c      	mov	ip, r3
 8002726:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 800272a:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 800272e:	f897 1114 	ldrb.w	r1, [r7, #276]	@ 0x114
 8002732:	f897 010c 	ldrb.w	r0, [r7, #268]	@ 0x10c
 8002736:	f897 4104 	ldrb.w	r4, [r7, #260]	@ 0x104
 800273a:	9404      	str	r4, [sp, #16]
 800273c:	9003      	str	r0, [sp, #12]
 800273e:	9102      	str	r1, [sp, #8]
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	4663      	mov	r3, ip
 8002746:	4632      	mov	r2, r6
 8002748:	4629      	mov	r1, r5
 800274a:	486f      	ldr	r0, [pc, #444]	@ (8002908 <readsensor+0x700>)
 800274c:	f006 ff30 	bl	80095b0 <iprintf>
	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r5, pin_c2r5, pin_c3r5, pin_c4r5, pin_c5r5, pin_c6r5, pin_c7r5, pin_c8r5);
 8002750:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8002754:	461d      	mov	r5, r3
 8002756:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800275a:	461e      	mov	r6, r3
 800275c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8002760:	469c      	mov	ip, r3
 8002762:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8002766:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 800276a:	f897 1113 	ldrb.w	r1, [r7, #275]	@ 0x113
 800276e:	f897 010b 	ldrb.w	r0, [r7, #267]	@ 0x10b
 8002772:	f897 4103 	ldrb.w	r4, [r7, #259]	@ 0x103
 8002776:	9404      	str	r4, [sp, #16]
 8002778:	9003      	str	r0, [sp, #12]
 800277a:	9102      	str	r1, [sp, #8]
 800277c:	9201      	str	r2, [sp, #4]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	4663      	mov	r3, ip
 8002782:	4632      	mov	r2, r6
 8002784:	4629      	mov	r1, r5
 8002786:	4860      	ldr	r0, [pc, #384]	@ (8002908 <readsensor+0x700>)
 8002788:	f006 ff12 	bl	80095b0 <iprintf>
	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r6, pin_c2r6, pin_c3r6, pin_c4r6, pin_c5r6, pin_c6r6, pin_c7r6, pin_c8r6);
 800278c:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8002790:	461d      	mov	r5, r3
 8002792:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8002796:	461e      	mov	r6, r3
 8002798:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800279c:	469c      	mov	ip, r3
 800279e:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 80027a2:	f897 211a 	ldrb.w	r2, [r7, #282]	@ 0x11a
 80027a6:	f897 1112 	ldrb.w	r1, [r7, #274]	@ 0x112
 80027aa:	f897 010a 	ldrb.w	r0, [r7, #266]	@ 0x10a
 80027ae:	f897 4102 	ldrb.w	r4, [r7, #258]	@ 0x102
 80027b2:	9404      	str	r4, [sp, #16]
 80027b4:	9003      	str	r0, [sp, #12]
 80027b6:	9102      	str	r1, [sp, #8]
 80027b8:	9201      	str	r2, [sp, #4]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	4663      	mov	r3, ip
 80027be:	4632      	mov	r2, r6
 80027c0:	4629      	mov	r1, r5
 80027c2:	4851      	ldr	r0, [pc, #324]	@ (8002908 <readsensor+0x700>)
 80027c4:	f006 fef4 	bl	80095b0 <iprintf>
	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r7, pin_c2r7, pin_c3r7, pin_c4r7, pin_c5r7, pin_c6r7, pin_c7r7, pin_c8r7);
 80027c8:	f897 3139 	ldrb.w	r3, [r7, #313]	@ 0x139
 80027cc:	461d      	mov	r5, r3
 80027ce:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80027d2:	461e      	mov	r6, r3
 80027d4:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 80027d8:	469c      	mov	ip, r3
 80027da:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80027de:	f897 2119 	ldrb.w	r2, [r7, #281]	@ 0x119
 80027e2:	f897 1111 	ldrb.w	r1, [r7, #273]	@ 0x111
 80027e6:	f897 0109 	ldrb.w	r0, [r7, #265]	@ 0x109
 80027ea:	f897 4101 	ldrb.w	r4, [r7, #257]	@ 0x101
 80027ee:	9404      	str	r4, [sp, #16]
 80027f0:	9003      	str	r0, [sp, #12]
 80027f2:	9102      	str	r1, [sp, #8]
 80027f4:	9201      	str	r2, [sp, #4]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4663      	mov	r3, ip
 80027fa:	4632      	mov	r2, r6
 80027fc:	4629      	mov	r1, r5
 80027fe:	4842      	ldr	r0, [pc, #264]	@ (8002908 <readsensor+0x700>)
 8002800:	f006 fed6 	bl	80095b0 <iprintf>
	printf("%d | %d | %d | %d | %d | %d | %d | %d\n\r", pin_c1r8, pin_c2r8, pin_c3r8, pin_c4r8, pin_c5r8, pin_c6r8, pin_c7r8, pin_c8r8);
 8002804:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8002808:	461d      	mov	r5, r3
 800280a:	f897 3130 	ldrb.w	r3, [r7, #304]	@ 0x130
 800280e:	461e      	mov	r6, r3
 8002810:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8002814:	469c      	mov	ip, r3
 8002816:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 800281a:	f897 2118 	ldrb.w	r2, [r7, #280]	@ 0x118
 800281e:	f897 1110 	ldrb.w	r1, [r7, #272]	@ 0x110
 8002822:	f897 0108 	ldrb.w	r0, [r7, #264]	@ 0x108
 8002826:	f897 4100 	ldrb.w	r4, [r7, #256]	@ 0x100
 800282a:	9404      	str	r4, [sp, #16]
 800282c:	9003      	str	r0, [sp, #12]
 800282e:	9102      	str	r1, [sp, #8]
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4663      	mov	r3, ip
 8002836:	4632      	mov	r2, r6
 8002838:	4629      	mov	r1, r5
 800283a:	4833      	ldr	r0, [pc, #204]	@ (8002908 <readsensor+0x700>)
 800283c:	f006 feb8 	bl	80095b0 <iprintf>

	GPIO_PinState* pins[8][8] = {
 8002840:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002844:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002848:	f207 123f 	addw	r2, r7, #319	@ 0x13f
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002852:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002856:	f207 1237 	addw	r2, r7, #311	@ 0x137
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002860:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002864:	f207 122f 	addw	r2, r7, #303	@ 0x12f
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800286e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002872:	f207 1227 	addw	r2, r7, #295	@ 0x127
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800287c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002880:	f207 121f 	addw	r2, r7, #287	@ 0x11f
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800288a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800288e:	f207 1217 	addw	r2, r7, #279	@ 0x117
 8002892:	615a      	str	r2, [r3, #20]
 8002894:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002898:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800289c:	f207 120f 	addw	r2, r7, #271	@ 0x10f
 80028a0:	619a      	str	r2, [r3, #24]
 80028a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028a6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028aa:	f207 1207 	addw	r2, r7, #263	@ 0x107
 80028ae:	61da      	str	r2, [r3, #28]
 80028b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028b8:	f507 729f 	add.w	r2, r7, #318	@ 0x13e
 80028bc:	621a      	str	r2, [r3, #32]
 80028be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028c2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028c6:	f507 729b 	add.w	r2, r7, #310	@ 0x136
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80028cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028d4:	f507 7297 	add.w	r2, r7, #302	@ 0x12e
 80028d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80028da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028de:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028e2:	f507 7293 	add.w	r2, r7, #294	@ 0x126
 80028e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028f0:	f507 728f 	add.w	r2, r7, #286	@ 0x11e
 80028f4:	e00a      	b.n	800290c <readsensor+0x704>
 80028f6:	bf00      	nop
 80028f8:	48001000 	.word	0x48001000
 80028fc:	48001400 	.word	0x48001400
 8002900:	48000c00 	.word	0x48000c00
 8002904:	48001800 	.word	0x48001800
 8002908:	0800b5ac 	.word	0x0800b5ac
 800290c:	631a      	str	r2, [r3, #48]	@ 0x30
 800290e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002912:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002916:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 800291a:	635a      	str	r2, [r3, #52]	@ 0x34
 800291c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002920:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002924:	f507 7287 	add.w	r2, r7, #270	@ 0x10e
 8002928:	639a      	str	r2, [r3, #56]	@ 0x38
 800292a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800292e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002932:	f507 7283 	add.w	r2, r7, #262	@ 0x106
 8002936:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002938:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800293c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002940:	f207 123d 	addw	r2, r7, #317	@ 0x13d
 8002944:	641a      	str	r2, [r3, #64]	@ 0x40
 8002946:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800294a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800294e:	f207 1235 	addw	r2, r7, #309	@ 0x135
 8002952:	645a      	str	r2, [r3, #68]	@ 0x44
 8002954:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002958:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800295c:	f207 122d 	addw	r2, r7, #301	@ 0x12d
 8002960:	649a      	str	r2, [r3, #72]	@ 0x48
 8002962:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002966:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800296a:	f207 1225 	addw	r2, r7, #293	@ 0x125
 800296e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002970:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002974:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002978:	f207 121d 	addw	r2, r7, #285	@ 0x11d
 800297c:	651a      	str	r2, [r3, #80]	@ 0x50
 800297e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002982:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002986:	f207 1215 	addw	r2, r7, #277	@ 0x115
 800298a:	655a      	str	r2, [r3, #84]	@ 0x54
 800298c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002990:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002994:	f207 120d 	addw	r2, r7, #269	@ 0x10d
 8002998:	659a      	str	r2, [r3, #88]	@ 0x58
 800299a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800299e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029a2:	f207 1205 	addw	r2, r7, #261	@ 0x105
 80029a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029b0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80029b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80029b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029ba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029be:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 80029c2:	665a      	str	r2, [r3, #100]	@ 0x64
 80029c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029cc:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 80029d0:	669a      	str	r2, [r3, #104]	@ 0x68
 80029d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029d6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029da:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 80029de:	66da      	str	r2, [r3, #108]	@ 0x6c
 80029e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029e8:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80029ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80029ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029f2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029f6:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80029fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80029fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a04:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002a08:	679a      	str	r2, [r3, #120]	@ 0x78
 8002a0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a0e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a12:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8002a16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a1c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a20:	f207 123b 	addw	r2, r7, #315	@ 0x13b
 8002a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a30:	f207 1233 	addw	r2, r7, #307	@ 0x133
 8002a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002a38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a40:	f207 122b 	addw	r2, r7, #299	@ 0x12b
 8002a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002a48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a50:	f207 1223 	addw	r2, r7, #291	@ 0x123
 8002a54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002a58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a5c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a60:	f207 121b 	addw	r2, r7, #283	@ 0x11b
 8002a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002a68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a70:	f207 1213 	addw	r2, r7, #275	@ 0x113
 8002a74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002a78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a80:	f207 120b 	addw	r2, r7, #267	@ 0x10b
 8002a84:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002a88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a90:	f207 1203 	addw	r2, r7, #259	@ 0x103
 8002a94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002a98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002aa0:	f507 729d 	add.w	r2, r7, #314	@ 0x13a
 8002aa4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8002aa8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002aac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ab0:	f507 7299 	add.w	r2, r7, #306	@ 0x132
 8002ab4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8002ab8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002abc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ac0:	f507 7295 	add.w	r2, r7, #298	@ 0x12a
 8002ac4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8002ac8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002acc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ad0:	f507 7291 	add.w	r2, r7, #290	@ 0x122
 8002ad4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8002ad8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002adc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ae0:	f507 728d 	add.w	r2, r7, #282	@ 0x11a
 8002ae4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002ae8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002aec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002af0:	f507 7289 	add.w	r2, r7, #274	@ 0x112
 8002af4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8002af8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002afc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b00:	f507 7285 	add.w	r2, r7, #266	@ 0x10a
 8002b04:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8002b08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b10:	f507 7281 	add.w	r2, r7, #258	@ 0x102
 8002b14:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8002b18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b1c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b20:	f207 1239 	addw	r2, r7, #313	@ 0x139
 8002b24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8002b28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b30:	f207 1231 	addw	r2, r7, #305	@ 0x131
 8002b34:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8002b38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b40:	f207 1229 	addw	r2, r7, #297	@ 0x129
 8002b44:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8002b48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b50:	f207 1221 	addw	r2, r7, #289	@ 0x121
 8002b54:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8002b58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b5c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b60:	f207 1219 	addw	r2, r7, #281	@ 0x119
 8002b64:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002b68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b70:	f207 1211 	addw	r2, r7, #273	@ 0x111
 8002b74:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b80:	f207 1209 	addw	r2, r7, #265	@ 0x109
 8002b84:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8002b88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b90:	f207 1201 	addw	r2, r7, #257	@ 0x101
 8002b94:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8002b98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ba0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002ba4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ba8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002bb4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8002bb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bbc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bc0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002bc4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002bc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bcc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bd0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002bd4:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002bd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002be0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002be4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002be8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bf0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002bf4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002bf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bfc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c00:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8002c04:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8002c08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002c0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c10:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8002c14:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	    {&pin_c1r7, &pin_c2r7, &pin_c3r7, &pin_c4r7, &pin_c5r7, &pin_c6r7, &pin_c7r7, &pin_c8r7},
	    {&pin_c1r8, &pin_c2r8, &pin_c3r8, &pin_c4r8, &pin_c5r8, &pin_c6r8, &pin_c7r8, &pin_c8r8}
	};

	// Update tempstate with values from pin variables
	for (int row = 0; row < 8; row++) {
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002c1e:	e028      	b.n	8002c72 <readsensor+0xa6a>
	    for (int col = 0; col < 8; col++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002c26:	e01b      	b.n	8002c60 <readsensor+0xa58>
	        tempstate[row][col] = *pins[row][col];
 8002c28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002c2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c30:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002c34:	00d1      	lsls	r1, r2, #3
 8002c36:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002c3a:	440a      	add	r2, r1
 8002c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	4910      	ldr	r1, [pc, #64]	@ (8002c88 <readsensor+0xa80>)
 8002c46:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002c4a:	00da      	lsls	r2, r3, #3
 8002c4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002c50:	4413      	add	r3, r2
 8002c52:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	    for (int col = 0; col < 8; col++) {
 8002c56:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002c60:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002c64:	2b07      	cmp	r3, #7
 8002c66:	dddf      	ble.n	8002c28 <readsensor+0xa20>
	for (int row = 0; row < 8; row++) {
 8002c68:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002c72:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002c76:	2b07      	cmp	r3, #7
 8002c78:	ddd2      	ble.n	8002c20 <readsensor+0xa18>
	    }
	}

}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000108 	.word	0x20000108

08002c8c <playerlcd>:
    	while (1);
        return;
    }
}

void playerlcd() {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af04      	add	r7, sp, #16
	ILI9341_WriteString(2, 2, "CHESSBOT TURN", Font_16x26, ILI9341_WHITE, ILI9341_WHITE);
 8002c92:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <playerlcd+0x70>)
 8002c94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c98:	9202      	str	r2, [sp, #8]
 8002c9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c9e:	9201      	str	r2, [sp, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	9200      	str	r2, [sp, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	@ (8002d00 <playerlcd+0x74>)
 8002ca8:	2102      	movs	r1, #2
 8002caa:	2002      	movs	r0, #2
 8002cac:	f7fe fb64 	bl	8001378 <ILI9341_WriteString>
	ILI9341_WriteString(2, 2, "TAKING PIECE", Font_16x26, ILI9341_WHITE, ILI9341_WHITE);
 8002cb0:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <playerlcd+0x70>)
 8002cb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cb6:	9202      	str	r2, [sp, #8]
 8002cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cbc:	9201      	str	r2, [sp, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	9200      	str	r2, [sp, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002d04 <playerlcd+0x78>)
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f7fe fb55 	bl	8001378 <ILI9341_WriteString>
    ILI9341_WriteString(2, 2, "PLAYER TURN", Font_16x26, ILI9341_GREEN, ILI9341_WHITE);
 8002cce:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <playerlcd+0x70>)
 8002cd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cd4:	9202      	str	r2, [sp, #8]
 8002cd6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002cda:	9201      	str	r2, [sp, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	9200      	str	r2, [sp, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a09      	ldr	r2, [pc, #36]	@ (8002d08 <playerlcd+0x7c>)
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	f7fe fb46 	bl	8001378 <ILI9341_WriteString>
    HAL_Delay(500);
 8002cec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cf0:	f001 fac0 	bl	8004274 <HAL_Delay>
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	0800b6c4 	.word	0x0800b6c4
 8002d04:	0800b6d4 	.word	0x0800b6d4
 8002d08:	0800b6e4 	.word	0x0800b6e4

08002d0c <botlcd>:

void botlcd() {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af04      	add	r7, sp, #16
	ILI9341_WriteString(2, 2, "PLAYER TURN", Font_16x26, ILI9341_WHITE, ILI9341_WHITE);
 8002d12:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <botlcd+0x6c>)
 8002d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d18:	9202      	str	r2, [sp, #8]
 8002d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	9200      	str	r2, [sp, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a15      	ldr	r2, [pc, #84]	@ (8002d7c <botlcd+0x70>)
 8002d28:	2102      	movs	r1, #2
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f7fe fb24 	bl	8001378 <ILI9341_WriteString>
	ILI9341_WriteString(2, 2, "TAKING PIECE", Font_16x26, ILI9341_WHITE, ILI9341_WHITE);
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <botlcd+0x6c>)
 8002d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d36:	9202      	str	r2, [sp, #8]
 8002d38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d3c:	9201      	str	r2, [sp, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	9200      	str	r2, [sp, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	@ (8002d80 <botlcd+0x74>)
 8002d46:	2102      	movs	r1, #2
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f7fe fb15 	bl	8001378 <ILI9341_WriteString>
	ILI9341_WriteString(2, 2, "CHESSBOT TURN", Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <botlcd+0x6c>)
 8002d50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d54:	9202      	str	r2, [sp, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	9201      	str	r2, [sp, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	9200      	str	r2, [sp, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a08      	ldr	r2, [pc, #32]	@ (8002d84 <botlcd+0x78>)
 8002d62:	2102      	movs	r1, #2
 8002d64:	2002      	movs	r0, #2
 8002d66:	f7fe fb07 	bl	8001378 <ILI9341_WriteString>
	HAL_Delay(500);
 8002d6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d6e:	f001 fa81 	bl	8004274 <HAL_Delay>
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	0800b6e4 	.word	0x0800b6e4
 8002d80:	0800b6d4 	.word	0x0800b6d4
 8002d84:	0800b6c4 	.word	0x0800b6c4

08002d88 <takinglcd>:
void takinglcd() {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af04      	add	r7, sp, #16
	ILI9341_WriteString(2, 2, "PLAYER TURN", Font_16x26, ILI9341_WHITE, ILI9341_WHITE);
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <takinglcd+0x70>)
 8002d90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d94:	9202      	str	r2, [sp, #8]
 8002d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d9a:	9201      	str	r2, [sp, #4]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	9200      	str	r2, [sp, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a16      	ldr	r2, [pc, #88]	@ (8002dfc <takinglcd+0x74>)
 8002da4:	2102      	movs	r1, #2
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fe fae6 	bl	8001378 <ILI9341_WriteString>
	ILI9341_WriteString(2, 2, "CHESSBOT TURN", Font_16x26, ILI9341_WHITE, ILI9341_WHITE);
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <takinglcd+0x70>)
 8002dae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002db2:	9202      	str	r2, [sp, #8]
 8002db4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002db8:	9201      	str	r2, [sp, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	9200      	str	r2, [sp, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e00 <takinglcd+0x78>)
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f7fe fad7 	bl	8001378 <ILI9341_WriteString>
	ILI9341_WriteString(2, 2, "TAKING PIECE", Font_16x26, ILI9341_RED, ILI9341_WHITE);
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <takinglcd+0x70>)
 8002dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dd0:	9202      	str	r2, [sp, #8]
 8002dd2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002dd6:	9201      	str	r2, [sp, #4]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	9200      	str	r2, [sp, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <takinglcd+0x7c>)
 8002de0:	2102      	movs	r1, #2
 8002de2:	2002      	movs	r0, #2
 8002de4:	f7fe fac8 	bl	8001378 <ILI9341_WriteString>
	HAL_Delay(500);
 8002de8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dec:	f001 fa42 	bl	8004274 <HAL_Delay>
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	0800b6e4 	.word	0x0800b6e4
 8002e00:	0800b6c4 	.word	0x0800b6c4
 8002e04:	0800b6d4 	.word	0x0800b6d4

08002e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	@ 0x40
 8002e0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e0e:	f001 f9bc 	bl	800418a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e12:	f000 f9ad 	bl	8003170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e16:	f000 fb91 	bl	800353c <MX_GPIO_Init>
  MX_TIM4_Init();
 8002e1a:	f000 fb11 	bl	8003440 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002e1e:	f000 fad1 	bl	80033c4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002e22:	f000 fa83 	bl	800332c <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 8002e26:	f000 f9e9 	bl	80031fc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002e2a:	f000 fa33 	bl	8003294 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002e2e:	2104      	movs	r1, #4
 8002e30:	489e      	ldr	r0, [pc, #632]	@ (80030ac <main+0x2a4>)
 8002e32:	f003 fe29 	bl	8006a88 <HAL_TIM_OC_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002e36:	2201      	movs	r2, #1
 8002e38:	2102      	movs	r1, #2
 8002e3a:	489d      	ldr	r0, [pc, #628]	@ (80030b0 <main+0x2a8>)
 8002e3c:	f001 fcfa 	bl	8004834 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8002e40:	2201      	movs	r2, #1
 8002e42:	2110      	movs	r1, #16
 8002e44:	489a      	ldr	r0, [pc, #616]	@ (80030b0 <main+0x2a8>)
 8002e46:	f001 fcf5 	bl	8004834 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	4898      	ldr	r0, [pc, #608]	@ (80030b0 <main+0x2a8>)
 8002e50:	f001 fcf0 	bl	8004834 <HAL_GPIO_WritePin>
  init(); // LCD
 8002e54:	f7ff f8c0 	bl	8001fd8 <init>
//  ILI9341_FillScreen(ILI9341_WHITE);
  //SET INITIAL STATE TO BOARD STATE
 play_audio();
 8002e58:	f7ff f8a8 	bl	8001fac <play_audio>
  printf("\r\n");
 8002e5c:	4895      	ldr	r0, [pc, #596]	@ (80030b4 <main+0x2ac>)
 8002e5e:	f006 fc0f 	bl	8009680 <puts>
  readsensor();
 8002e62:	f7ff f9d1 	bl	8002208 <readsensor>
  printf("\r\n");
 8002e66:	4893      	ldr	r0, [pc, #588]	@ (80030b4 <main+0x2ac>)
 8002e68:	f006 fc0a 	bl	8009680 <puts>
  for (int row = 0; row < 8; row++) {
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e70:	e019      	b.n	8002ea6 <main+0x9e>
	  for (int col = 0; col < 8; col++) {
 8002e72:	2300      	movs	r3, #0
 8002e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e76:	e010      	b.n	8002e9a <main+0x92>
		  currstate[row][col] = tempstate[row][col];
 8002e78:	498f      	ldr	r1, [pc, #572]	@ (80030b8 <main+0x2b0>)
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7c:	00da      	lsls	r2, r3, #3
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	4413      	add	r3, r2
 8002e82:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8002e86:	488d      	ldr	r0, [pc, #564]	@ (80030bc <main+0x2b4>)
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	00d9      	lsls	r1, r3, #3
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	440b      	add	r3, r1
 8002e90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	  for (int col = 0; col < 8; col++) {
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	3301      	adds	r3, #1
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	ddeb      	ble.n	8002e78 <main+0x70>
  for (int row = 0; row < 8; row++) {
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea8:	2b07      	cmp	r3, #7
 8002eaa:	dde2      	ble.n	8002e72 <main+0x6a>
	  }
  }
  //SET INITIAL STATE TO BOARD STATE
	playerlcd();
 8002eac:	f7ff feee 	bl	8002c8c <playerlcd>
	Down();
 8002eb0:	f7fe fad4 	bl	800145c <Down>
	homing();
 8002eb4:	f7ff f8da 	bl	800206c <homing>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // only poll after button is pressed if (poll) then poll else skip
	  if (poll == 1) {
 8002eb8:	4b81      	ldr	r3, [pc, #516]	@ (80030c0 <main+0x2b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d1fb      	bne.n	8002eb8 <main+0xb0>
	  	  int start[2] = {0,0};
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
	  	  int end[2] = {0,0};
 8002ec8:	2300      	movs	r3, #0
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
		  readsensor(); // updates tempstate to the board state
 8002ed0:	f7ff f99a 	bl	8002208 <readsensor>
		  for (int row = 0; row < 8; row++) { // compare tempstate and currstate to find the move
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ed8:	e03c      	b.n	8002f54 <main+0x14c>
			  for (int col = 0; col < 8; col++) {
 8002eda:	2300      	movs	r3, #0
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ede:	e033      	b.n	8002f48 <main+0x140>
				  // Check for the start condition
				  if (currstate[row][col] == 1 && tempstate[row][col] == 0) {
 8002ee0:	4976      	ldr	r1, [pc, #472]	@ (80030bc <main+0x2b4>)
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	00da      	lsls	r2, r3, #3
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	4413      	add	r3, r2
 8002eea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10f      	bne.n	8002f12 <main+0x10a>
 8002ef2:	4971      	ldr	r1, [pc, #452]	@ (80030b8 <main+0x2b0>)
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	00da      	lsls	r2, r3, #3
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	4413      	add	r3, r2
 8002efc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <main+0x10a>
					  start[0] = col+1;
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	3301      	adds	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
					  start[1] = row+1;
 8002f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e017      	b.n	8002f42 <main+0x13a>
				  }
				  // Check for the end condition
				  else if (currstate[row][col] == 0 && tempstate[row][col] == 1) {
 8002f12:	496a      	ldr	r1, [pc, #424]	@ (80030bc <main+0x2b4>)
 8002f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <main+0x13a>
 8002f24:	4964      	ldr	r1, [pc, #400]	@ (80030b8 <main+0x2b0>)
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f28:	00da      	lsls	r2, r3, #3
 8002f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <main+0x13a>
					  end[0] = col+1;
 8002f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f38:	3301      	adds	r3, #1
 8002f3a:	607b      	str	r3, [r7, #4]
					  end[1] = row+1;
 8002f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
			  for (int col = 0; col < 8; col++) {
 8002f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f44:	3301      	adds	r3, #1
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	ddc8      	ble.n	8002ee0 <main+0xd8>
		  for (int row = 0; row < 8; row++) { // compare tempstate and currstate to find the move
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	3301      	adds	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	ddbf      	ble.n	8002eda <main+0xd2>
				  }
			  }
		  }
		  if (end[0] == 0) {
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d143      	bne.n	8002fe8 <main+0x1e0>
			  HAL_Delay(200);
 8002f60:	20c8      	movs	r0, #200	@ 0xc8
 8002f62:	f001 f987 	bl	8004274 <HAL_Delay>
			  poll = 0;
 8002f66:	4b56      	ldr	r3, [pc, #344]	@ (80030c0 <main+0x2b8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
			  int x = 1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
			  end[0] = start[0];
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	607b      	str	r3, [r7, #4]
			  end[1] = start[1];
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	60bb      	str	r3, [r7, #8]
			  takinglcd();
 8002f78:	f7ff ff06 	bl	8002d88 <takinglcd>
			  while (x == 1) {
 8002f7c:	e031      	b.n	8002fe2 <main+0x1da>
				  if (poll == 1) {
 8002f7e:	4b50      	ldr	r3, [pc, #320]	@ (80030c0 <main+0x2b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d12d      	bne.n	8002fe2 <main+0x1da>
					  readsensor();
 8002f86:	f7ff f93f 	bl	8002208 <readsensor>
					  for (int row = 0; row < 8; row++) { // compare tempstate and currstate to find the move
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	e023      	b.n	8002fd8 <main+0x1d0>
						  for (int col = 0; col < 8; col++) {
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	e01a      	b.n	8002fcc <main+0x1c4>
							  // Check for the start condition
							  if (currstate[row][col] == 1 && tempstate[row][col] == 0) {
 8002f96:	4949      	ldr	r1, [pc, #292]	@ (80030bc <main+0x2b4>)
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	00da      	lsls	r2, r3, #3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10e      	bne.n	8002fc6 <main+0x1be>
 8002fa8:	4943      	ldr	r1, [pc, #268]	@ (80030b8 <main+0x2b0>)
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	00da      	lsls	r2, r3, #3
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <main+0x1be>
								  start[0] = col+1;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
								  start[1] = row+1;
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	613b      	str	r3, [r7, #16]
						  for (int col = 0; col < 8; col++) {
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b07      	cmp	r3, #7
 8002fd0:	dde1      	ble.n	8002f96 <main+0x18e>
					  for (int row = 0; row < 8; row++) { // compare tempstate and currstate to find the move
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	ddd8      	ble.n	8002f90 <main+0x188>
							  }
						  }
					  }
					  x = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
			  while (x == 1) {
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d0ca      	beq.n	8002f7e <main+0x176>
				  }
			  }
		  }
		  botlcd();
 8002fe8:	f7ff fe90 	bl	8002d0c <botlcd>
		  txbuff[0] = start[0];
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <main+0x2bc>)
 8002ff2:	701a      	strb	r2, [r3, #0]
		  txbuff[1] = start[1];
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b32      	ldr	r3, [pc, #200]	@ (80030c4 <main+0x2bc>)
 8002ffa:	705a      	strb	r2, [r3, #1]
		  txbuff[2] = end[0];
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <main+0x2bc>)
 8003002:	709a      	strb	r2, [r3, #2]
		  txbuff[3] = end[1];
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b2e      	ldr	r3, [pc, #184]	@ (80030c4 <main+0x2bc>)
 800300a:	70da      	strb	r2, [r3, #3]
		  if (txbuff[0] != 0) {
 800300c:	4b2d      	ldr	r3, [pc, #180]	@ (80030c4 <main+0x2bc>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d031      	beq.n	8003078 <main+0x270>
			  HAL_UART_Transmit(&huart2, txbuff, 5, 2000); // Send the move to the python code and return the next move
 8003014:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003018:	2205      	movs	r2, #5
 800301a:	492a      	ldr	r1, [pc, #168]	@ (80030c4 <main+0x2bc>)
 800301c:	482a      	ldr	r0, [pc, #168]	@ (80030c8 <main+0x2c0>)
 800301e:	f004 fe37 	bl	8007c90 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, rxbuff, 5, HAL_MAX_DELAY);
 8003022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003026:	2205      	movs	r2, #5
 8003028:	4928      	ldr	r1, [pc, #160]	@ (80030cc <main+0x2c4>)
 800302a:	4827      	ldr	r0, [pc, #156]	@ (80030c8 <main+0x2c0>)
 800302c:	f004 febe 	bl	8007dac <HAL_UART_Receive>
			  printf("%d, %d, %d, %d \r\n", rxbuff[0], rxbuff[1], rxbuff[2], rxbuff[3]);
 8003030:	4b26      	ldr	r3, [pc, #152]	@ (80030cc <main+0x2c4>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4619      	mov	r1, r3
 8003036:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <main+0x2c4>)
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	461a      	mov	r2, r3
 800303c:	4b23      	ldr	r3, [pc, #140]	@ (80030cc <main+0x2c4>)
 800303e:	789b      	ldrb	r3, [r3, #2]
 8003040:	4618      	mov	r0, r3
 8003042:	4b22      	ldr	r3, [pc, #136]	@ (80030cc <main+0x2c4>)
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	4603      	mov	r3, r0
 800304a:	4821      	ldr	r0, [pc, #132]	@ (80030d0 <main+0x2c8>)
 800304c:	f006 fab0 	bl	80095b0 <iprintf>
			  snextmove[0] = rxbuff[0] - 48; // Convert ASCII to integer
 8003050:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <main+0x2c4>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3b30      	subs	r3, #48	@ 0x30
 8003056:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <main+0x2cc>)
 8003058:	6013      	str	r3, [r2, #0]
			  snextmove[1] = rxbuff[1] - 48;
 800305a:	4b1c      	ldr	r3, [pc, #112]	@ (80030cc <main+0x2c4>)
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	3b30      	subs	r3, #48	@ 0x30
 8003060:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <main+0x2cc>)
 8003062:	6053      	str	r3, [r2, #4]
			  enextmove[0] = rxbuff[2] - 48;
 8003064:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <main+0x2c4>)
 8003066:	789b      	ldrb	r3, [r3, #2]
 8003068:	3b30      	subs	r3, #48	@ 0x30
 800306a:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <main+0x2d0>)
 800306c:	6013      	str	r3, [r2, #0]
			  enextmove[1] = rxbuff[3] - 48;
 800306e:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <main+0x2c4>)
 8003070:	78db      	ldrb	r3, [r3, #3]
 8003072:	3b30      	subs	r3, #48	@ 0x30
 8003074:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <main+0x2d0>)
 8003076:	6053      	str	r3, [r2, #4]
		  }
		  Down();
 8003078:	f7fe f9f0 	bl	800145c <Down>
		  forcemove(currpos, snextmove); // Perform a non-piece move
 800307c:	4915      	ldr	r1, [pc, #84]	@ (80030d4 <main+0x2cc>)
 800307e:	4817      	ldr	r0, [pc, #92]	@ (80030dc <main+0x2d4>)
 8003080:	f7fe fa66 	bl	8001550 <forcemove>
		  currpos[0] = snextmove[0];
 8003084:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <main+0x2cc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <main+0x2d4>)
 800308a:	6013      	str	r3, [r2, #0]
		  currpos[1] = snextmove[1];
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <main+0x2cc>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <main+0x2d4>)
 8003092:	6053      	str	r3, [r2, #4]
		  movefrom(snextmove, enextmove); // Move a piece based on its type
 8003094:	4910      	ldr	r1, [pc, #64]	@ (80030d8 <main+0x2d0>)
 8003096:	480f      	ldr	r0, [pc, #60]	@ (80030d4 <main+0x2cc>)
 8003098:	f7ff f83c 	bl	8002114 <movefrom>

		  // update currstate to tempstate, current position to end of last move and reset poll
		  readsensor(); //update tempstate to the board state
 800309c:	f7ff f8b4 	bl	8002208 <readsensor>
		  for (int row = 0; row < 8; row++) {
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	e033      	b.n	800310e <main+0x306>
			  for (int col = 0; col < 8; col++) {
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e02a      	b.n	8003102 <main+0x2fa>
 80030ac:	20000628 	.word	0x20000628
 80030b0:	48000800 	.word	0x48000800
 80030b4:	0800b6f0 	.word	0x0800b6f0
 80030b8:	20000108 	.word	0x20000108
 80030bc:	20000008 	.word	0x20000008
 80030c0:	20000674 	.word	0x20000674
 80030c4:	20000698 	.word	0x20000698
 80030c8:	20000530 	.word	0x20000530
 80030cc:	20000210 	.word	0x20000210
 80030d0:	0800b6f4 	.word	0x0800b6f4
 80030d4:	20000688 	.word	0x20000688
 80030d8:	20000690 	.word	0x20000690
 80030dc:	20000208 	.word	0x20000208
				  currstate[row][col] = tempstate[row][col];
 80030e0:	491c      	ldr	r1, [pc, #112]	@ (8003154 <main+0x34c>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	00da      	lsls	r2, r3, #3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	4413      	add	r3, r2
 80030ea:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80030ee:	481a      	ldr	r0, [pc, #104]	@ (8003158 <main+0x350>)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	00d9      	lsls	r1, r3, #3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	440b      	add	r3, r1
 80030f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			  for (int col = 0; col < 8; col++) {
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3301      	adds	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b07      	cmp	r3, #7
 8003106:	ddeb      	ble.n	80030e0 <main+0x2d8>
		  for (int row = 0; row < 8; row++) {
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	3301      	adds	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b07      	cmp	r3, #7
 8003112:	ddc8      	ble.n	80030a6 <main+0x29e>
		  }
//		  currstate[snextmove[1]][snextmove[0]] = 0;
//		  currstate[enextmove[1]][enextmove[0]] = 1;

		  // Update the current position and reset poll
		  memset(rxbuff, 0, sizeof(rxbuff));  // Clear the UART Data Register
 8003114:	2205      	movs	r2, #5
 8003116:	2100      	movs	r1, #0
 8003118:	4810      	ldr	r0, [pc, #64]	@ (800315c <main+0x354>)
 800311a:	f006 fab9 	bl	8009690 <memset>
		  currpos[0] = enextmove[0];
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <main+0x358>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a10      	ldr	r2, [pc, #64]	@ (8003164 <main+0x35c>)
 8003124:	6013      	str	r3, [r2, #0]
		  currpos[1] = enextmove[1];
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <main+0x358>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a0e      	ldr	r2, [pc, #56]	@ (8003164 <main+0x35c>)
 800312c:	6053      	str	r3, [r2, #4]

		  txbuff[0] = 0;
 800312e:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <main+0x360>)
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
		  txbuff[1] = 0;
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <main+0x360>)
 8003136:	2200      	movs	r2, #0
 8003138:	705a      	strb	r2, [r3, #1]
		  txbuff[2] = 0;
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <main+0x360>)
 800313c:	2200      	movs	r2, #0
 800313e:	709a      	strb	r2, [r3, #2]
		  txbuff[3] = 0;
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <main+0x360>)
 8003142:	2200      	movs	r2, #0
 8003144:	70da      	strb	r2, [r3, #3]

		  poll = 0;
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <main+0x364>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
		  playerlcd();
 800314c:	f7ff fd9e 	bl	8002c8c <playerlcd>
	  if (poll == 1) {
 8003150:	e6b2      	b.n	8002eb8 <main+0xb0>
 8003152:	bf00      	nop
 8003154:	20000108 	.word	0x20000108
 8003158:	20000008 	.word	0x20000008
 800315c:	20000210 	.word	0x20000210
 8003160:	20000690 	.word	0x20000690
 8003164:	20000208 	.word	0x20000208
 8003168:	20000698 	.word	0x20000698
 800316c:	20000674 	.word	0x20000674

08003170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b096      	sub	sp, #88	@ 0x58
 8003174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	2244      	movs	r2, #68	@ 0x44
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f006 fa86 	bl	8009690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003184:	463b      	mov	r3, r7
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003192:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003196:	f001 fb9d 	bl	80048d4 <HAL_PWREx_ControlVoltageScaling>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80031a0:	f000 fc3a 	bl	8003a18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80031a4:	2310      	movs	r3, #16
 80031a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80031a8:	2301      	movs	r3, #1
 80031aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80031b0:	2360      	movs	r3, #96	@ 0x60
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 fc3d 	bl	8004a3c <HAL_RCC_OscConfig>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80031c8:	f000 fc26 	bl	8003a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031cc:	230f      	movs	r3, #15
 80031ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80031d0:	2300      	movs	r3, #0
 80031d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031e0:	463b      	mov	r3, r7
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 f843 	bl	8005270 <HAL_RCC_ClockConfig>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80031f0:	f000 fc12 	bl	8003a18 <Error_Handler>
  }
}
 80031f4:	bf00      	nop
 80031f6:	3758      	adds	r7, #88	@ 0x58
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003200:	4b22      	ldr	r3, [pc, #136]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003202:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <MX_LPUART1_UART_Init+0x94>)
 8003204:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003206:	4b21      	ldr	r3, [pc, #132]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800320c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800320e:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003214:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800321a:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003220:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003222:	220c      	movs	r2, #12
 8003224:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003226:	4b19      	ldr	r3, [pc, #100]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800322c:	4b17      	ldr	r3, [pc, #92]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 800322e:	2200      	movs	r2, #0
 8003230:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003232:	4b16      	ldr	r3, [pc, #88]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 800323a:	2200      	movs	r2, #0
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003240:	2200      	movs	r2, #0
 8003242:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003244:	4811      	ldr	r0, [pc, #68]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003246:	f004 fcd3 	bl	8007bf0 <HAL_UART_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8003250:	f000 fbe2 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003254:	2100      	movs	r1, #0
 8003256:	480d      	ldr	r0, [pc, #52]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 8003258:	f005 fbc6 	bl	80089e8 <HAL_UARTEx_SetTxFifoThreshold>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003262:	f000 fbd9 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003266:	2100      	movs	r1, #0
 8003268:	4808      	ldr	r0, [pc, #32]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 800326a:	f005 fbfb 	bl	8008a64 <HAL_UARTEx_SetRxFifoThreshold>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003274:	f000 fbd0 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003278:	4804      	ldr	r0, [pc, #16]	@ (800328c <MX_LPUART1_UART_Init+0x90>)
 800327a:	f005 fb7c 	bl	8008976 <HAL_UARTEx_DisableFifoMode>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003284:	f000 fbc8 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000408 	.word	0x20000408
 8003290:	40008000 	.word	0x40008000

08003294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003298:	4b22      	ldr	r3, [pc, #136]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 800329a:	4a23      	ldr	r2, [pc, #140]	@ (8003328 <MX_USART1_UART_Init+0x94>)
 800329c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800329e:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032ba:	220c      	movs	r2, #12
 80032bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032be:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c4:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ca:	4b16      	ldr	r3, [pc, #88]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032d0:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032d8:	2200      	movs	r2, #0
 80032da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032dc:	4811      	ldr	r0, [pc, #68]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032de:	f004 fc87 	bl	8007bf0 <HAL_UART_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80032e8:	f000 fb96 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ec:	2100      	movs	r1, #0
 80032ee:	480d      	ldr	r0, [pc, #52]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 80032f0:	f005 fb7a 	bl	80089e8 <HAL_UARTEx_SetTxFifoThreshold>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80032fa:	f000 fb8d 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032fe:	2100      	movs	r1, #0
 8003300:	4808      	ldr	r0, [pc, #32]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 8003302:	f005 fbaf 	bl	8008a64 <HAL_UARTEx_SetRxFifoThreshold>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800330c:	f000 fb84 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003310:	4804      	ldr	r0, [pc, #16]	@ (8003324 <MX_USART1_UART_Init+0x90>)
 8003312:	f005 fb30 	bl	8008976 <HAL_UARTEx_DisableFifoMode>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800331c:	f000 fb7c 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}
 8003324:	2000049c 	.word	0x2000049c
 8003328:	40013800 	.word	0x40013800

0800332c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003330:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003332:	4a23      	ldr	r2, [pc, #140]	@ (80033c0 <MX_USART2_UART_Init+0x94>)
 8003334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003336:	4b21      	ldr	r3, [pc, #132]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800333c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	4b1f      	ldr	r3, [pc, #124]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003344:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800334a:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003350:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003352:	220c      	movs	r2, #12
 8003354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800335c:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003362:	4b16      	ldr	r3, [pc, #88]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003368:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800336e:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003374:	4811      	ldr	r0, [pc, #68]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003376:	f004 fc3b 	bl	8007bf0 <HAL_UART_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003380:	f000 fb4a 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003384:	2100      	movs	r1, #0
 8003386:	480d      	ldr	r0, [pc, #52]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 8003388:	f005 fb2e 	bl	80089e8 <HAL_UARTEx_SetTxFifoThreshold>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003392:	f000 fb41 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003396:	2100      	movs	r1, #0
 8003398:	4808      	ldr	r0, [pc, #32]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 800339a:	f005 fb63 	bl	8008a64 <HAL_UARTEx_SetRxFifoThreshold>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80033a4:	f000 fb38 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033a8:	4804      	ldr	r0, [pc, #16]	@ (80033bc <MX_USART2_UART_Init+0x90>)
 80033aa:	f005 fae4 	bl	8008976 <HAL_UARTEx_DisableFifoMode>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80033b4:	f000 fb30 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000530 	.word	0x20000530
 80033c0:	40004400 	.word	0x40004400

080033c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033ca:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <MX_SPI1_Init+0x78>)
 80033cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033d6:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033dc:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80033e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e4:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033ea:	4b13      	ldr	r3, [pc, #76]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <MX_SPI1_Init+0x74>)
 80033fa:	2210      	movs	r2, #16
 80033fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <MX_SPI1_Init+0x74>)
 8003400:	2200      	movs	r2, #0
 8003402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <MX_SPI1_Init+0x74>)
 8003406:	2200      	movs	r2, #0
 8003408:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <MX_SPI1_Init+0x74>)
 800340c:	2200      	movs	r2, #0
 800340e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <MX_SPI1_Init+0x74>)
 8003412:	2207      	movs	r2, #7
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <MX_SPI1_Init+0x74>)
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <MX_SPI1_Init+0x74>)
 800341e:	2208      	movs	r2, #8
 8003420:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003422:	4805      	ldr	r0, [pc, #20]	@ (8003438 <MX_SPI1_Init+0x74>)
 8003424:	f002 fefa 	bl	800621c <HAL_SPI_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800342e:	f000 faf3 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200005c4 	.word	0x200005c4
 800343c:	40013000 	.word	0x40013000

08003440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	@ 0x38
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003454:	f107 031c 	add.w	r3, r7, #28
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003460:	463b      	mov	r3, r7
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	611a      	str	r2, [r3, #16]
 800346e:	615a      	str	r2, [r3, #20]
 8003470:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003472:	4b30      	ldr	r3, [pc, #192]	@ (8003534 <MX_TIM4_Init+0xf4>)
 8003474:	4a30      	ldr	r2, [pc, #192]	@ (8003538 <MX_TIM4_Init+0xf8>)
 8003476:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8003478:	4b2e      	ldr	r3, [pc, #184]	@ (8003534 <MX_TIM4_Init+0xf4>)
 800347a:	2201      	movs	r2, #1
 800347c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347e:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <MX_TIM4_Init+0xf4>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <MX_TIM4_Init+0xf4>)
 8003486:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800348a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348c:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <MX_TIM4_Init+0xf4>)
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003492:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <MX_TIM4_Init+0xf4>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003498:	4826      	ldr	r0, [pc, #152]	@ (8003534 <MX_TIM4_Init+0xf4>)
 800349a:	f003 fa3d 	bl	8006918 <HAL_TIM_Base_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80034a4:	f000 fab8 	bl	8003a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034b2:	4619      	mov	r1, r3
 80034b4:	481f      	ldr	r0, [pc, #124]	@ (8003534 <MX_TIM4_Init+0xf4>)
 80034b6:	f003 fdbd 	bl	8007034 <HAL_TIM_ConfigClockSource>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80034c0:	f000 faaa 	bl	8003a18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80034c4:	481b      	ldr	r0, [pc, #108]	@ (8003534 <MX_TIM4_Init+0xf4>)
 80034c6:	f003 fa7e 	bl	80069c6 <HAL_TIM_OC_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80034d0:	f000 faa2 	bl	8003a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	4619      	mov	r1, r3
 80034e2:	4814      	ldr	r0, [pc, #80]	@ (8003534 <MX_TIM4_Init+0xf4>)
 80034e4:	f004 fade 	bl	8007aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80034ee:	f000 fa93 	bl	8003a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80034f2:	2330      	movs	r3, #48	@ 0x30
 80034f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80034f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003504:	463b      	mov	r3, r7
 8003506:	2204      	movs	r2, #4
 8003508:	4619      	mov	r1, r3
 800350a:	480a      	ldr	r0, [pc, #40]	@ (8003534 <MX_TIM4_Init+0xf4>)
 800350c:	f003 fd18 	bl	8006f40 <HAL_TIM_OC_ConfigChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003516:	f000 fa7f 	bl	8003a18 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_2);
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <MX_TIM4_Init+0xf4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <MX_TIM4_Init+0xf4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003528:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800352a:	bf00      	nop
 800352c:	3738      	adds	r7, #56	@ 0x38
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000628 	.word	0x20000628
 8003538:	40000800 	.word	0x40000800

0800353c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08e      	sub	sp, #56	@ 0x38
 8003540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003552:	4bb7      	ldr	r3, [pc, #732]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	4ab6      	ldr	r2, [pc, #728]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003558:	f043 0310 	orr.w	r3, r3, #16
 800355c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355e:	4bb4      	ldr	r3, [pc, #720]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800356a:	4bb1      	ldr	r3, [pc, #708]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	4ab0      	ldr	r2, [pc, #704]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003576:	4bae      	ldr	r3, [pc, #696]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003582:	4bab      	ldr	r3, [pc, #684]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	4aaa      	ldr	r2, [pc, #680]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003588:	f043 0320 	orr.w	r3, r3, #32
 800358c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800358e:	4ba8      	ldr	r3, [pc, #672]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800359a:	4ba5      	ldr	r3, [pc, #660]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	4aa4      	ldr	r2, [pc, #656]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b6:	4a9e      	ldr	r2, [pc, #632]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035be:	4b9c      	ldr	r3, [pc, #624]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ca:	4b99      	ldr	r3, [pc, #612]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	4a98      	ldr	r2, [pc, #608]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d6:	4b96      	ldr	r3, [pc, #600]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035e2:	4b93      	ldr	r3, [pc, #588]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e6:	4a92      	ldr	r2, [pc, #584]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ee:	4b90      	ldr	r3, [pc, #576]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	4a8c      	ldr	r2, [pc, #560]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003606:	4b8a      	ldr	r3, [pc, #552]	@ (8003830 <MX_GPIO_Init+0x2f4>)
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003612:	f001 fa03 	bl	8004a1c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|Track1_Pin
 8003616:	2200      	movs	r2, #0
 8003618:	f24a 0107 	movw	r1, #40967	@ 0xa007
 800361c:	4885      	ldr	r0, [pc, #532]	@ (8003834 <MX_GPIO_Init+0x2f8>)
 800361e:	f001 f909 	bl	8004834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VSTEP_Pin|HSTEP_Pin|VDIR_Pin|HDIR_Pin
 8003622:	2200      	movs	r2, #0
 8003624:	213b      	movs	r1, #59	@ 0x3b
 8003626:	4884      	ldr	r0, [pc, #528]	@ (8003838 <MX_GPIO_Init+0x2fc>)
 8003628:	f001 f904 	bl	8004834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800362c:	2200      	movs	r2, #0
 800362e:	2150      	movs	r1, #80	@ 0x50
 8003630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003634:	f001 f8fe 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8003638:	2200      	movs	r2, #0
 800363a:	2145      	movs	r1, #69	@ 0x45
 800363c:	487f      	ldr	r0, [pc, #508]	@ (800383c <MX_GPIO_Init+0x300>)
 800363e:	f001 f8f9 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8003642:	2200      	movs	r2, #0
 8003644:	2101      	movs	r1, #1
 8003646:	487e      	ldr	r0, [pc, #504]	@ (8003840 <MX_GPIO_Init+0x304>)
 8003648:	f001 f8f4 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_EN_GPIO_Port, Actuator_EN_Pin, GPIO_PIN_RESET);
 800364c:	2200      	movs	r2, #0
 800364e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003652:	487c      	ldr	r0, [pc, #496]	@ (8003844 <MX_GPIO_Init+0x308>)
 8003654:	f001 f8ee 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003658:	2200      	movs	r2, #0
 800365a:	f240 3103 	movw	r1, #771	@ 0x303
 800365e:	487a      	ldr	r0, [pc, #488]	@ (8003848 <MX_GPIO_Init+0x30c>)
 8003660:	f001 f8e8 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003664:	237c      	movs	r3, #124	@ 0x7c
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800366c:	2302      	movs	r3, #2
 800366e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003674:	4619      	mov	r1, r3
 8003676:	4873      	ldr	r0, [pc, #460]	@ (8003844 <MX_GPIO_Init+0x308>)
 8003678:	f000 ff32 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 Track1_Pin
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|Track1_Pin
 800367c:	f24a 0307 	movw	r3, #40967	@ 0xa007
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003682:	2301      	movs	r3, #1
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	2300      	movs	r3, #0
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800368e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003692:	4619      	mov	r1, r3
 8003694:	4867      	ldr	r0, [pc, #412]	@ (8003834 <MX_GPIO_Init+0x2f8>)
 8003696:	f000 ff23 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800369a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036a4:	2302      	movs	r3, #2
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036ac:	4619      	mov	r1, r3
 80036ae:	4861      	ldr	r0, [pc, #388]	@ (8003834 <MX_GPIO_Init+0x2f8>)
 80036b0:	f000 ff16 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSTEP_Pin HSTEP_Pin VDIR_Pin HDIR_Pin
                           PC5 */
  GPIO_InitStruct.Pin = VSTEP_Pin|HSTEP_Pin|VDIR_Pin|HDIR_Pin
 80036b4:	233b      	movs	r3, #59	@ 0x3b
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b8:	2301      	movs	r3, #1
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036c8:	4619      	mov	r1, r3
 80036ca:	485b      	ldr	r0, [pc, #364]	@ (8003838 <MX_GPIO_Init+0x2fc>)
 80036cc:	f000 ff08 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036d0:	2304      	movs	r3, #4
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80036d4:	230b      	movs	r3, #11
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036e0:	4619      	mov	r1, r3
 80036e2:	4855      	ldr	r0, [pc, #340]	@ (8003838 <MX_GPIO_Init+0x2fc>)
 80036e4:	f000 fefc 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036e8:	2301      	movs	r3, #1
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036f8:	2301      	movs	r3, #1
 80036fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003700:	4619      	mov	r1, r3
 8003702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003706:	f000 feeb 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800370a:	230a      	movs	r3, #10
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800370e:	230b      	movs	r3, #11
 8003710:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800371a:	4619      	mov	r1, r3
 800371c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003720:	f000 fede 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003724:	2350      	movs	r3, #80	@ 0x50
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003728:	2301      	movs	r3, #1
 800372a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003730:	2300      	movs	r3, #0
 8003732:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003738:	4619      	mov	r1, r3
 800373a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800373e:	f000 fecf 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_6;
 8003742:	2345      	movs	r3, #69	@ 0x45
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003746:	2301      	movs	r3, #1
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003756:	4619      	mov	r1, r3
 8003758:	4838      	ldr	r0, [pc, #224]	@ (800383c <MX_GPIO_Init+0x300>)
 800375a:	f000 fec1 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800375e:	2302      	movs	r3, #2
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003762:	230b      	movs	r3, #11
 8003764:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800376e:	4619      	mov	r1, r3
 8003770:	4832      	ldr	r0, [pc, #200]	@ (800383c <MX_GPIO_Init+0x300>)
 8003772:	f000 feb5 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003776:	2301      	movs	r3, #1
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800377a:	2301      	movs	r3, #1
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003782:	2300      	movs	r3, #0
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378a:	4619      	mov	r1, r3
 800378c:	482c      	ldr	r0, [pc, #176]	@ (8003840 <MX_GPIO_Init+0x304>)
 800378e:	f000 fea7 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8003792:	f44f 5376 	mov.w	r3, #15744	@ 0x3d80
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ac:	4619      	mov	r1, r3
 80037ae:	4825      	ldr	r0, [pc, #148]	@ (8003844 <MX_GPIO_Init+0x308>)
 80037b0:	f000 fe96 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_EN_Pin;
 80037b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	2301      	movs	r3, #1
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Actuator_EN_GPIO_Port, &GPIO_InitStruct);
 80037c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ca:	4619      	mov	r1, r3
 80037cc:	481d      	ldr	r0, [pc, #116]	@ (8003844 <MX_GPIO_Init+0x308>)
 80037ce:	f000 fe87 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80037d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80037e4:	2303      	movs	r3, #3
 80037e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ec:	4619      	mov	r1, r3
 80037ee:	4815      	ldr	r0, [pc, #84]	@ (8003844 <MX_GPIO_Init+0x308>)
 80037f0:	f000 fe76 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : xlimit_Pin */
  GPIO_InitStruct.Pin = xlimit_Pin;
 80037f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037fe:	2301      	movs	r3, #1
 8003800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(xlimit_GPIO_Port, &GPIO_InitStruct);
 8003802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003806:	4619      	mov	r1, r3
 8003808:	480e      	ldr	r0, [pc, #56]	@ (8003844 <MX_GPIO_Init+0x308>)
 800380a:	f000 fe69 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ylimit_Pin */
  GPIO_InitStruct.Pin = ylimit_Pin;
 800380e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003814:	2300      	movs	r3, #0
 8003816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003818:	2301      	movs	r3, #1
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ylimit_GPIO_Port, &GPIO_InitStruct);
 800381c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003820:	4619      	mov	r1, r3
 8003822:	4806      	ldr	r0, [pc, #24]	@ (800383c <MX_GPIO_Init+0x300>)
 8003824:	f000 fe5c 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003828:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800382c:	e00e      	b.n	800384c <MX_GPIO_Init+0x310>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	48001400 	.word	0x48001400
 8003838:	48000800 	.word	0x48000800
 800383c:	48000400 	.word	0x48000400
 8003840:	48001800 	.word	0x48001800
 8003844:	48001000 	.word	0x48001000
 8003848:	48000c00 	.word	0x48000c00
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800385a:	230d      	movs	r3, #13
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003862:	4619      	mov	r1, r3
 8003864:	4856      	ldr	r0, [pc, #344]	@ (80039c0 <MX_GPIO_Init+0x484>)
 8003866:	f000 fe3b 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800386a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800387c:	230e      	movs	r3, #14
 800387e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003884:	4619      	mov	r1, r3
 8003886:	484e      	ldr	r0, [pc, #312]	@ (80039c0 <MX_GPIO_Init+0x484>)
 8003888:	f000 fe2a 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1;
 800388c:	f240 3303 	movw	r3, #771	@ 0x303
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003892:	2301      	movs	r3, #1
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389a:	2300      	movs	r3, #0
 800389c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a2:	4619      	mov	r1, r3
 80038a4:	4847      	ldr	r0, [pc, #284]	@ (80039c4 <MX_GPIO_Init+0x488>)
 80038a6:	f000 fe1b 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038aa:	2340      	movs	r3, #64	@ 0x40
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80038ba:	230d      	movs	r3, #13
 80038bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c2:	4619      	mov	r1, r3
 80038c4:	4840      	ldr	r0, [pc, #256]	@ (80039c8 <MX_GPIO_Init+0x48c>)
 80038c6:	f000 fe0b 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ce:	2302      	movs	r3, #2
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	2300      	movs	r3, #0
 80038d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038da:	2302      	movs	r3, #2
 80038dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038e2:	4619      	mov	r1, r3
 80038e4:	4838      	ldr	r0, [pc, #224]	@ (80039c8 <MX_GPIO_Init+0x48c>)
 80038e6:	f000 fdfb 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80038ea:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f8:	2303      	movs	r3, #3
 80038fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80038fc:	230c      	movs	r3, #12
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003904:	4619      	mov	r1, r3
 8003906:	4830      	ldr	r0, [pc, #192]	@ (80039c8 <MX_GPIO_Init+0x48c>)
 8003908:	f000 fdea 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800390c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	2302      	movs	r3, #2
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391a:	2303      	movs	r3, #3
 800391c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800391e:	230a      	movs	r3, #10
 8003920:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003926:	4619      	mov	r1, r3
 8003928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800392c:	f000 fdd8 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003936:	2300      	movs	r3, #0
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003942:	4619      	mov	r1, r3
 8003944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003948:	f000 fdca 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800394c:	2304      	movs	r3, #4
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003958:	2303      	movs	r3, #3
 800395a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800395c:	230c      	movs	r3, #12
 800395e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003964:	4619      	mov	r1, r3
 8003966:	4817      	ldr	r0, [pc, #92]	@ (80039c4 <MX_GPIO_Init+0x488>)
 8003968:	f000 fdba 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800396c:	2338      	movs	r3, #56	@ 0x38
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003978:	2303      	movs	r3, #3
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800397c:	2306      	movs	r3, #6
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003984:	4619      	mov	r1, r3
 8003986:	480e      	ldr	r0, [pc, #56]	@ (80039c0 <MX_GPIO_Init+0x484>)
 8003988:	f000 fdaa 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Move_Button_Pin Take_Button_Pin */
  GPIO_InitStruct.Pin = Move_Button_Pin|Take_Button_Pin;
 800398c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003992:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003998:	2301      	movs	r3, #1
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a0:	4619      	mov	r1, r3
 80039a2:	4807      	ldr	r0, [pc, #28]	@ (80039c0 <MX_GPIO_Init+0x484>)
 80039a4:	f000 fd9c 	bl	80044e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2100      	movs	r1, #0
 80039ac:	2017      	movs	r0, #23
 80039ae:	f000 fd60 	bl	8004472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039b2:	2017      	movs	r0, #23
 80039b4:	f000 fd79 	bl	80044aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039b8:	bf00      	nop
 80039ba:	3738      	adds	r7, #56	@ 0x38
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	48000400 	.word	0x48000400
 80039c4:	48000c00 	.word	0x48000c00
 80039c8:	48000800 	.word	0x48000800

080039cc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80039d4:	1d39      	adds	r1, r7, #4
 80039d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039da:	2201      	movs	r2, #1
 80039dc:	4803      	ldr	r0, [pc, #12]	@ (80039ec <__io_putchar+0x20>)
 80039de:	f004 f957 	bl	8007c90 <HAL_UART_Transmit>
  return ch;
 80039e2:	687b      	ldr	r3, [r7, #4]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000408 	.word	0x20000408

080039f0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if (GPIO_Pin == GPIO_PIN_8) {
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a00:	d102      	bne.n	8003a08 <HAL_GPIO_EXTI_Callback+0x18>
		poll = 1;
 8003a02:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <HAL_GPIO_EXTI_Callback+0x24>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
	}
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	20000674 	.word	0x20000674

08003a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a1c:	b672      	cpsid	i
}
 8003a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <Error_Handler+0x8>

08003a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <HAL_MspInit+0x44>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a68 <HAL_MspInit+0x44>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a36:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <HAL_MspInit+0x44>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <HAL_MspInit+0x44>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	4a08      	ldr	r2, [pc, #32]	@ (8003a68 <HAL_MspInit+0x44>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_MspInit+0x44>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0b2      	sub	sp, #200	@ 0xc8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a84:	f107 0320 	add.w	r3, r7, #32
 8003a88:	2294      	movs	r2, #148	@ 0x94
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f005 fdff 	bl	8009690 <memset>
  if(huart->Instance==LPUART1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a65      	ldr	r2, [pc, #404]	@ (8003c2c <HAL_UART_MspInit+0x1c0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d13e      	bne.n	8003b1a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aa4:	f107 0320 	add.w	r3, r7, #32
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 fe9f 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ab4:	f7ff ffb0 	bl	8003a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	4a5c      	ldr	r2, [pc, #368]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ad0:	4b57      	ldr	r3, [pc, #348]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad4:	4a56      	ldr	r2, [pc, #344]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003adc:	4b54      	ldr	r3, [pc, #336]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8003ae8:	f000 ff98 	bl	8004a1c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003aec:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b00:	2303      	movs	r3, #3
 8003b02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003b06:	2308      	movs	r3, #8
 8003b08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b0c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4848      	ldr	r0, [pc, #288]	@ (8003c34 <HAL_UART_MspInit+0x1c8>)
 8003b14:	f000 fce4 	bl	80044e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b18:	e083      	b.n	8003c22 <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a46      	ldr	r2, [pc, #280]	@ (8003c38 <HAL_UART_MspInit+0x1cc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d13e      	bne.n	8003ba2 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b2c:	f107 0320 	add.w	r3, r7, #32
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fe5b 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003b3c:	f7ff ff6c 	bl	8003a18 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b40:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	4a3a      	ldr	r2, [pc, #232]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b4c:	4b38      	ldr	r3, [pc, #224]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b58:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5c:	4a34      	ldr	r2, [pc, #208]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b64:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8003b70:	f000 ff54 	bl	8004a1c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b74:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b8e:	2307      	movs	r3, #7
 8003b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b94:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4826      	ldr	r0, [pc, #152]	@ (8003c34 <HAL_UART_MspInit+0x1c8>)
 8003b9c:	f000 fca0 	bl	80044e0 <HAL_GPIO_Init>
}
 8003ba0:	e03f      	b.n	8003c22 <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a25      	ldr	r2, [pc, #148]	@ (8003c3c <HAL_UART_MspInit+0x1d0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d13a      	bne.n	8003c22 <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003bac:	2302      	movs	r3, #2
 8003bae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb4:	f107 0320 	add.w	r3, r7, #32
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fe17 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003bc4:	f7ff ff28 	bl	8003a18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bc8:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bcc:	4a18      	ldr	r2, [pc, #96]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd4:	4b16      	ldr	r3, [pc, #88]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003be0:	4b13      	ldr	r3, [pc, #76]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be4:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003be6:	f043 0308 	orr.w	r3, r3, #8
 8003bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bec:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <HAL_UART_MspInit+0x1c4>)
 8003bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003bf8:	2378      	movs	r3, #120	@ 0x78
 8003bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c10:	2307      	movs	r3, #7
 8003c12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c16:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4808      	ldr	r0, [pc, #32]	@ (8003c40 <HAL_UART_MspInit+0x1d4>)
 8003c1e:	f000 fc5f 	bl	80044e0 <HAL_GPIO_Init>
}
 8003c22:	bf00      	nop
 8003c24:	37c8      	adds	r7, #200	@ 0xc8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40008000 	.word	0x40008000
 8003c30:	40021000 	.word	0x40021000
 8003c34:	48001800 	.word	0x48001800
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	48000c00 	.word	0x48000c00

08003c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a17      	ldr	r2, [pc, #92]	@ (8003cc0 <HAL_SPI_MspInit+0x7c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d128      	bne.n	8003cb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c66:	4b17      	ldr	r3, [pc, #92]	@ (8003cc4 <HAL_SPI_MspInit+0x80>)
 8003c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6a:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <HAL_SPI_MspInit+0x80>)
 8003c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c72:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <HAL_SPI_MspInit+0x80>)
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7e:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <HAL_SPI_MspInit+0x80>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	4a10      	ldr	r2, [pc, #64]	@ (8003cc4 <HAL_SPI_MspInit+0x80>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc4 <HAL_SPI_MspInit+0x80>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003c96:	23a0      	movs	r3, #160	@ 0xa0
 8003c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cb4:	f000 fc14 	bl	80044e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003cb8:	bf00      	nop
 8003cba:	3728      	adds	r7, #40	@ 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40013000 	.word	0x40013000
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d54 <HAL_TIM_Base_MspInit+0x8c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d130      	bne.n	8003d4c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cea:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_TIM_Base_MspInit+0x90>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_TIM_Base_MspInit+0x90>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cf6:	4b18      	ldr	r3, [pc, #96]	@ (8003d58 <HAL_TIM_Base_MspInit+0x90>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d02:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <HAL_TIM_Base_MspInit+0x90>)
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	4a14      	ldr	r2, [pc, #80]	@ (8003d58 <HAL_TIM_Base_MspInit+0x90>)
 8003d08:	f043 0308 	orr.w	r3, r3, #8
 8003d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d0e:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <HAL_TIM_Base_MspInit+0x90>)
 8003d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003d1a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4619      	mov	r1, r3
 8003d36:	4809      	ldr	r0, [pc, #36]	@ (8003d5c <HAL_TIM_Base_MspInit+0x94>)
 8003d38:	f000 fbd2 	bl	80044e0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	201e      	movs	r0, #30
 8003d42:	f000 fb96 	bl	8004472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d46:	201e      	movs	r0, #30
 8003d48:	f000 fbaf 	bl	80044aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d4c:	bf00      	nop
 8003d4e:	3728      	adds	r7, #40	@ 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	48000c00 	.word	0x48000c00

08003d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d64:	bf00      	nop
 8003d66:	e7fd      	b.n	8003d64 <NMI_Handler+0x4>

08003d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d6c:	bf00      	nop
 8003d6e:	e7fd      	b.n	8003d6c <HardFault_Handler+0x4>

08003d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <MemManage_Handler+0x4>

08003d78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <BusFault_Handler+0x4>

08003d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <UsageFault_Handler+0x4>

08003d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003db6:	f000 fa3d 	bl	8004234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Move_Button_Pin);
 8003dc2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003dc6:	f000 fd4d 	bl	8004864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Take_Button_Pin);
 8003dca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003dce:	f000 fd49 	bl	8004864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (hmove == 1 && vmove == 1) {
 8003ddc:	4b64      	ldr	r3, [pc, #400]	@ (8003f70 <TIM4_IRQHandler+0x198>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d14e      	bne.n	8003e82 <TIM4_IRQHandler+0xaa>
 8003de4:	4b63      	ldr	r3, [pc, #396]	@ (8003f74 <TIM4_IRQHandler+0x19c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d14a      	bne.n	8003e82 <TIM4_IRQHandler+0xaa>
		count++;
 8003dec:	4b62      	ldr	r3, [pc, #392]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	4a61      	ldr	r2, [pc, #388]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003df4:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(HSTEP_GPIO_Port, HSTEP_Pin) == 1) {
 8003df6:	2102      	movs	r1, #2
 8003df8:	4860      	ldr	r0, [pc, #384]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003dfa:	f000 fd03 	bl	8004804 <HAL_GPIO_ReadPin>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <TIM4_IRQHandler+0x38>
			HAL_GPIO_WritePin(HSTEP_GPIO_Port, HSTEP_Pin, GPIO_PIN_RESET);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2102      	movs	r1, #2
 8003e08:	485c      	ldr	r0, [pc, #368]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003e0a:	f000 fd13 	bl	8004834 <HAL_GPIO_WritePin>
 8003e0e:	e004      	b.n	8003e1a <TIM4_IRQHandler+0x42>
		}
		else {
			HAL_GPIO_WritePin(HSTEP_GPIO_Port, HSTEP_Pin, GPIO_PIN_SET);
 8003e10:	2201      	movs	r2, #1
 8003e12:	2102      	movs	r1, #2
 8003e14:	4859      	ldr	r0, [pc, #356]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003e16:	f000 fd0d 	bl	8004834 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(VSTEP_GPIO_Port, VSTEP_Pin) == 1) {
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4857      	ldr	r0, [pc, #348]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003e1e:	f000 fcf1 	bl	8004804 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <TIM4_IRQHandler+0x5c>
			HAL_GPIO_WritePin(VSTEP_GPIO_Port, VSTEP_Pin, GPIO_PIN_RESET);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4853      	ldr	r0, [pc, #332]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003e2e:	f000 fd01 	bl	8004834 <HAL_GPIO_WritePin>
 8003e32:	e004      	b.n	8003e3e <TIM4_IRQHandler+0x66>
		}
		else {
			HAL_GPIO_WritePin(VSTEP_GPIO_Port, VSTEP_Pin, GPIO_PIN_SET);
 8003e34:	2201      	movs	r2, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	4850      	ldr	r0, [pc, #320]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003e3a:	f000 fcfb 	bl	8004834 <HAL_GPIO_WritePin>
		}

		if (count >= countmax) { // reset when hit max
 8003e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b4f      	ldr	r3, [pc, #316]	@ (8003f80 <TIM4_IRQHandler+0x1a8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	f2c0 808c 	blt.w	8003f64 <TIM4_IRQHandler+0x18c>
			hmove = 0;
 8003e4c:	4b48      	ldr	r3, [pc, #288]	@ (8003f70 <TIM4_IRQHandler+0x198>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
			vmove = 0;
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <TIM4_IRQHandler+0x19c>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
			count = 0;
 8003e58:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
			countmax = 0;
 8003e5e:	4b48      	ldr	r3, [pc, #288]	@ (8003f80 <TIM4_IRQHandler+0x1a8>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
			// Update the period
			__HAL_TIM_SET_AUTORELOAD(&htim4, 1000);
 8003e64:	4b47      	ldr	r3, [pc, #284]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e6e:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003e70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e74:	60da      	str	r2, [r3, #12]

			// Update the pulse for Channel 2
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
 8003e76:	4b43      	ldr	r3, [pc, #268]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38
		if (count >= countmax) { // reset when hit max
 8003e80:	e070      	b.n	8003f64 <TIM4_IRQHandler+0x18c>
		}
	}
	else if (hmove == 1) { // horizontal
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <TIM4_IRQHandler+0x198>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d134      	bne.n	8003ef4 <TIM4_IRQHandler+0x11c>
		count++;
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	4a39      	ldr	r2, [pc, #228]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003e92:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(HSTEP_GPIO_Port, HSTEP_Pin) == 1) {
 8003e94:	2102      	movs	r1, #2
 8003e96:	4839      	ldr	r0, [pc, #228]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003e98:	f000 fcb4 	bl	8004804 <HAL_GPIO_ReadPin>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <TIM4_IRQHandler+0xd6>
			HAL_GPIO_WritePin(HSTEP_GPIO_Port, HSTEP_Pin, GPIO_PIN_RESET);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4835      	ldr	r0, [pc, #212]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003ea8:	f000 fcc4 	bl	8004834 <HAL_GPIO_WritePin>
 8003eac:	e004      	b.n	8003eb8 <TIM4_IRQHandler+0xe0>
		}
		else {
			HAL_GPIO_WritePin(HSTEP_GPIO_Port, HSTEP_Pin, GPIO_PIN_SET);
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4832      	ldr	r0, [pc, #200]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003eb4:	f000 fcbe 	bl	8004834 <HAL_GPIO_WritePin>
		}


		if (count >= countmax) { // reset when hit max
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b30      	ldr	r3, [pc, #192]	@ (8003f80 <TIM4_IRQHandler+0x1a8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	db4f      	blt.n	8003f64 <TIM4_IRQHandler+0x18c>
			hmove = 0;
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <TIM4_IRQHandler+0x198>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
			count = 0;
 8003eca:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
			countmax = 0;
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f80 <TIM4_IRQHandler+0x1a8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
		    // Update the period
		    __HAL_TIM_SET_AUTORELOAD(&htim4, 1000);
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ede:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ee0:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003ee2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ee6:	60da      	str	r2, [r3, #12]

		    // Update the pulse for Channel 2
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
 8003ee8:	4b26      	ldr	r3, [pc, #152]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ef2:	e037      	b.n	8003f64 <TIM4_IRQHandler+0x18c>
		}
	}
	else if (vmove == 1) { // horizontal
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f74 <TIM4_IRQHandler+0x19c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d133      	bne.n	8003f64 <TIM4_IRQHandler+0x18c>
		count++;
 8003efc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	4a1d      	ldr	r2, [pc, #116]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003f04:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(VSTEP_GPIO_Port, VSTEP_Pin) == 1) {
 8003f06:	2101      	movs	r1, #1
 8003f08:	481c      	ldr	r0, [pc, #112]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003f0a:	f000 fc7b 	bl	8004804 <HAL_GPIO_ReadPin>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <TIM4_IRQHandler+0x148>
			HAL_GPIO_WritePin(VSTEP_GPIO_Port, VSTEP_Pin, GPIO_PIN_RESET);
 8003f14:	2200      	movs	r2, #0
 8003f16:	2101      	movs	r1, #1
 8003f18:	4818      	ldr	r0, [pc, #96]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003f1a:	f000 fc8b 	bl	8004834 <HAL_GPIO_WritePin>
 8003f1e:	e004      	b.n	8003f2a <TIM4_IRQHandler+0x152>
		}
		else {
			HAL_GPIO_WritePin(VSTEP_GPIO_Port, VSTEP_Pin, GPIO_PIN_SET);
 8003f20:	2201      	movs	r2, #1
 8003f22:	2101      	movs	r1, #1
 8003f24:	4815      	ldr	r0, [pc, #84]	@ (8003f7c <TIM4_IRQHandler+0x1a4>)
 8003f26:	f000 fc85 	bl	8004834 <HAL_GPIO_WritePin>
		}


		if (count >= countmax) { // reset when hit max
 8003f2a:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <TIM4_IRQHandler+0x1a8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	db16      	blt.n	8003f64 <TIM4_IRQHandler+0x18c>
			vmove = 0;
 8003f36:	4b0f      	ldr	r3, [pc, #60]	@ (8003f74 <TIM4_IRQHandler+0x19c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
			count = 0;
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <TIM4_IRQHandler+0x1a0>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
			countmax = 0;
 8003f42:	4b0f      	ldr	r3, [pc, #60]	@ (8003f80 <TIM4_IRQHandler+0x1a8>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
		    // Update the period
		    __HAL_TIM_SET_AUTORELOAD(&htim4, 1000);
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f52:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003f54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f58:	60da      	str	r2, [r3, #12]

		    // Update the pulse for Channel 2
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003f62:	639a      	str	r2, [r3, #56]	@ 0x38
	//		    // Update the pulse for Channel 2
	//		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
	//		}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f64:	4807      	ldr	r0, [pc, #28]	@ (8003f84 <TIM4_IRQHandler+0x1ac>)
 8003f66:	f002 fee3 	bl	8006d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000678 	.word	0x20000678
 8003f74:	2000067c 	.word	0x2000067c
 8003f78:	20000680 	.word	0x20000680
 8003f7c:	48000800 	.word	0x48000800
 8003f80:	20000684 	.word	0x20000684
 8003f84:	20000628 	.word	0x20000628

08003f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return 1;
 8003f8c:	2301      	movs	r3, #1
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_kill>:

int _kill(int pid, int sig)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fa2:	f005 fb81 	bl	80096a8 <__errno>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2216      	movs	r2, #22
 8003faa:	601a      	str	r2, [r3, #0]
  return -1;
 8003fac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_exit>:

void _exit (int status)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ffe7 	bl	8003f98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fca:	bf00      	nop
 8003fcc:	e7fd      	b.n	8003fca <_exit+0x12>

08003fce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e00a      	b.n	8003ff6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fe0:	f3af 8000 	nop.w
 8003fe4:	4601      	mov	r1, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	60ba      	str	r2, [r7, #8]
 8003fec:	b2ca      	uxtb	r2, r1
 8003fee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dbf0      	blt.n	8003fe0 <_read+0x12>
  }

  return len;
 8003ffe:	687b      	ldr	r3, [r7, #4]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e009      	b.n	800402e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	60ba      	str	r2, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fcd2 	bl	80039cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3301      	adds	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	dbf1      	blt.n	800401a <_write+0x12>
  }
  return len;
 8004036:	687b      	ldr	r3, [r7, #4]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_close>:

int _close(int file)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004068:	605a      	str	r2, [r3, #4]
  return 0;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_isatty>:

int _isatty(int file)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004080:	2301      	movs	r3, #1
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040b0:	4a14      	ldr	r2, [pc, #80]	@ (8004104 <_sbrk+0x5c>)
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <_sbrk+0x60>)
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040bc:	4b13      	ldr	r3, [pc, #76]	@ (800410c <_sbrk+0x64>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040c4:	4b11      	ldr	r3, [pc, #68]	@ (800410c <_sbrk+0x64>)
 80040c6:	4a12      	ldr	r2, [pc, #72]	@ (8004110 <_sbrk+0x68>)
 80040c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ca:	4b10      	ldr	r3, [pc, #64]	@ (800410c <_sbrk+0x64>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d207      	bcs.n	80040e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040d8:	f005 fae6 	bl	80096a8 <__errno>
 80040dc:	4603      	mov	r3, r0
 80040de:	220c      	movs	r2, #12
 80040e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040e6:	e009      	b.n	80040fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040e8:	4b08      	ldr	r3, [pc, #32]	@ (800410c <_sbrk+0x64>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ee:	4b07      	ldr	r3, [pc, #28]	@ (800410c <_sbrk+0x64>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	4a05      	ldr	r2, [pc, #20]	@ (800410c <_sbrk+0x64>)
 80040f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200a0000 	.word	0x200a0000
 8004108:	00000400 	.word	0x00000400
 800410c:	200006a0 	.word	0x200006a0
 8004110:	200007f8 	.word	0x200007f8

08004114 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <SystemInit+0x20>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	4a05      	ldr	r2, [pc, #20]	@ (8004134 <SystemInit+0x20>)
 8004120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800413c:	f7ff ffea 	bl	8004114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004140:	480c      	ldr	r0, [pc, #48]	@ (8004174 <LoopForever+0x6>)
  ldr r1, =_edata
 8004142:	490d      	ldr	r1, [pc, #52]	@ (8004178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004144:	4a0d      	ldr	r2, [pc, #52]	@ (800417c <LoopForever+0xe>)
  movs r3, #0
 8004146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004148:	e002      	b.n	8004150 <LoopCopyDataInit>

0800414a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800414a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800414c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800414e:	3304      	adds	r3, #4

08004150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004154:	d3f9      	bcc.n	800414a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004156:	4a0a      	ldr	r2, [pc, #40]	@ (8004180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004158:	4c0a      	ldr	r4, [pc, #40]	@ (8004184 <LoopForever+0x16>)
  movs r3, #0
 800415a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800415c:	e001      	b.n	8004162 <LoopFillZerobss>

0800415e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800415e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004160:	3204      	adds	r2, #4

08004162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004164:	d3fb      	bcc.n	800415e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004166:	f005 faa5 	bl	80096b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800416a:	f7fe fe4d 	bl	8002e08 <main>

0800416e <LoopForever>:

LoopForever:
    b LoopForever
 800416e:	e7fe      	b.n	800416e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004170:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004178:	200003ec 	.word	0x200003ec
  ldr r2, =_sidata
 800417c:	0800ce48 	.word	0x0800ce48
  ldr r2, =_sbss
 8004180:	200003ec 	.word	0x200003ec
  ldr r4, =_ebss
 8004184:	200007f4 	.word	0x200007f4

08004188 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004188:	e7fe      	b.n	8004188 <ADC1_IRQHandler>

0800418a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004194:	2003      	movs	r0, #3
 8004196:	f000 f961 	bl	800445c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800419a:	2000      	movs	r0, #0
 800419c:	f000 f80e 	bl	80041bc <HAL_InitTick>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	71fb      	strb	r3, [r7, #7]
 80041aa:	e001      	b.n	80041b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041ac:	f7ff fc3a 	bl	8003a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041b0:	79fb      	ldrb	r3, [r7, #7]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80041c8:	4b17      	ldr	r3, [pc, #92]	@ (8004228 <HAL_InitTick+0x6c>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d023      	beq.n	8004218 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_InitTick+0x70>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b14      	ldr	r3, [pc, #80]	@ (8004228 <HAL_InitTick+0x6c>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4619      	mov	r1, r3
 80041da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041de:	fbb3 f3f1 	udiv	r3, r3, r1
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f96d 	bl	80044c6 <HAL_SYSTICK_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d809      	bhi.n	800420c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f8:	2200      	movs	r2, #0
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004200:	f000 f937 	bl	8004472 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004204:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <HAL_InitTick+0x74>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e007      	b.n	800421c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e004      	b.n	800421c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	e001      	b.n	800421c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000220 	.word	0x20000220
 800422c:	20000218 	.word	0x20000218
 8004230:	2000021c 	.word	0x2000021c

08004234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_IncTick+0x20>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_IncTick+0x24>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4413      	add	r3, r2
 8004244:	4a04      	ldr	r2, [pc, #16]	@ (8004258 <HAL_IncTick+0x24>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000220 	.word	0x20000220
 8004258:	200006a4 	.word	0x200006a4

0800425c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return uwTick;
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <HAL_GetTick+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	200006a4 	.word	0x200006a4

08004274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff ffee 	bl	800425c <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800428c:	d005      	beq.n	800429a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800428e:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <HAL_Delay+0x44>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800429a:	bf00      	nop
 800429c:	f7ff ffde 	bl	800425c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d8f7      	bhi.n	800429c <HAL_Delay+0x28>
  {
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000220 	.word	0x20000220

080042bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042d8:	4013      	ands	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ee:	4a04      	ldr	r2, [pc, #16]	@ (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	60d3      	str	r3, [r2, #12]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004308:	4b04      	ldr	r3, [pc, #16]	@ (800431c <__NVIC_GetPriorityGrouping+0x18>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f003 0307 	and.w	r3, r3, #7
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	db0b      	blt.n	800434a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4907      	ldr	r1, [pc, #28]	@ (8004358 <__NVIC_EnableIRQ+0x38>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2001      	movs	r0, #1
 8004342:	fa00 f202 	lsl.w	r2, r0, r2
 8004346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000e100 	.word	0xe000e100

0800435c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	2b00      	cmp	r3, #0
 800436e:	db0a      	blt.n	8004386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	490c      	ldr	r1, [pc, #48]	@ (80043a8 <__NVIC_SetPriority+0x4c>)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	440b      	add	r3, r1
 8004380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004384:	e00a      	b.n	800439c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4908      	ldr	r1, [pc, #32]	@ (80043ac <__NVIC_SetPriority+0x50>)
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3b04      	subs	r3, #4
 8004394:	0112      	lsls	r2, r2, #4
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	440b      	add	r3, r1
 800439a:	761a      	strb	r2, [r3, #24]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000e100 	.word	0xe000e100
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	@ 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f1c3 0307 	rsb	r3, r3, #7
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	bf28      	it	cs
 80043ce:	2304      	movcs	r3, #4
 80043d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d902      	bls.n	80043e0 <NVIC_EncodePriority+0x30>
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3b03      	subs	r3, #3
 80043de:	e000      	b.n	80043e2 <NVIC_EncodePriority+0x32>
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43da      	mvns	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	401a      	ands	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43d9      	mvns	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	4313      	orrs	r3, r2
         );
}
 800440a:	4618      	mov	r0, r3
 800440c:	3724      	adds	r7, #36	@ 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004428:	d301      	bcc.n	800442e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800442a:	2301      	movs	r3, #1
 800442c:	e00f      	b.n	800444e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800442e:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <SysTick_Config+0x40>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3b01      	subs	r3, #1
 8004434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004436:	210f      	movs	r1, #15
 8004438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800443c:	f7ff ff8e 	bl	800435c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <SysTick_Config+0x40>)
 8004442:	2200      	movs	r2, #0
 8004444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004446:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <SysTick_Config+0x40>)
 8004448:	2207      	movs	r2, #7
 800444a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	e000e010 	.word	0xe000e010

0800445c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ff29 	bl	80042bc <__NVIC_SetPriorityGrouping>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	4603      	mov	r3, r0
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004484:	f7ff ff3e 	bl	8004304 <__NVIC_GetPriorityGrouping>
 8004488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	6978      	ldr	r0, [r7, #20]
 8004490:	f7ff ff8e 	bl	80043b0 <NVIC_EncodePriority>
 8004494:	4602      	mov	r2, r0
 8004496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff5d 	bl	800435c <__NVIC_SetPriority>
}
 80044a2:	bf00      	nop
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	4603      	mov	r3, r0
 80044b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff31 	bl	8004320 <__NVIC_EnableIRQ>
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ffa2 	bl	8004418 <SysTick_Config>
 80044d4:	4603      	mov	r3, r0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ee:	e166      	b.n	80047be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8158 	beq.w	80047b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d005      	beq.n	8004520 <HAL_GPIO_Init+0x40>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d130      	bne.n	8004582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004556:	2201      	movs	r2, #1
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0201 	and.w	r2, r3, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b03      	cmp	r3, #3
 800458c:	d017      	beq.n	80045be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d123      	bne.n	8004612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80b2 	beq.w	80047b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004654:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <HAL_GPIO_Init+0x2fc>)
 8004656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004658:	4a60      	ldr	r2, [pc, #384]	@ (80047dc <HAL_GPIO_Init+0x2fc>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004660:	4b5e      	ldr	r3, [pc, #376]	@ (80047dc <HAL_GPIO_Init+0x2fc>)
 8004662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800466c:	4a5c      	ldr	r2, [pc, #368]	@ (80047e0 <HAL_GPIO_Init+0x300>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004696:	d02b      	beq.n	80046f0 <HAL_GPIO_Init+0x210>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a52      	ldr	r2, [pc, #328]	@ (80047e4 <HAL_GPIO_Init+0x304>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d025      	beq.n	80046ec <HAL_GPIO_Init+0x20c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a51      	ldr	r2, [pc, #324]	@ (80047e8 <HAL_GPIO_Init+0x308>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d01f      	beq.n	80046e8 <HAL_GPIO_Init+0x208>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a50      	ldr	r2, [pc, #320]	@ (80047ec <HAL_GPIO_Init+0x30c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d019      	beq.n	80046e4 <HAL_GPIO_Init+0x204>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a4f      	ldr	r2, [pc, #316]	@ (80047f0 <HAL_GPIO_Init+0x310>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <HAL_GPIO_Init+0x200>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a4e      	ldr	r2, [pc, #312]	@ (80047f4 <HAL_GPIO_Init+0x314>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00d      	beq.n	80046dc <HAL_GPIO_Init+0x1fc>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a4d      	ldr	r2, [pc, #308]	@ (80047f8 <HAL_GPIO_Init+0x318>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <HAL_GPIO_Init+0x1f8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a4c      	ldr	r2, [pc, #304]	@ (80047fc <HAL_GPIO_Init+0x31c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <HAL_GPIO_Init+0x1f4>
 80046d0:	2307      	movs	r3, #7
 80046d2:	e00e      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046d4:	2308      	movs	r3, #8
 80046d6:	e00c      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046d8:	2306      	movs	r3, #6
 80046da:	e00a      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046dc:	2305      	movs	r3, #5
 80046de:	e008      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046e0:	2304      	movs	r3, #4
 80046e2:	e006      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046e4:	2303      	movs	r3, #3
 80046e6:	e004      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e002      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_GPIO_Init+0x212>
 80046f0:	2300      	movs	r3, #0
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	f002 0203 	and.w	r2, r2, #3
 80046f8:	0092      	lsls	r2, r2, #2
 80046fa:	4093      	lsls	r3, r2
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004702:	4937      	ldr	r1, [pc, #220]	@ (80047e0 <HAL_GPIO_Init+0x300>)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004710:	4b3b      	ldr	r3, [pc, #236]	@ (8004800 <HAL_GPIO_Init+0x320>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	43db      	mvns	r3, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004734:	4a32      	ldr	r2, [pc, #200]	@ (8004800 <HAL_GPIO_Init+0x320>)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800473a:	4b31      	ldr	r3, [pc, #196]	@ (8004800 <HAL_GPIO_Init+0x320>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	43db      	mvns	r3, r3
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800475e:	4a28      	ldr	r2, [pc, #160]	@ (8004800 <HAL_GPIO_Init+0x320>)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004764:	4b26      	ldr	r3, [pc, #152]	@ (8004800 <HAL_GPIO_Init+0x320>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	43db      	mvns	r3, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004788:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_GPIO_Init+0x320>)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800478e:	4b1c      	ldr	r3, [pc, #112]	@ (8004800 <HAL_GPIO_Init+0x320>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047b2:	4a13      	ldr	r2, [pc, #76]	@ (8004800 <HAL_GPIO_Init+0x320>)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3301      	adds	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f ae91 	bne.w	80044f0 <HAL_GPIO_Init+0x10>
  }
}
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40010000 	.word	0x40010000
 80047e4:	48000400 	.word	0x48000400
 80047e8:	48000800 	.word	0x48000800
 80047ec:	48000c00 	.word	0x48000c00
 80047f0:	48001000 	.word	0x48001000
 80047f4:	48001400 	.word	0x48001400
 80047f8:	48001800 	.word	0x48001800
 80047fc:	48001c00 	.word	0x48001c00
 8004800:	40010400 	.word	0x40010400

08004804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	887b      	ldrh	r3, [r7, #2]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
 8004820:	e001      	b.n	8004826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004822:	2300      	movs	r3, #0
 8004824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004826:	7bfb      	ldrb	r3, [r7, #15]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
 8004840:	4613      	mov	r3, r2
 8004842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004844:	787b      	ldrb	r3, [r7, #1]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004850:	e002      	b.n	8004858 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800486e:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	4013      	ands	r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d006      	beq.n	8004888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800487a:	4a05      	ldr	r2, [pc, #20]	@ (8004890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff f8b4 	bl	80039f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40010400 	.word	0x40010400

08004894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004898:	4b0d      	ldr	r3, [pc, #52]	@ (80048d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a4:	d102      	bne.n	80048ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80048a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048aa:	e00b      	b.n	80048c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80048ac:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ba:	d102      	bne.n	80048c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80048bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048c0:	e000      	b.n	80048c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80048c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40007000 	.word	0x40007000

080048d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d141      	bne.n	8004966 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ee:	d131      	bne.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048f0:	4b47      	ldr	r3, [pc, #284]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f6:	4a46      	ldr	r2, [pc, #280]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004900:	4b43      	ldr	r3, [pc, #268]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004908:	4a41      	ldr	r2, [pc, #260]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800490e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004910:	4b40      	ldr	r3, [pc, #256]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2232      	movs	r2, #50	@ 0x32
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800491c:	fba2 2303 	umull	r2, r3, r2, r3
 8004920:	0c9b      	lsrs	r3, r3, #18
 8004922:	3301      	adds	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004926:	e002      	b.n	800492e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800492e:	4b38      	ldr	r3, [pc, #224]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d102      	bne.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f2      	bne.n	8004928 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004942:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494e:	d158      	bne.n	8004a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e057      	b.n	8004a04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004954:	4b2e      	ldr	r3, [pc, #184]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800495a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004960:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004964:	e04d      	b.n	8004a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800496c:	d141      	bne.n	80049f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800496e:	4b28      	ldr	r3, [pc, #160]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d131      	bne.n	80049e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800497c:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004982:	4a23      	ldr	r2, [pc, #140]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004988:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800498c:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004994:	4a1e      	ldr	r2, [pc, #120]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800499a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800499c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2232      	movs	r2, #50	@ 0x32
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	0c9b      	lsrs	r3, r3, #18
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b2:	e002      	b.n	80049ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049ba:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d102      	bne.n	80049ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f2      	bne.n	80049b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ce:	4b10      	ldr	r3, [pc, #64]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049da:	d112      	bne.n	8004a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e011      	b.n	8004a04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049f0:	e007      	b.n	8004a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049f2:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049fa:	4a05      	ldr	r2, [pc, #20]	@ (8004a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a00:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40007000 	.word	0x40007000
 8004a14:	20000218 	.word	0x20000218
 8004a18:	431bde83 	.word	0x431bde83

08004a1c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004a20:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a2a:	6053      	str	r3, [r2, #4]
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40007000 	.word	0x40007000

08004a3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f000 bc08 	b.w	8005260 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a50:	4b96      	ldr	r3, [pc, #600]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a5a:	4b94      	ldr	r3, [pc, #592]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80e4 	beq.w	8004c3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <HAL_RCC_OscConfig+0x4c>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	f040 808b 	bne.w	8004b96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	f040 8087 	bne.w	8004b96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a88:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x64>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e3df      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	4b81      	ldr	r3, [pc, #516]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <HAL_RCC_OscConfig+0x7e>
 8004ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ab8:	e005      	b.n	8004ac6 <HAL_RCC_OscConfig+0x8a>
 8004aba:	4b7c      	ldr	r3, [pc, #496]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d223      	bcs.n	8004b12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fdcc 	bl	800566c <RCC_SetFlashLatencyFromMSIRange>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e3c0      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ade:	4b73      	ldr	r3, [pc, #460]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a72      	ldr	r2, [pc, #456]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004ae4:	f043 0308 	orr.w	r3, r3, #8
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b70      	ldr	r3, [pc, #448]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	496d      	ldr	r1, [pc, #436]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004afc:	4b6b      	ldr	r3, [pc, #428]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	4968      	ldr	r1, [pc, #416]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
 8004b10:	e025      	b.n	8004b5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b12:	4b66      	ldr	r3, [pc, #408]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a65      	ldr	r2, [pc, #404]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	4b63      	ldr	r3, [pc, #396]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	4960      	ldr	r1, [pc, #384]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b30:	4b5e      	ldr	r3, [pc, #376]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	495b      	ldr	r1, [pc, #364]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd8c 	bl	800566c <RCC_SetFlashLatencyFromMSIRange>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e380      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b5e:	f000 fcc1 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b51      	ldr	r3, [pc, #324]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	4950      	ldr	r1, [pc, #320]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7a:	4a4e      	ldr	r2, [pc, #312]	@ (8004cb4 <HAL_RCC_OscConfig+0x278>)
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb8 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fb1a 	bl	80041bc <HAL_InitTick>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d052      	beq.n	8004c38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	e364      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d032      	beq.n	8004c04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b9e:	4b43      	ldr	r3, [pc, #268]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a42      	ldr	r2, [pc, #264]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004baa:	f7ff fb57 	bl	800425c <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bb2:	f7ff fb53 	bl	800425c <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e34d      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bc4:	4b39      	ldr	r3, [pc, #228]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bd0:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a35      	ldr	r2, [pc, #212]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004bd6:	f043 0308 	orr.w	r3, r3, #8
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b33      	ldr	r3, [pc, #204]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	4930      	ldr	r1, [pc, #192]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bee:	4b2f      	ldr	r3, [pc, #188]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	492b      	ldr	r1, [pc, #172]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
 8004c02:	e01a      	b.n	8004c3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c04:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a28      	ldr	r2, [pc, #160]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c10:	f7ff fb24 	bl	800425c <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c18:	f7ff fb20 	bl	800425c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e31a      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c2a:	4b20      	ldr	r3, [pc, #128]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0x1dc>
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d073      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_OscConfig+0x21c>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	d10e      	bne.n	8004c70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d10b      	bne.n	8004c70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d063      	beq.n	8004d2c <HAL_RCC_OscConfig+0x2f0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d15f      	bne.n	8004d2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e2f7      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c78:	d106      	bne.n	8004c88 <HAL_RCC_OscConfig+0x24c>
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e025      	b.n	8004cd4 <HAL_RCC_OscConfig+0x298>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c90:	d114      	bne.n	8004cbc <HAL_RCC_OscConfig+0x280>
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a05      	ldr	r2, [pc, #20]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a02      	ldr	r2, [pc, #8]	@ (8004cac <HAL_RCC_OscConfig+0x270>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e013      	b.n	8004cd4 <HAL_RCC_OscConfig+0x298>
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	0800ca54 	.word	0x0800ca54
 8004cb4:	20000218 	.word	0x20000218
 8004cb8:	2000021c 	.word	0x2000021c
 8004cbc:	4ba0      	ldr	r3, [pc, #640]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a9f      	ldr	r2, [pc, #636]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b9d      	ldr	r3, [pc, #628]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a9c      	ldr	r2, [pc, #624]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d013      	beq.n	8004d04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7ff fabe 	bl	800425c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7ff faba 	bl	800425c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	@ 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e2b4      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf6:	4b92      	ldr	r3, [pc, #584]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x2a8>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7ff faaa 	bl	800425c <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d0c:	f7ff faa6 	bl	800425c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	@ 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e2a0      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d1e:	4b88      	ldr	r3, [pc, #544]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x2d0>
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d060      	beq.n	8004dfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_OscConfig+0x310>
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d119      	bne.n	8004d7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d116      	bne.n	8004d7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d4c:	4b7c      	ldr	r3, [pc, #496]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_OscConfig+0x328>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e27d      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d64:	4b76      	ldr	r3, [pc, #472]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	4973      	ldr	r1, [pc, #460]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d78:	e040      	b.n	8004dfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d023      	beq.n	8004dca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d82:	4b6f      	ldr	r3, [pc, #444]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6e      	ldr	r2, [pc, #440]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7ff fa65 	bl	800425c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d96:	f7ff fa61 	bl	800425c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e25b      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004da8:	4b65      	ldr	r3, [pc, #404]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db4:	4b62      	ldr	r3, [pc, #392]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	061b      	lsls	r3, r3, #24
 8004dc2:	495f      	ldr	r1, [pc, #380]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]
 8004dc8:	e018      	b.n	8004dfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dca:	4b5d      	ldr	r3, [pc, #372]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a5c      	ldr	r2, [pc, #368]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7ff fa41 	bl	800425c <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dde:	f7ff fa3d 	bl	800425c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e237      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004df0:	4b53      	ldr	r3, [pc, #332]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d03c      	beq.n	8004e82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e10:	4b4b      	ldr	r3, [pc, #300]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e16:	4a4a      	ldr	r2, [pc, #296]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7ff fa1c 	bl	800425c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e28:	f7ff fa18 	bl	800425c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e212      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e3a:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ef      	beq.n	8004e28 <HAL_RCC_OscConfig+0x3ec>
 8004e48:	e01b      	b.n	8004e82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e50:	4a3b      	ldr	r2, [pc, #236]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5a:	f7ff f9ff 	bl	800425c <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e62:	f7ff f9fb 	bl	800425c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e1f5      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e74:	4b32      	ldr	r3, [pc, #200]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ef      	bne.n	8004e62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80a6 	beq.w	8004fdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e90:	2300      	movs	r3, #0
 8004e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e94:	4b2a      	ldr	r3, [pc, #168]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b27      	ldr	r3, [pc, #156]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea4:	4a26      	ldr	r2, [pc, #152]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eac:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ebc:	4b21      	ldr	r3, [pc, #132]	@ (8004f44 <HAL_RCC_OscConfig+0x508>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d118      	bne.n	8004efa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f44 <HAL_RCC_OscConfig+0x508>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f44 <HAL_RCC_OscConfig+0x508>)
 8004ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed4:	f7ff f9c2 	bl	800425c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004edc:	f7ff f9be 	bl	800425c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e1b8      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eee:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <HAL_RCC_OscConfig+0x508>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d108      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4d8>
 8004f02:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f08:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f12:	e029      	b.n	8004f68 <HAL_RCC_OscConfig+0x52c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b05      	cmp	r3, #5
 8004f1a:	d115      	bne.n	8004f48 <HAL_RCC_OscConfig+0x50c>
 8004f1c:	4b08      	ldr	r3, [pc, #32]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	4a07      	ldr	r2, [pc, #28]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f2c:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f32:	4a03      	ldr	r2, [pc, #12]	@ (8004f40 <HAL_RCC_OscConfig+0x504>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f3c:	e014      	b.n	8004f68 <HAL_RCC_OscConfig+0x52c>
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40007000 	.word	0x40007000
 8004f48:	4b9d      	ldr	r3, [pc, #628]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	4a9c      	ldr	r2, [pc, #624]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f58:	4b99      	ldr	r3, [pc, #612]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5e:	4a98      	ldr	r2, [pc, #608]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d016      	beq.n	8004f9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7ff f974 	bl	800425c <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7ff f970 	bl	800425c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e168      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8e:	4b8c      	ldr	r3, [pc, #560]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0ed      	beq.n	8004f78 <HAL_RCC_OscConfig+0x53c>
 8004f9c:	e015      	b.n	8004fca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9e:	f7ff f95d 	bl	800425c <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7ff f959 	bl	800425c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e151      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fbc:	4b80      	ldr	r3, [pc, #512]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ed      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fca:	7ffb      	ldrb	r3, [r7, #31]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d105      	bne.n	8004fdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd0:	4b7b      	ldr	r3, [pc, #492]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	4a7a      	ldr	r2, [pc, #488]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d03c      	beq.n	8005062 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01c      	beq.n	800502a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ff0:	4b73      	ldr	r3, [pc, #460]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ff6:	4a72      	ldr	r2, [pc, #456]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7ff f92c 	bl	800425c <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005008:	f7ff f928 	bl	800425c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e122      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800501a:	4b69      	ldr	r3, [pc, #420]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800501c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ef      	beq.n	8005008 <HAL_RCC_OscConfig+0x5cc>
 8005028:	e01b      	b.n	8005062 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800502a:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800502c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005030:	4a63      	ldr	r2, [pc, #396]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503a:	f7ff f90f 	bl	800425c <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005042:	f7ff f90b 	bl	800425c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e105      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005054:	4b5a      	ldr	r3, [pc, #360]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8005056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ef      	bne.n	8005042 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80f9 	beq.w	800525e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	2b02      	cmp	r3, #2
 8005072:	f040 80cf 	bne.w	8005214 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005076:	4b52      	ldr	r3, [pc, #328]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0203 	and.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	429a      	cmp	r2, r3
 8005088:	d12c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	3b01      	subs	r3, #1
 8005096:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d123      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d11b      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d113      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	3b01      	subs	r3, #1
 80050ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d109      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	3b01      	subs	r3, #1
 80050de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d071      	beq.n	80051c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d068      	beq.n	80051bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050ea:	4b35      	ldr	r3, [pc, #212]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d105      	bne.n	8005102 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050f6:	4b32      	ldr	r3, [pc, #200]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0ac      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005106:	4b2e      	ldr	r3, [pc, #184]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2d      	ldr	r2, [pc, #180]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800510c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005110:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005112:	f7ff f8a3 	bl	800425c <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511a:	f7ff f89f 	bl	800425c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e099      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512c:	4b24      	ldr	r3, [pc, #144]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005138:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	4b21      	ldr	r3, [pc, #132]	@ (80051c4 <HAL_RCC_OscConfig+0x788>)
 800513e:	4013      	ands	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005148:	3a01      	subs	r2, #1
 800514a:	0112      	lsls	r2, r2, #4
 800514c:	4311      	orrs	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005152:	0212      	lsls	r2, r2, #8
 8005154:	4311      	orrs	r1, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800515a:	0852      	lsrs	r2, r2, #1
 800515c:	3a01      	subs	r2, #1
 800515e:	0552      	lsls	r2, r2, #21
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005166:	0852      	lsrs	r2, r2, #1
 8005168:	3a01      	subs	r2, #1
 800516a:	0652      	lsls	r2, r2, #25
 800516c:	4311      	orrs	r1, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005172:	06d2      	lsls	r2, r2, #27
 8005174:	430a      	orrs	r2, r1
 8005176:	4912      	ldr	r1, [pc, #72]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8005178:	4313      	orrs	r3, r2
 800517a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800517c:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0f      	ldr	r2, [pc, #60]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 8005182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005186:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005188:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 800518e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005194:	f7ff f862 	bl	800425c <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519c:	f7ff f85e 	bl	800425c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e058      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ae:	4b04      	ldr	r3, [pc, #16]	@ (80051c0 <HAL_RCC_OscConfig+0x784>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ba:	e050      	b.n	800525e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e04f      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
 80051c0:	40021000 	.word	0x40021000
 80051c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c8:	4b27      	ldr	r3, [pc, #156]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d144      	bne.n	800525e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051d4:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a23      	ldr	r2, [pc, #140]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 80051da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051e0:	4b21      	ldr	r3, [pc, #132]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a20      	ldr	r2, [pc, #128]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 80051e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ec:	f7ff f836 	bl	800425c <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7ff f832 	bl	800425c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e02c      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005206:	4b18      	ldr	r3, [pc, #96]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x7b8>
 8005212:	e024      	b.n	800525e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b0c      	cmp	r3, #12
 8005218:	d01f      	beq.n	800525a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	4b13      	ldr	r3, [pc, #76]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a12      	ldr	r2, [pc, #72]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 8005220:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7ff f819 	bl	800425c <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522e:	f7ff f815 	bl	800425c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e00f      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005240:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	4905      	ldr	r1, [pc, #20]	@ (8005268 <HAL_RCC_OscConfig+0x82c>)
 8005252:	4b06      	ldr	r3, [pc, #24]	@ (800526c <HAL_RCC_OscConfig+0x830>)
 8005254:	4013      	ands	r3, r2
 8005256:	60cb      	str	r3, [r1, #12]
 8005258:	e001      	b.n	800525e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	feeefffc 	.word	0xfeeefffc

08005270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e11d      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005288:	4b90      	ldr	r3, [pc, #576]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d910      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005296:	4b8d      	ldr	r3, [pc, #564]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 020f 	bic.w	r2, r3, #15
 800529e:	498b      	ldr	r1, [pc, #556]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b89      	ldr	r3, [pc, #548]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e105      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	4b81      	ldr	r3, [pc, #516]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d908      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d4:	4b7e      	ldr	r3, [pc, #504]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	497b      	ldr	r1, [pc, #492]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d079      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d11e      	bne.n	8005338 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fa:	4b75      	ldr	r3, [pc, #468]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0dc      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800530a:	f000 fa09 	bl	8005720 <RCC_GetSysClockFreqFromPLLSource>
 800530e:	4603      	mov	r3, r0
 8005310:	4a70      	ldr	r2, [pc, #448]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d946      	bls.n	80053a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005316:	4b6e      	ldr	r3, [pc, #440]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d140      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005322:	4b6b      	ldr	r3, [pc, #428]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800532a:	4a69      	ldr	r2, [pc, #420]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800532c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005330:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005332:	2380      	movs	r3, #128	@ 0x80
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e035      	b.n	80053a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d107      	bne.n	8005350 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005340:	4b63      	ldr	r3, [pc, #396]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d115      	bne.n	8005378 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0b9      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005358:	4b5d      	ldr	r3, [pc, #372]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0ad      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005368:	4b59      	ldr	r3, [pc, #356]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0a5      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005378:	f000 f8b4 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 800537c:	4603      	mov	r3, r0
 800537e:	4a55      	ldr	r2, [pc, #340]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d90f      	bls.n	80053a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005384:	4b52      	ldr	r3, [pc, #328]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005390:	4b4f      	ldr	r3, [pc, #316]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005398:	4a4d      	ldr	r2, [pc, #308]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800539a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053a4:	4b4a      	ldr	r3, [pc, #296]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 0203 	bic.w	r2, r3, #3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4947      	ldr	r1, [pc, #284]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b6:	f7fe ff51 	bl	800425c <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053bc:	e00a      	b.n	80053d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053be:	f7fe ff4d 	bl	800425c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e077      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d4:	4b3e      	ldr	r3, [pc, #248]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 020c 	and.w	r2, r3, #12
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d1eb      	bne.n	80053be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b80      	cmp	r3, #128	@ 0x80
 80053ea:	d105      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053ec:	4b38      	ldr	r3, [pc, #224]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a37      	ldr	r2, [pc, #220]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80053f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d010      	beq.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	4b31      	ldr	r3, [pc, #196]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005410:	429a      	cmp	r2, r3
 8005412:	d208      	bcs.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005414:	4b2e      	ldr	r3, [pc, #184]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	492b      	ldr	r1, [pc, #172]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005422:	4313      	orrs	r3, r2
 8005424:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005426:	4b29      	ldr	r3, [pc, #164]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d210      	bcs.n	8005456 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 020f 	bic.w	r2, r3, #15
 800543c:	4923      	ldr	r1, [pc, #140]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005444:	4b21      	ldr	r3, [pc, #132]	@ (80054cc <HAL_RCC_ClockConfig+0x25c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d001      	beq.n	8005456 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e036      	b.n	80054c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005462:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	4918      	ldr	r1, [pc, #96]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005470:	4313      	orrs	r3, r2
 8005472:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005480:	4b13      	ldr	r3, [pc, #76]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4910      	ldr	r1, [pc, #64]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005490:	4313      	orrs	r3, r2
 8005492:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005494:	f000 f826 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	490c      	ldr	r1, [pc, #48]	@ (80054d8 <HAL_RCC_ClockConfig+0x268>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
 80054b0:	4a0a      	ldr	r2, [pc, #40]	@ (80054dc <HAL_RCC_ClockConfig+0x26c>)
 80054b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054b4:	4b0a      	ldr	r3, [pc, #40]	@ (80054e0 <HAL_RCC_ClockConfig+0x270>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fe7f 	bl	80041bc <HAL_InitTick>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40022000 	.word	0x40022000
 80054d0:	40021000 	.word	0x40021000
 80054d4:	04c4b400 	.word	0x04c4b400
 80054d8:	0800ca54 	.word	0x0800ca54
 80054dc:	20000218 	.word	0x20000218
 80054e0:	2000021c 	.word	0x2000021c

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	@ 0x24
 80054e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f2:	4b3e      	ldr	r3, [pc, #248]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054fc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x34>
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d121      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d11e      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005518:	4b34      	ldr	r3, [pc, #208]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005524:	4b31      	ldr	r3, [pc, #196]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e005      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005534:	4b2d      	ldr	r3, [pc, #180]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005540:	4a2b      	ldr	r2, [pc, #172]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10d      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005554:	e00a      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b04      	cmp	r3, #4
 800555a:	d102      	bne.n	8005562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800555c:	4b25      	ldr	r3, [pc, #148]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e004      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d101      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005568:	4b23      	ldr	r3, [pc, #140]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800556a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d134      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005572:	4b1e      	ldr	r3, [pc, #120]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d003      	beq.n	800558a <HAL_RCC_GetSysClockFreq+0xa6>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d003      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0xac>
 8005588:	e005      	b.n	8005596 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800558a:	4b1a      	ldr	r3, [pc, #104]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800558c:	617b      	str	r3, [r7, #20]
      break;
 800558e:	e005      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005592:	617b      	str	r3, [r7, #20]
      break;
 8005594:	e002      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	617b      	str	r3, [r7, #20]
      break;
 800559a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800559c:	4b13      	ldr	r3, [pc, #76]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	3301      	adds	r3, #1
 80055a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055aa:	4b10      	ldr	r3, [pc, #64]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	fb03 f202 	mul.w	r2, r3, r2
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c2:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	0e5b      	lsrs	r3, r3, #25
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	3301      	adds	r3, #1
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055dc:	69bb      	ldr	r3, [r7, #24]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3724      	adds	r7, #36	@ 0x24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
 80055f0:	0800ca6c 	.word	0x0800ca6c
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	007a1200 	.word	0x007a1200

080055fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <HAL_RCC_GetHCLKFreq+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000218 	.word	0x20000218

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005618:	f7ff fff0 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4904      	ldr	r1, [pc, #16]	@ (800563c <HAL_RCC_GetPCLK1Freq+0x28>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	0800ca64 	.word	0x0800ca64

08005640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005644:	f7ff ffda 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0adb      	lsrs	r3, r3, #11
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4904      	ldr	r1, [pc, #16]	@ (8005668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	0800ca64 	.word	0x0800ca64

0800566c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005678:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800567a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005684:	f7ff f906 	bl	8004894 <HAL_PWREx_GetVoltageRange>
 8005688:	6178      	str	r0, [r7, #20]
 800568a:	e014      	b.n	80056b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800568c:	4b22      	ldr	r3, [pc, #136]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005690:	4a21      	ldr	r2, [pc, #132]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005696:	6593      	str	r3, [r2, #88]	@ 0x58
 8005698:	4b1f      	ldr	r3, [pc, #124]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056a4:	f7ff f8f6 	bl	8004894 <HAL_PWREx_GetVoltageRange>
 80056a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056bc:	d10b      	bne.n	80056d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b80      	cmp	r3, #128	@ 0x80
 80056c2:	d913      	bls.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80056c8:	d902      	bls.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056ca:	2302      	movs	r3, #2
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	e00d      	b.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056d0:	2301      	movs	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	e00a      	b.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80056da:	d902      	bls.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80056dc:	2302      	movs	r3, #2
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	e004      	b.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b70      	cmp	r3, #112	@ 0x70
 80056e6:	d101      	bne.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056e8:	2301      	movs	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f023 020f 	bic.w	r2, r3, #15
 80056f4:	4909      	ldr	r1, [pc, #36]	@ (800571c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056fc:	4b07      	ldr	r3, [pc, #28]	@ (800571c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d001      	beq.n	800570e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	40022000 	.word	0x40022000

08005720 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005726:	4b2d      	ldr	r3, [pc, #180]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d00b      	beq.n	800574e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b03      	cmp	r3, #3
 800573a:	d825      	bhi.n	8005788 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d008      	beq.n	8005754 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d11f      	bne.n	8005788 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005748:	4b25      	ldr	r3, [pc, #148]	@ (80057e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800574a:	613b      	str	r3, [r7, #16]
    break;
 800574c:	e01f      	b.n	800578e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800574e:	4b25      	ldr	r3, [pc, #148]	@ (80057e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005750:	613b      	str	r3, [r7, #16]
    break;
 8005752:	e01c      	b.n	800578e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005754:	4b21      	ldr	r3, [pc, #132]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005760:	4b1e      	ldr	r3, [pc, #120]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e005      	b.n	800577c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005770:	4b1a      	ldr	r3, [pc, #104]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800577c:	4a1a      	ldr	r2, [pc, #104]	@ (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005784:	613b      	str	r3, [r7, #16]
    break;
 8005786:	e002      	b.n	800578e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
    break;
 800578c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800578e:	4b13      	ldr	r3, [pc, #76]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	3301      	adds	r3, #1
 800579a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800579c:	4b0f      	ldr	r3, [pc, #60]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	fb03 f202 	mul.w	r2, r3, r2
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057b4:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	0e5b      	lsrs	r3, r3, #25
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80057ce:	683b      	ldr	r3, [r7, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40021000 	.word	0x40021000
 80057e0:	00f42400 	.word	0x00f42400
 80057e4:	007a1200 	.word	0x007a1200
 80057e8:	0800ca6c 	.word	0x0800ca6c

080057ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f4:	2300      	movs	r3, #0
 80057f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f8:	2300      	movs	r3, #0
 80057fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005804:	2b00      	cmp	r3, #0
 8005806:	d040      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800580c:	2b80      	cmp	r3, #128	@ 0x80
 800580e:	d02a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005810:	2b80      	cmp	r3, #128	@ 0x80
 8005812:	d825      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005814:	2b60      	cmp	r3, #96	@ 0x60
 8005816:	d026      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005818:	2b60      	cmp	r3, #96	@ 0x60
 800581a:	d821      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800581c:	2b40      	cmp	r3, #64	@ 0x40
 800581e:	d006      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005820:	2b40      	cmp	r3, #64	@ 0x40
 8005822:	d81d      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005828:	2b20      	cmp	r3, #32
 800582a:	d010      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800582c:	e018      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800582e:	4b89      	ldr	r3, [pc, #548]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	4a88      	ldr	r2, [pc, #544]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005838:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800583a:	e015      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3304      	adds	r3, #4
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb02 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800584c:	e00c      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3320      	adds	r3, #32
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fbed 	bl	8006034 <RCCEx_PLLSAI2_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800585e:	e003      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	74fb      	strb	r3, [r7, #19]
      break;
 8005864:	e000      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800586e:	4b79      	ldr	r3, [pc, #484]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005874:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800587c:	4975      	ldr	r1, [pc, #468]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005884:	e001      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d047      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800589e:	d030      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80058a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a4:	d82a      	bhi.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80058a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058aa:	d02a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80058ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b0:	d824      	bhi.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80058b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b6:	d008      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80058b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058bc:	d81e      	bhi.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c6:	d010      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80058c8:	e018      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058ca:	4b62      	ldr	r3, [pc, #392]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4a61      	ldr	r2, [pc, #388]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058d6:	e015      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3304      	adds	r3, #4
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fab4 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058e8:	e00c      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3320      	adds	r3, #32
 80058ee:	2100      	movs	r1, #0
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fb9f 	bl	8006034 <RCCEx_PLLSAI2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058fa:	e003      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	74fb      	strb	r3, [r7, #19]
      break;
 8005900:	e000      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800590a:	4b52      	ldr	r3, [pc, #328]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800590c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005918:	494e      	ldr	r1, [pc, #312]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005920:	e001      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 809f 	beq.w	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005934:	2300      	movs	r3, #0
 8005936:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005938:	4b46      	ldr	r3, [pc, #280]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800593a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00d      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005952:	4a40      	ldr	r2, [pc, #256]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005958:	6593      	str	r3, [r2, #88]	@ 0x58
 800595a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005966:	2301      	movs	r3, #1
 8005968:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800596a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005974:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005976:	f7fe fc71 	bl	800425c <HAL_GetTick>
 800597a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800597c:	e009      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597e:	f7fe fc6d 	bl	800425c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d902      	bls.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	74fb      	strb	r3, [r7, #19]
        break;
 8005990:	e005      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005992:	4b31      	ldr	r3, [pc, #196]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0ef      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d15b      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01f      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d019      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059c2:	4b24      	ldr	r3, [pc, #144]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059ce:	4b21      	ldr	r3, [pc, #132]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059ee:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d016      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fe fc2c 	bl	800425c <HAL_GetTick>
 8005a04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a06:	e00b      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a08:	f7fe fc28 	bl	800425c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d902      	bls.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	74fb      	strb	r3, [r7, #19]
            break;
 8005a1e:	e006      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a20:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ec      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10c      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a34:	4b07      	ldr	r3, [pc, #28]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a44:	4903      	ldr	r1, [pc, #12]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a4c:	e008      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a4e:	7cfb      	ldrb	r3, [r7, #19]
 8005a50:	74bb      	strb	r3, [r7, #18]
 8005a52:	e005      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a60:	7c7b      	ldrb	r3, [r7, #17]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d105      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a66:	4ba0      	ldr	r3, [pc, #640]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6a:	4a9f      	ldr	r2, [pc, #636]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a7e:	4b9a      	ldr	r3, [pc, #616]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a84:	f023 0203 	bic.w	r2, r3, #3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8c:	4996      	ldr	r1, [pc, #600]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aa0:	4b91      	ldr	r3, [pc, #580]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa6:	f023 020c 	bic.w	r2, r3, #12
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	498e      	ldr	r1, [pc, #568]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ac2:	4b89      	ldr	r3, [pc, #548]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad0:	4985      	ldr	r1, [pc, #532]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ae4:	4b80      	ldr	r3, [pc, #512]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af2:	497d      	ldr	r1, [pc, #500]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b06:	4b78      	ldr	r3, [pc, #480]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b14:	4974      	ldr	r1, [pc, #464]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b28:	4b6f      	ldr	r3, [pc, #444]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b36:	496c      	ldr	r1, [pc, #432]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b4a:	4b67      	ldr	r3, [pc, #412]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b58:	4963      	ldr	r1, [pc, #396]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b7a:	495b      	ldr	r1, [pc, #364]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b8e:	4b56      	ldr	r3, [pc, #344]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9c:	4952      	ldr	r1, [pc, #328]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	494a      	ldr	r1, [pc, #296]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bd2:	4b45      	ldr	r3, [pc, #276]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be0:	4941      	ldr	r1, [pc, #260]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bfa:	f023 0203 	bic.w	r2, r3, #3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c02:	4939      	ldr	r1, [pc, #228]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d028      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c16:	4b34      	ldr	r3, [pc, #208]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c24:	4930      	ldr	r1, [pc, #192]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c34:	d106      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c36:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c40:	60d3      	str	r3, [r2, #12]
 8005c42:	e011      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c4c:	d10c      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3304      	adds	r3, #4
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f8f9 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c5e:	7cfb      	ldrb	r3, [r7, #19]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d04d      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c7c:	d108      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c84:	4a18      	ldr	r2, [pc, #96]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c8a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005c8e:	e012      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005c90:	4b15      	ldr	r3, [pc, #84]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c96:	4a14      	ldr	r2, [pc, #80]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005ca0:	4b11      	ldr	r3, [pc, #68]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cae:	490e      	ldr	r1, [pc, #56]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cbe:	d106      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cc0:	4b09      	ldr	r3, [pc, #36]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4a08      	ldr	r2, [pc, #32]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cca:	60d3      	str	r3, [r2, #12]
 8005ccc:	e020      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cd6:	d109      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cd8:	4b03      	ldr	r3, [pc, #12]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4a02      	ldr	r2, [pc, #8]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce2:	60d3      	str	r3, [r2, #12]
 8005ce4:	e014      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f8a5 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d06:	7cfb      	ldrb	r3, [r7, #19]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d028      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d2a:	4947      	ldr	r1, [pc, #284]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d3c:	4b42      	ldr	r3, [pc, #264]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a41      	ldr	r2, [pc, #260]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d46:	60d3      	str	r3, [r2, #12]
 8005d48:	e011      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d52:	d10c      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f876 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005d6a:	7cfb      	ldrb	r3, [r7, #19]
 8005d6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d01e      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d7a:	4b33      	ldr	r3, [pc, #204]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d80:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8a:	492f      	ldr	r1, [pc, #188]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3304      	adds	r3, #4
 8005da2:	2102      	movs	r1, #2
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f851 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dae:	7cfb      	ldrb	r3, [r7, #19]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005db4:	7cfb      	ldrb	r3, [r7, #19]
 8005db6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dc4:	4b20      	ldr	r3, [pc, #128]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dca:	f023 0204 	bic.w	r2, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd4:	491c      	ldr	r1, [pc, #112]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005de8:	4b17      	ldr	r3, [pc, #92]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dee:	f023 0218 	bic.w	r2, r3, #24
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df8:	4913      	ldr	r1, [pc, #76]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d017      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e1c:	490a      	ldr	r1, [pc, #40]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e30:	4b05      	ldr	r3, [pc, #20]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	4a04      	ldr	r2, [pc, #16]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000

08005e4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e5a:	4b72      	ldr	r3, [pc, #456]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e66:	4b6f      	ldr	r3, [pc, #444]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0203 	and.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d103      	bne.n	8005e7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
       ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d142      	bne.n	8005f04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
 8005e82:	e03f      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d018      	beq.n	8005ebe <RCCEx_PLLSAI1_Config+0x72>
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d825      	bhi.n	8005edc <RCCEx_PLLSAI1_Config+0x90>
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d002      	beq.n	8005e9a <RCCEx_PLLSAI1_Config+0x4e>
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d009      	beq.n	8005eac <RCCEx_PLLSAI1_Config+0x60>
 8005e98:	e020      	b.n	8005edc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e9a:	4b62      	ldr	r3, [pc, #392]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11d      	bne.n	8005ee2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eaa:	e01a      	b.n	8005ee2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eac:	4b5d      	ldr	r3, [pc, #372]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d116      	bne.n	8005ee6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ebc:	e013      	b.n	8005ee6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ebe:	4b59      	ldr	r3, [pc, #356]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eca:	4b56      	ldr	r3, [pc, #344]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eda:	e006      	b.n	8005eea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee0:	e004      	b.n	8005eec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ee2:	bf00      	nop
 8005ee4:	e002      	b.n	8005eec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ee6:	bf00      	nop
 8005ee8:	e000      	b.n	8005eec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005eea:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d108      	bne.n	8005f04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f023 0203 	bic.w	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4949      	ldr	r1, [pc, #292]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 8086 	bne.w	8006018 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f0c:	4b45      	ldr	r3, [pc, #276]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a44      	ldr	r2, [pc, #272]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f18:	f7fe f9a0 	bl	800425c <HAL_GetTick>
 8005f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f1e:	e009      	b.n	8005f34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f20:	f7fe f99c 	bl	800425c <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d902      	bls.n	8005f34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	73fb      	strb	r3, [r7, #15]
        break;
 8005f32:	e005      	b.n	8005f40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f34:	4b3b      	ldr	r3, [pc, #236]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ef      	bne.n	8005f20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d168      	bne.n	8006018 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d113      	bne.n	8005f74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f4c:	4b35      	ldr	r3, [pc, #212]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	4b35      	ldr	r3, [pc, #212]	@ (8006028 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6892      	ldr	r2, [r2, #8]
 8005f58:	0211      	lsls	r1, r2, #8
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68d2      	ldr	r2, [r2, #12]
 8005f5e:	06d2      	lsls	r2, r2, #27
 8005f60:	4311      	orrs	r1, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6852      	ldr	r2, [r2, #4]
 8005f66:	3a01      	subs	r2, #1
 8005f68:	0112      	lsls	r2, r2, #4
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	492d      	ldr	r1, [pc, #180]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	610b      	str	r3, [r1, #16]
 8005f72:	e02d      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d115      	bne.n	8005fa6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800602c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6892      	ldr	r2, [r2, #8]
 8005f86:	0211      	lsls	r1, r2, #8
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6912      	ldr	r2, [r2, #16]
 8005f8c:	0852      	lsrs	r2, r2, #1
 8005f8e:	3a01      	subs	r2, #1
 8005f90:	0552      	lsls	r2, r2, #21
 8005f92:	4311      	orrs	r1, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6852      	ldr	r2, [r2, #4]
 8005f98:	3a01      	subs	r2, #1
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	4921      	ldr	r1, [pc, #132]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	610b      	str	r3, [r1, #16]
 8005fa4:	e014      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	4b21      	ldr	r3, [pc, #132]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6892      	ldr	r2, [r2, #8]
 8005fb2:	0211      	lsls	r1, r2, #8
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6952      	ldr	r2, [r2, #20]
 8005fb8:	0852      	lsrs	r2, r2, #1
 8005fba:	3a01      	subs	r2, #1
 8005fbc:	0652      	lsls	r2, r2, #25
 8005fbe:	4311      	orrs	r1, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6852      	ldr	r2, [r2, #4]
 8005fc4:	3a01      	subs	r2, #1
 8005fc6:	0112      	lsls	r2, r2, #4
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	4916      	ldr	r1, [pc, #88]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fd0:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a13      	ldr	r2, [pc, #76]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fe f93e 	bl	800425c <HAL_GetTick>
 8005fe0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fe2:	e009      	b.n	8005ff8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fe4:	f7fe f93a 	bl	800425c <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d902      	bls.n	8005ff8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ff6:	e005      	b.n	8006004 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0ef      	beq.n	8005fe4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800600a:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	4904      	ldr	r1, [pc, #16]	@ (8006024 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006014:	4313      	orrs	r3, r2
 8006016:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	07ff800f 	.word	0x07ff800f
 800602c:	ff9f800f 	.word	0xff9f800f
 8006030:	f9ff800f 	.word	0xf9ff800f

08006034 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006042:	4b72      	ldr	r3, [pc, #456]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00e      	beq.n	800606c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800604e:	4b6f      	ldr	r3, [pc, #444]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0203 	and.w	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d103      	bne.n	8006066 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
       ||
 8006062:	2b00      	cmp	r3, #0
 8006064:	d142      	bne.n	80060ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
 800606a:	e03f      	b.n	80060ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d018      	beq.n	80060a6 <RCCEx_PLLSAI2_Config+0x72>
 8006074:	2b03      	cmp	r3, #3
 8006076:	d825      	bhi.n	80060c4 <RCCEx_PLLSAI2_Config+0x90>
 8006078:	2b01      	cmp	r3, #1
 800607a:	d002      	beq.n	8006082 <RCCEx_PLLSAI2_Config+0x4e>
 800607c:	2b02      	cmp	r3, #2
 800607e:	d009      	beq.n	8006094 <RCCEx_PLLSAI2_Config+0x60>
 8006080:	e020      	b.n	80060c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006082:	4b62      	ldr	r3, [pc, #392]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d11d      	bne.n	80060ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006092:	e01a      	b.n	80060ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006094:	4b5d      	ldr	r3, [pc, #372]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800609c:	2b00      	cmp	r3, #0
 800609e:	d116      	bne.n	80060ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a4:	e013      	b.n	80060ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060a6:	4b59      	ldr	r3, [pc, #356]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10f      	bne.n	80060d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060b2:	4b56      	ldr	r3, [pc, #344]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060c2:	e006      	b.n	80060d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e004      	b.n	80060d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d108      	bne.n	80060ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80060da:	4b4c      	ldr	r3, [pc, #304]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f023 0203 	bic.w	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4949      	ldr	r1, [pc, #292]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 8086 	bne.w	8006200 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060f4:	4b45      	ldr	r3, [pc, #276]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a44      	ldr	r2, [pc, #272]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006100:	f7fe f8ac 	bl	800425c <HAL_GetTick>
 8006104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006106:	e009      	b.n	800611c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006108:	f7fe f8a8 	bl	800425c <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d902      	bls.n	800611c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	73fb      	strb	r3, [r7, #15]
        break;
 800611a:	e005      	b.n	8006128 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800611c:	4b3b      	ldr	r3, [pc, #236]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ef      	bne.n	8006108 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d168      	bne.n	8006200 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d113      	bne.n	800615c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006134:	4b35      	ldr	r3, [pc, #212]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	4b35      	ldr	r3, [pc, #212]	@ (8006210 <RCCEx_PLLSAI2_Config+0x1dc>)
 800613a:	4013      	ands	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6892      	ldr	r2, [r2, #8]
 8006140:	0211      	lsls	r1, r2, #8
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68d2      	ldr	r2, [r2, #12]
 8006146:	06d2      	lsls	r2, r2, #27
 8006148:	4311      	orrs	r1, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6852      	ldr	r2, [r2, #4]
 800614e:	3a01      	subs	r2, #1
 8006150:	0112      	lsls	r2, r2, #4
 8006152:	430a      	orrs	r2, r1
 8006154:	492d      	ldr	r1, [pc, #180]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006156:	4313      	orrs	r3, r2
 8006158:	614b      	str	r3, [r1, #20]
 800615a:	e02d      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d115      	bne.n	800618e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006162:	4b2a      	ldr	r3, [pc, #168]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	4b2b      	ldr	r3, [pc, #172]	@ (8006214 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006168:	4013      	ands	r3, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6892      	ldr	r2, [r2, #8]
 800616e:	0211      	lsls	r1, r2, #8
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6912      	ldr	r2, [r2, #16]
 8006174:	0852      	lsrs	r2, r2, #1
 8006176:	3a01      	subs	r2, #1
 8006178:	0552      	lsls	r2, r2, #21
 800617a:	4311      	orrs	r1, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6852      	ldr	r2, [r2, #4]
 8006180:	3a01      	subs	r2, #1
 8006182:	0112      	lsls	r2, r2, #4
 8006184:	430a      	orrs	r2, r1
 8006186:	4921      	ldr	r1, [pc, #132]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006188:	4313      	orrs	r3, r2
 800618a:	614b      	str	r3, [r1, #20]
 800618c:	e014      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800618e:	4b1f      	ldr	r3, [pc, #124]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006194:	4013      	ands	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6892      	ldr	r2, [r2, #8]
 800619a:	0211      	lsls	r1, r2, #8
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6952      	ldr	r2, [r2, #20]
 80061a0:	0852      	lsrs	r2, r2, #1
 80061a2:	3a01      	subs	r2, #1
 80061a4:	0652      	lsls	r2, r2, #25
 80061a6:	4311      	orrs	r1, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6852      	ldr	r2, [r2, #4]
 80061ac:	3a01      	subs	r2, #1
 80061ae:	0112      	lsls	r2, r2, #4
 80061b0:	430a      	orrs	r2, r1
 80061b2:	4916      	ldr	r1, [pc, #88]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061b8:	4b14      	ldr	r3, [pc, #80]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a13      	ldr	r2, [pc, #76]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c4:	f7fe f84a 	bl	800425c <HAL_GetTick>
 80061c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061ca:	e009      	b.n	80061e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061cc:	f7fe f846 	bl	800425c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d902      	bls.n	80061e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	73fb      	strb	r3, [r7, #15]
          break;
 80061de:	e005      	b.n	80061ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061e0:	4b0a      	ldr	r3, [pc, #40]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ef      	beq.n	80061cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061f2:	4b06      	ldr	r3, [pc, #24]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	4904      	ldr	r1, [pc, #16]	@ (800620c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40021000 	.word	0x40021000
 8006210:	07ff800f 	.word	0x07ff800f
 8006214:	ff9f800f 	.word	0xff9f800f
 8006218:	f9ff800f 	.word	0xf9ff800f

0800621c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e095      	b.n	800635a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d108      	bne.n	8006248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800623e:	d009      	beq.n	8006254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	61da      	str	r2, [r3, #28]
 8006246:	e005      	b.n	8006254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fd fce8 	bl	8003c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800628a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006294:	d902      	bls.n	800629c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	e002      	b.n	80062a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800629c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062aa:	d007      	beq.n	80062bc <HAL_SPI_Init+0xa0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062fe:	ea42 0103 	orr.w	r1, r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	f003 0204 	and.w	r2, r3, #4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006338:	ea42 0103 	orr.w	r1, r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006372:	f7fd ff73 	bl	800425c <HAL_GetTick>
 8006376:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	d001      	beq.n	800638c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
 800638a:	e15c      	b.n	8006646 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_SPI_Transmit+0x36>
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e154      	b.n	8006646 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_SPI_Transmit+0x48>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e14d      	b.n	8006646 <HAL_SPI_Transmit+0x2e4>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2203      	movs	r2, #3
 80063b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063fc:	d10f      	bne.n	800641e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800640c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800641c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d007      	beq.n	800643c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800643a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006444:	d952      	bls.n	80064ec <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_Transmit+0xf2>
 800644e:	8b7b      	ldrh	r3, [r7, #26]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d145      	bne.n	80064e0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	881a      	ldrh	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006464:	1c9a      	adds	r2, r3, #2
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006478:	e032      	b.n	80064e0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d112      	bne.n	80064ae <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648c:	881a      	ldrh	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	1c9a      	adds	r2, r3, #2
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064ac:	e018      	b.n	80064e0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ae:	f7fd fed5 	bl	800425c <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d803      	bhi.n	80064c6 <HAL_SPI_Transmit+0x164>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c4:	d102      	bne.n	80064cc <HAL_SPI_Transmit+0x16a>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e0b2      	b.n	8006646 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1c7      	bne.n	800647a <HAL_SPI_Transmit+0x118>
 80064ea:	e083      	b.n	80065f4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_Transmit+0x198>
 80064f4:	8b7b      	ldrh	r3, [r7, #26]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d177      	bne.n	80065ea <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d912      	bls.n	800652a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	881a      	ldrh	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	1c9a      	adds	r2, r3, #2
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b02      	subs	r3, #2
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006528:	e05f      	b.n	80065ea <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	7812      	ldrb	r2, [r2, #0]
 8006536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006550:	e04b      	b.n	80065ea <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d12b      	bne.n	80065b8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b01      	cmp	r3, #1
 8006568:	d912      	bls.n	8006590 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	881a      	ldrh	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	1c9a      	adds	r2, r3, #2
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b02      	subs	r3, #2
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800658e:	e02c      	b.n	80065ea <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065b6:	e018      	b.n	80065ea <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b8:	f7fd fe50 	bl	800425c <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d803      	bhi.n	80065d0 <HAL_SPI_Transmit+0x26e>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ce:	d102      	bne.n	80065d6 <HAL_SPI_Transmit+0x274>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e02d      	b.n	8006646 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ae      	bne.n	8006552 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f947 	bl	800688c <SPI_EndRxTxTransaction>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006644:	2300      	movs	r3, #0
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006660:	f7fd fdfc 	bl	800425c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4413      	add	r3, r2
 800666e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006670:	f7fd fdf4 	bl	800425c <HAL_GetTick>
 8006674:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006676:	4b39      	ldr	r3, [pc, #228]	@ (800675c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	015b      	lsls	r3, r3, #5
 800667c:	0d1b      	lsrs	r3, r3, #20
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	fb02 f303 	mul.w	r3, r2, r3
 8006684:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006686:	e054      	b.n	8006732 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800668e:	d050      	beq.n	8006732 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006690:	f7fd fde4 	bl	800425c <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	429a      	cmp	r2, r3
 800669e:	d902      	bls.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d13d      	bne.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066be:	d111      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c8:	d004      	beq.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d2:	d107      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ec:	d10f      	bne.n	800670e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800670c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e017      	b.n	8006752 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	3b01      	subs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	429a      	cmp	r2, r3
 800674e:	d19b      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000218 	.word	0x20000218

08006760 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	@ 0x28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006772:	f7fd fd73 	bl	800425c <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	4413      	add	r3, r2
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006782:	f7fd fd6b 	bl	800425c <HAL_GetTick>
 8006786:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006790:	4b3d      	ldr	r3, [pc, #244]	@ (8006888 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	00da      	lsls	r2, r3, #3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	0d1b      	lsrs	r3, r3, #20
 80067a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067a8:	e060      	b.n	800686c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067b0:	d107      	bne.n	80067c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067c8:	d050      	beq.n	800686c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067ca:	f7fd fd47 	bl	800425c <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d902      	bls.n	80067e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d13d      	bne.n	800685c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067f8:	d111      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006802:	d004      	beq.n	800680e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680c:	d107      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800681c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006826:	d10f      	bne.n	8006848 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006846:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e010      	b.n	800687e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	3b01      	subs	r3, #1
 800686a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4013      	ands	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d196      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3728      	adds	r7, #40	@ 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000218 	.word	0x20000218

0800688c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2200      	movs	r2, #0
 80068a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff ff5b 	bl	8006760 <SPI_WaitFifoStateUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e027      	b.n	8006910 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2200      	movs	r2, #0
 80068c8:	2180      	movs	r1, #128	@ 0x80
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fec0 	bl	8006650 <SPI_WaitFlagStateUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068da:	f043 0220 	orr.w	r2, r3, #32
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e014      	b.n	8006910 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff ff34 	bl	8006760 <SPI_WaitFifoStateUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e000      	b.n	8006910 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e049      	b.n	80069be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fd f9c2 	bl	8003cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f000 fc68 	bl	800722c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e049      	b.n	8006a6c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f841 	bl	8006a74 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f000 fc11 	bl	800722c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d109      	bne.n	8006ab0 <HAL_TIM_OC_Start_IT+0x28>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e03c      	b.n	8006b2a <HAL_TIM_OC_Start_IT+0xa2>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d109      	bne.n	8006aca <HAL_TIM_OC_Start_IT+0x42>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	e02f      	b.n	8006b2a <HAL_TIM_OC_Start_IT+0xa2>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d109      	bne.n	8006ae4 <HAL_TIM_OC_Start_IT+0x5c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	bf14      	ite	ne
 8006adc:	2301      	movne	r3, #1
 8006ade:	2300      	moveq	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	e022      	b.n	8006b2a <HAL_TIM_OC_Start_IT+0xa2>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b0c      	cmp	r3, #12
 8006ae8:	d109      	bne.n	8006afe <HAL_TIM_OC_Start_IT+0x76>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	bf14      	ite	ne
 8006af6:	2301      	movne	r3, #1
 8006af8:	2300      	moveq	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	e015      	b.n	8006b2a <HAL_TIM_OC_Start_IT+0xa2>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d109      	bne.n	8006b18 <HAL_TIM_OC_Start_IT+0x90>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	bf14      	ite	ne
 8006b10:	2301      	movne	r3, #1
 8006b12:	2300      	moveq	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	e008      	b.n	8006b2a <HAL_TIM_OC_Start_IT+0xa2>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	bf14      	ite	ne
 8006b24:	2301      	movne	r3, #1
 8006b26:	2300      	moveq	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e0e7      	b.n	8006d02 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <HAL_TIM_OC_Start_IT+0xba>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b40:	e023      	b.n	8006b8a <HAL_TIM_OC_Start_IT+0x102>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_OC_Start_IT+0xca>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b50:	e01b      	b.n	8006b8a <HAL_TIM_OC_Start_IT+0x102>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d104      	bne.n	8006b62 <HAL_TIM_OC_Start_IT+0xda>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b60:	e013      	b.n	8006b8a <HAL_TIM_OC_Start_IT+0x102>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d104      	bne.n	8006b72 <HAL_TIM_OC_Start_IT+0xea>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b70:	e00b      	b.n	8006b8a <HAL_TIM_OC_Start_IT+0x102>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_OC_Start_IT+0xfa>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b80:	e003      	b.n	8006b8a <HAL_TIM_OC_Start_IT+0x102>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b0c      	cmp	r3, #12
 8006b8e:	d841      	bhi.n	8006c14 <HAL_TIM_OC_Start_IT+0x18c>
 8006b90:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <HAL_TIM_OC_Start_IT+0x110>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006bcd 	.word	0x08006bcd
 8006b9c:	08006c15 	.word	0x08006c15
 8006ba0:	08006c15 	.word	0x08006c15
 8006ba4:	08006c15 	.word	0x08006c15
 8006ba8:	08006bdf 	.word	0x08006bdf
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006c15 	.word	0x08006c15
 8006bb4:	08006c15 	.word	0x08006c15
 8006bb8:	08006bf1 	.word	0x08006bf1
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006c03 	.word	0x08006c03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0202 	orr.w	r2, r2, #2
 8006bda:	60da      	str	r2, [r3, #12]
      break;
 8006bdc:	e01d      	b.n	8006c1a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0204 	orr.w	r2, r2, #4
 8006bec:	60da      	str	r2, [r3, #12]
      break;
 8006bee:	e014      	b.n	8006c1a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	60da      	str	r2, [r3, #12]
      break;
 8006c00:	e00b      	b.n	8006c1a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0210 	orr.w	r2, r2, #16
 8006c10:	60da      	str	r2, [r3, #12]
      break;
 8006c12:	e002      	b.n	8006c1a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
      break;
 8006c18:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d16f      	bne.n	8006d00 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2201      	movs	r2, #1
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ff15 	bl	8007a58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a36      	ldr	r2, [pc, #216]	@ (8006d0c <HAL_TIM_OC_Start_IT+0x284>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d013      	beq.n	8006c60 <HAL_TIM_OC_Start_IT+0x1d8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a34      	ldr	r2, [pc, #208]	@ (8006d10 <HAL_TIM_OC_Start_IT+0x288>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00e      	beq.n	8006c60 <HAL_TIM_OC_Start_IT+0x1d8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a33      	ldr	r2, [pc, #204]	@ (8006d14 <HAL_TIM_OC_Start_IT+0x28c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_TIM_OC_Start_IT+0x1d8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a31      	ldr	r2, [pc, #196]	@ (8006d18 <HAL_TIM_OC_Start_IT+0x290>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <HAL_TIM_OC_Start_IT+0x1d8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a30      	ldr	r2, [pc, #192]	@ (8006d1c <HAL_TIM_OC_Start_IT+0x294>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d101      	bne.n	8006c64 <HAL_TIM_OC_Start_IT+0x1dc>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <HAL_TIM_OC_Start_IT+0x1de>
 8006c64:	2300      	movs	r3, #0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d007      	beq.n	8006c7a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a23      	ldr	r2, [pc, #140]	@ (8006d0c <HAL_TIM_OC_Start_IT+0x284>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d01d      	beq.n	8006cc0 <HAL_TIM_OC_Start_IT+0x238>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c8c:	d018      	beq.n	8006cc0 <HAL_TIM_OC_Start_IT+0x238>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a23      	ldr	r2, [pc, #140]	@ (8006d20 <HAL_TIM_OC_Start_IT+0x298>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <HAL_TIM_OC_Start_IT+0x238>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a21      	ldr	r2, [pc, #132]	@ (8006d24 <HAL_TIM_OC_Start_IT+0x29c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_TIM_OC_Start_IT+0x238>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a20      	ldr	r2, [pc, #128]	@ (8006d28 <HAL_TIM_OC_Start_IT+0x2a0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_TIM_OC_Start_IT+0x238>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <HAL_TIM_OC_Start_IT+0x288>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <HAL_TIM_OC_Start_IT+0x238>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a16      	ldr	r2, [pc, #88]	@ (8006d14 <HAL_TIM_OC_Start_IT+0x28c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d115      	bne.n	8006cec <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	4b19      	ldr	r3, [pc, #100]	@ (8006d2c <HAL_TIM_OC_Start_IT+0x2a4>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b06      	cmp	r3, #6
 8006cd0:	d015      	beq.n	8006cfe <HAL_TIM_OC_Start_IT+0x276>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd8:	d011      	beq.n	8006cfe <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0201 	orr.w	r2, r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cea:	e008      	b.n	8006cfe <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e000      	b.n	8006d00 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfe:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40013400 	.word	0x40013400
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	00010007 	.word	0x00010007

08006d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d020      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0202 	mvn.w	r2, #2
 8006d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa37 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa29 	bl	80071da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa3a 	bl	8007202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d020      	beq.n	8006de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01b      	beq.n	8006de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0204 	mvn.w	r2, #4
 8006db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa11 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006dcc:	e005      	b.n	8006dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa03 	bl	80071da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa14 	bl	8007202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d020      	beq.n	8006e2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01b      	beq.n	8006e2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0208 	mvn.w	r2, #8
 8006dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2204      	movs	r2, #4
 8006e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9eb 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9dd 	bl	80071da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9ee 	bl	8007202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d020      	beq.n	8006e78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01b      	beq.n	8006e78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0210 	mvn.w	r2, #16
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9c5 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9b7 	bl	80071da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f9c8 	bl	8007202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0201 	mvn.w	r2, #1
 8006e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f995 	bl	80071c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00c      	beq.n	8006eca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fe7f 	bl	8007bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00c      	beq.n	8006eee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fe77 	bl	8007bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f982 	bl	8007216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00c      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f06f 0220 	mvn.w	r2, #32
 8006f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fe3f 	bl	8007bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e066      	b.n	800702c <HAL_TIM_OC_ConfigChannel+0xec>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b14      	cmp	r3, #20
 8006f6a:	d857      	bhi.n	800701c <HAL_TIM_OC_ConfigChannel+0xdc>
 8006f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f72:	bf00      	nop
 8006f74:	08006fc9 	.word	0x08006fc9
 8006f78:	0800701d 	.word	0x0800701d
 8006f7c:	0800701d 	.word	0x0800701d
 8006f80:	0800701d 	.word	0x0800701d
 8006f84:	08006fd7 	.word	0x08006fd7
 8006f88:	0800701d 	.word	0x0800701d
 8006f8c:	0800701d 	.word	0x0800701d
 8006f90:	0800701d 	.word	0x0800701d
 8006f94:	08006fe5 	.word	0x08006fe5
 8006f98:	0800701d 	.word	0x0800701d
 8006f9c:	0800701d 	.word	0x0800701d
 8006fa0:	0800701d 	.word	0x0800701d
 8006fa4:	08006ff3 	.word	0x08006ff3
 8006fa8:	0800701d 	.word	0x0800701d
 8006fac:	0800701d 	.word	0x0800701d
 8006fb0:	0800701d 	.word	0x0800701d
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	0800701d 	.word	0x0800701d
 8006fbc:	0800701d 	.word	0x0800701d
 8006fc0:	0800701d 	.word	0x0800701d
 8006fc4:	0800700f 	.word	0x0800700f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f9d2 	bl	8007378 <TIM_OC1_SetConfig>
      break;
 8006fd4:	e025      	b.n	8007022 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 fa5b 	bl	8007498 <TIM_OC2_SetConfig>
      break;
 8006fe2:	e01e      	b.n	8007022 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fade 	bl	80075ac <TIM_OC3_SetConfig>
      break;
 8006ff0:	e017      	b.n	8007022 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fb5f 	bl	80076bc <TIM_OC4_SetConfig>
      break;
 8006ffe:	e010      	b.n	8007022 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fbc2 	bl	8007790 <TIM_OC5_SetConfig>
      break;
 800700c:	e009      	b.n	8007022 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fc1f 	bl	8007858 <TIM_OC6_SetConfig>
      break;
 800701a:	e002      	b.n	8007022 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
      break;
 8007020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_TIM_ConfigClockSource+0x1c>
 800704c:	2302      	movs	r3, #2
 800704e:	e0b6      	b.n	80071be <HAL_TIM_ConfigClockSource+0x18a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800706e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800707a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800708c:	d03e      	beq.n	800710c <HAL_TIM_ConfigClockSource+0xd8>
 800708e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007092:	f200 8087 	bhi.w	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 8007096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800709a:	f000 8086 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x176>
 800709e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a2:	d87f      	bhi.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 80070a4:	2b70      	cmp	r3, #112	@ 0x70
 80070a6:	d01a      	beq.n	80070de <HAL_TIM_ConfigClockSource+0xaa>
 80070a8:	2b70      	cmp	r3, #112	@ 0x70
 80070aa:	d87b      	bhi.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 80070ac:	2b60      	cmp	r3, #96	@ 0x60
 80070ae:	d050      	beq.n	8007152 <HAL_TIM_ConfigClockSource+0x11e>
 80070b0:	2b60      	cmp	r3, #96	@ 0x60
 80070b2:	d877      	bhi.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 80070b4:	2b50      	cmp	r3, #80	@ 0x50
 80070b6:	d03c      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0xfe>
 80070b8:	2b50      	cmp	r3, #80	@ 0x50
 80070ba:	d873      	bhi.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 80070bc:	2b40      	cmp	r3, #64	@ 0x40
 80070be:	d058      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0x13e>
 80070c0:	2b40      	cmp	r3, #64	@ 0x40
 80070c2:	d86f      	bhi.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 80070c4:	2b30      	cmp	r3, #48	@ 0x30
 80070c6:	d064      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x15e>
 80070c8:	2b30      	cmp	r3, #48	@ 0x30
 80070ca:	d86b      	bhi.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d060      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x15e>
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d867      	bhi.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d05c      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x15e>
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d05a      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x15e>
 80070dc:	e062      	b.n	80071a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070ee:	f000 fc93 	bl	8007a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	609a      	str	r2, [r3, #8]
      break;
 800710a:	e04f      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800711c:	f000 fc7c 	bl	8007a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800712e:	609a      	str	r2, [r3, #8]
      break;
 8007130:	e03c      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800713e:	461a      	mov	r2, r3
 8007140:	f000 fbf0 	bl	8007924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2150      	movs	r1, #80	@ 0x50
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fc49 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 8007150:	e02c      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800715e:	461a      	mov	r2, r3
 8007160:	f000 fc0f 	bl	8007982 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2160      	movs	r1, #96	@ 0x60
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fc39 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 8007170:	e01c      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800717e:	461a      	mov	r2, r3
 8007180:	f000 fbd0 	bl	8007924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2140      	movs	r1, #64	@ 0x40
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fc29 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 8007190:	e00c      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f000 fc20 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 80071a2:	e003      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	73fb      	strb	r3, [r7, #15]
      break;
 80071a8:	e000      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80071aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a46      	ldr	r2, [pc, #280]	@ (8007358 <TIM_Base_SetConfig+0x12c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800724a:	d00f      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a43      	ldr	r2, [pc, #268]	@ (800735c <TIM_Base_SetConfig+0x130>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00b      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a42      	ldr	r2, [pc, #264]	@ (8007360 <TIM_Base_SetConfig+0x134>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d007      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a41      	ldr	r2, [pc, #260]	@ (8007364 <TIM_Base_SetConfig+0x138>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a40      	ldr	r2, [pc, #256]	@ (8007368 <TIM_Base_SetConfig+0x13c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d108      	bne.n	800727e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a35      	ldr	r2, [pc, #212]	@ (8007358 <TIM_Base_SetConfig+0x12c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d01f      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728c:	d01b      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a32      	ldr	r2, [pc, #200]	@ (800735c <TIM_Base_SetConfig+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d017      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a31      	ldr	r2, [pc, #196]	@ (8007360 <TIM_Base_SetConfig+0x134>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a30      	ldr	r2, [pc, #192]	@ (8007364 <TIM_Base_SetConfig+0x138>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00f      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007368 <TIM_Base_SetConfig+0x13c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00b      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2e      	ldr	r2, [pc, #184]	@ (800736c <TIM_Base_SetConfig+0x140>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d007      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007370 <TIM_Base_SetConfig+0x144>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d003      	beq.n	80072c6 <TIM_Base_SetConfig+0x9a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007374 <TIM_Base_SetConfig+0x148>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d108      	bne.n	80072d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a16      	ldr	r2, [pc, #88]	@ (8007358 <TIM_Base_SetConfig+0x12c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00f      	beq.n	8007324 <TIM_Base_SetConfig+0xf8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a18      	ldr	r2, [pc, #96]	@ (8007368 <TIM_Base_SetConfig+0x13c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00b      	beq.n	8007324 <TIM_Base_SetConfig+0xf8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a17      	ldr	r2, [pc, #92]	@ (800736c <TIM_Base_SetConfig+0x140>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <TIM_Base_SetConfig+0xf8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a16      	ldr	r2, [pc, #88]	@ (8007370 <TIM_Base_SetConfig+0x144>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_Base_SetConfig+0xf8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a15      	ldr	r2, [pc, #84]	@ (8007374 <TIM_Base_SetConfig+0x148>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d103      	bne.n	800732c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b01      	cmp	r3, #1
 800733c:	d105      	bne.n	800734a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f023 0201 	bic.w	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	611a      	str	r2, [r3, #16]
  }
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40012c00 	.word	0x40012c00
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40000c00 	.word	0x40000c00
 8007368:	40013400 	.word	0x40013400
 800736c:	40014000 	.word	0x40014000
 8007370:	40014400 	.word	0x40014400
 8007374:	40014800 	.word	0x40014800

08007378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	f023 0201 	bic.w	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f023 0302 	bic.w	r3, r3, #2
 80073c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007484 <TIM_OC1_SetConfig+0x10c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00f      	beq.n	80073f8 <TIM_OC1_SetConfig+0x80>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2b      	ldr	r2, [pc, #172]	@ (8007488 <TIM_OC1_SetConfig+0x110>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_OC1_SetConfig+0x80>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a2a      	ldr	r2, [pc, #168]	@ (800748c <TIM_OC1_SetConfig+0x114>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_OC1_SetConfig+0x80>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a29      	ldr	r2, [pc, #164]	@ (8007490 <TIM_OC1_SetConfig+0x118>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC1_SetConfig+0x80>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a28      	ldr	r2, [pc, #160]	@ (8007494 <TIM_OC1_SetConfig+0x11c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d10c      	bne.n	8007412 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0308 	bic.w	r3, r3, #8
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f023 0304 	bic.w	r3, r3, #4
 8007410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1b      	ldr	r2, [pc, #108]	@ (8007484 <TIM_OC1_SetConfig+0x10c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00f      	beq.n	800743a <TIM_OC1_SetConfig+0xc2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1a      	ldr	r2, [pc, #104]	@ (8007488 <TIM_OC1_SetConfig+0x110>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <TIM_OC1_SetConfig+0xc2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a19      	ldr	r2, [pc, #100]	@ (800748c <TIM_OC1_SetConfig+0x114>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <TIM_OC1_SetConfig+0xc2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <TIM_OC1_SetConfig+0x118>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_OC1_SetConfig+0xc2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a17      	ldr	r2, [pc, #92]	@ (8007494 <TIM_OC1_SetConfig+0x11c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d111      	bne.n	800745e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	621a      	str	r2, [r3, #32]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	40012c00 	.word	0x40012c00
 8007488:	40013400 	.word	0x40013400
 800748c:	40014000 	.word	0x40014000
 8007490:	40014400 	.word	0x40014400
 8007494:	40014800 	.word	0x40014800

08007498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f023 0210 	bic.w	r2, r3, #16
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f023 0320 	bic.w	r3, r3, #32
 80074e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a28      	ldr	r2, [pc, #160]	@ (8007598 <TIM_OC2_SetConfig+0x100>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_OC2_SetConfig+0x6c>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a27      	ldr	r2, [pc, #156]	@ (800759c <TIM_OC2_SetConfig+0x104>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d10d      	bne.n	8007520 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800750a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800751e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1d      	ldr	r2, [pc, #116]	@ (8007598 <TIM_OC2_SetConfig+0x100>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00f      	beq.n	8007548 <TIM_OC2_SetConfig+0xb0>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1c      	ldr	r2, [pc, #112]	@ (800759c <TIM_OC2_SetConfig+0x104>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00b      	beq.n	8007548 <TIM_OC2_SetConfig+0xb0>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1b      	ldr	r2, [pc, #108]	@ (80075a0 <TIM_OC2_SetConfig+0x108>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d007      	beq.n	8007548 <TIM_OC2_SetConfig+0xb0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1a      	ldr	r2, [pc, #104]	@ (80075a4 <TIM_OC2_SetConfig+0x10c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_OC2_SetConfig+0xb0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a19      	ldr	r2, [pc, #100]	@ (80075a8 <TIM_OC2_SetConfig+0x110>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d113      	bne.n	8007570 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800754e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4313      	orrs	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	621a      	str	r2, [r3, #32]
}
 800758a:	bf00      	nop
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40012c00 	.word	0x40012c00
 800759c:	40013400 	.word	0x40013400
 80075a0:	40014000 	.word	0x40014000
 80075a4:	40014400 	.word	0x40014400
 80075a8:	40014800 	.word	0x40014800

080075ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	4313      	orrs	r3, r2
 8007604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a27      	ldr	r2, [pc, #156]	@ (80076a8 <TIM_OC3_SetConfig+0xfc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d003      	beq.n	8007616 <TIM_OC3_SetConfig+0x6a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a26      	ldr	r2, [pc, #152]	@ (80076ac <TIM_OC3_SetConfig+0x100>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d10d      	bne.n	8007632 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800761c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a1c      	ldr	r2, [pc, #112]	@ (80076a8 <TIM_OC3_SetConfig+0xfc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00f      	beq.n	800765a <TIM_OC3_SetConfig+0xae>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ac <TIM_OC3_SetConfig+0x100>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00b      	beq.n	800765a <TIM_OC3_SetConfig+0xae>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1a      	ldr	r2, [pc, #104]	@ (80076b0 <TIM_OC3_SetConfig+0x104>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d007      	beq.n	800765a <TIM_OC3_SetConfig+0xae>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a19      	ldr	r2, [pc, #100]	@ (80076b4 <TIM_OC3_SetConfig+0x108>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d003      	beq.n	800765a <TIM_OC3_SetConfig+0xae>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a18      	ldr	r2, [pc, #96]	@ (80076b8 <TIM_OC3_SetConfig+0x10c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d113      	bne.n	8007682 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	621a      	str	r2, [r3, #32]
}
 800769c:	bf00      	nop
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40013400 	.word	0x40013400
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40014400 	.word	0x40014400
 80076b8:	40014800 	.word	0x40014800

080076bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800770a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	031b      	lsls	r3, r3, #12
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	4313      	orrs	r3, r2
 8007716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a18      	ldr	r2, [pc, #96]	@ (800777c <TIM_OC4_SetConfig+0xc0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00f      	beq.n	8007740 <TIM_OC4_SetConfig+0x84>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a17      	ldr	r2, [pc, #92]	@ (8007780 <TIM_OC4_SetConfig+0xc4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00b      	beq.n	8007740 <TIM_OC4_SetConfig+0x84>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a16      	ldr	r2, [pc, #88]	@ (8007784 <TIM_OC4_SetConfig+0xc8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC4_SetConfig+0x84>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a15      	ldr	r2, [pc, #84]	@ (8007788 <TIM_OC4_SetConfig+0xcc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC4_SetConfig+0x84>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a14      	ldr	r2, [pc, #80]	@ (800778c <TIM_OC4_SetConfig+0xd0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d109      	bne.n	8007754 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40013400 	.word	0x40013400
 8007784:	40014000 	.word	0x40014000
 8007788:	40014400 	.word	0x40014400
 800778c:	40014800 	.word	0x40014800

08007790 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	041b      	lsls	r3, r3, #16
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a17      	ldr	r2, [pc, #92]	@ (8007844 <TIM_OC5_SetConfig+0xb4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00f      	beq.n	800780a <TIM_OC5_SetConfig+0x7a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a16      	ldr	r2, [pc, #88]	@ (8007848 <TIM_OC5_SetConfig+0xb8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00b      	beq.n	800780a <TIM_OC5_SetConfig+0x7a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a15      	ldr	r2, [pc, #84]	@ (800784c <TIM_OC5_SetConfig+0xbc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d007      	beq.n	800780a <TIM_OC5_SetConfig+0x7a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a14      	ldr	r2, [pc, #80]	@ (8007850 <TIM_OC5_SetConfig+0xc0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d003      	beq.n	800780a <TIM_OC5_SetConfig+0x7a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a13      	ldr	r2, [pc, #76]	@ (8007854 <TIM_OC5_SetConfig+0xc4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d109      	bne.n	800781e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007810:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	621a      	str	r2, [r3, #32]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40012c00 	.word	0x40012c00
 8007848:	40013400 	.word	0x40013400
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800

08007858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800789e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	051b      	lsls	r3, r3, #20
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a18      	ldr	r2, [pc, #96]	@ (8007910 <TIM_OC6_SetConfig+0xb8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00f      	beq.n	80078d4 <TIM_OC6_SetConfig+0x7c>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a17      	ldr	r2, [pc, #92]	@ (8007914 <TIM_OC6_SetConfig+0xbc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00b      	beq.n	80078d4 <TIM_OC6_SetConfig+0x7c>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a16      	ldr	r2, [pc, #88]	@ (8007918 <TIM_OC6_SetConfig+0xc0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d007      	beq.n	80078d4 <TIM_OC6_SetConfig+0x7c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a15      	ldr	r2, [pc, #84]	@ (800791c <TIM_OC6_SetConfig+0xc4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d003      	beq.n	80078d4 <TIM_OC6_SetConfig+0x7c>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a14      	ldr	r2, [pc, #80]	@ (8007920 <TIM_OC6_SetConfig+0xc8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d109      	bne.n	80078e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	029b      	lsls	r3, r3, #10
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800

08007924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f023 0201 	bic.w	r2, r3, #1
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800794e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f023 030a 	bic.w	r3, r3, #10
 8007960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	621a      	str	r2, [r3, #32]
}
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f023 0210 	bic.w	r2, r3, #16
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	031b      	lsls	r3, r3, #12
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f043 0307 	orr.w	r3, r3, #7
 8007a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	609a      	str	r2, [r3, #8]
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	021a      	lsls	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	609a      	str	r2, [r3, #8]
}
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 031f 	and.w	r3, r3, #31
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a1a      	ldr	r2, [r3, #32]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1a      	ldr	r2, [r3, #32]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f003 031f 	and.w	r3, r3, #31
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a90:	431a      	orrs	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
}
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e068      	b.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2d      	ldr	r2, [pc, #180]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d108      	bne.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1e      	ldr	r2, [pc, #120]	@ (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d01d      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b2e:	d018      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a18      	ldr	r2, [pc, #96]	@ (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a13      	ldr	r2, [pc, #76]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a14      	ldr	r2, [pc, #80]	@ (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10c      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40000c00 	.word	0x40000c00
 8007bb0:	40014000 	.word	0x40014000

08007bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e042      	b.n	8007c88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7fb ff29 	bl	8003a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2224      	movs	r2, #36	@ 0x24
 8007c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fc7c 	bl	8008538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f97d 	bl	8007f40 <UART_SetConfig>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e01b      	b.n	8007c88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fcfb 	bl	800867c <UART_CheckIdleState>
 8007c86:	4603      	mov	r3, r0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	@ 0x28
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d17b      	bne.n	8007da2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_UART_Transmit+0x26>
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e074      	b.n	8007da4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2221      	movs	r2, #33	@ 0x21
 8007cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cca:	f7fc fac7 	bl	800425c <HAL_GetTick>
 8007cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	88fa      	ldrh	r2, [r7, #6]
 8007cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce8:	d108      	bne.n	8007cfc <HAL_UART_Transmit+0x6c>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e003      	b.n	8007d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d04:	e030      	b.n	8007d68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2180      	movs	r1, #128	@ 0x80
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fd5d 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e03d      	b.n	8007da4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3a:	b292      	uxth	r2, r2
 8007d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	3302      	adds	r3, #2
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e007      	b.n	8007d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	781a      	ldrb	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3301      	adds	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1c8      	bne.n	8007d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2140      	movs	r1, #64	@ 0x40
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fd26 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e006      	b.n	8007da4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e000      	b.n	8007da4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007da2:	2302      	movs	r3, #2
  }
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3720      	adds	r7, #32
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	@ 0x28
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	f040 80b6 	bne.w	8007f34 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_UART_Receive+0x28>
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0ae      	b.n	8007f36 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2222      	movs	r2, #34	@ 0x22
 8007de4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dee:	f7fc fa35 	bl	800425c <HAL_GetTick>
 8007df2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	88fa      	ldrh	r2, [r7, #6]
 8007df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	88fa      	ldrh	r2, [r7, #6]
 8007e00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e0c:	d10e      	bne.n	8007e2c <HAL_UART_Receive+0x80>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d105      	bne.n	8007e22 <HAL_UART_Receive+0x76>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007e1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e20:	e02d      	b.n	8007e7e <HAL_UART_Receive+0xd2>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	22ff      	movs	r2, #255	@ 0xff
 8007e26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e2a:	e028      	b.n	8007e7e <HAL_UART_Receive+0xd2>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10d      	bne.n	8007e50 <HAL_UART_Receive+0xa4>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <HAL_UART_Receive+0x9a>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	22ff      	movs	r2, #255	@ 0xff
 8007e40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e44:	e01b      	b.n	8007e7e <HAL_UART_Receive+0xd2>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	227f      	movs	r2, #127	@ 0x7f
 8007e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e4e:	e016      	b.n	8007e7e <HAL_UART_Receive+0xd2>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e58:	d10d      	bne.n	8007e76 <HAL_UART_Receive+0xca>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <HAL_UART_Receive+0xc0>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	227f      	movs	r2, #127	@ 0x7f
 8007e66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e6a:	e008      	b.n	8007e7e <HAL_UART_Receive+0xd2>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	223f      	movs	r2, #63	@ 0x3f
 8007e70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e74:	e003      	b.n	8007e7e <HAL_UART_Receive+0xd2>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e84:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e8e:	d108      	bne.n	8007ea2 <HAL_UART_Receive+0xf6>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	e003      	b.n	8007eaa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007eaa:	e037      	b.n	8007f1c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2120      	movs	r1, #32
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fc8a 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e033      	b.n	8007f36 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10c      	bne.n	8007eee <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	8a7b      	ldrh	r3, [r7, #18]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	3302      	adds	r3, #2
 8007eea:	61bb      	str	r3, [r7, #24]
 8007eec:	e00d      	b.n	8007f0a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	8a7b      	ldrh	r3, [r7, #18]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	4013      	ands	r3, r2
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	3301      	adds	r3, #1
 8007f08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1c1      	bne.n	8007eac <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e000      	b.n	8007f36 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3720      	adds	r7, #32
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f44:	b08c      	sub	sp, #48	@ 0x30
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4baa      	ldr	r3, [pc, #680]	@ (8008218 <UART_SetConfig+0x2d8>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a9f      	ldr	r2, [pc, #636]	@ (800821c <UART_SetConfig+0x2dc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d004      	beq.n	8007fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007fb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	6812      	ldr	r2, [r2, #0]
 8007fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fca:	f023 010f 	bic.w	r1, r3, #15
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a90      	ldr	r2, [pc, #576]	@ (8008220 <UART_SetConfig+0x2e0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d125      	bne.n	8008030 <UART_SetConfig+0xf0>
 8007fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8008224 <UART_SetConfig+0x2e4>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d81a      	bhi.n	8008028 <UART_SetConfig+0xe8>
 8007ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff8 <UART_SetConfig+0xb8>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008019 	.word	0x08008019
 8008000:	08008011 	.word	0x08008011
 8008004:	08008021 	.word	0x08008021
 8008008:	2301      	movs	r3, #1
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e116      	b.n	800823e <UART_SetConfig+0x2fe>
 8008010:	2302      	movs	r3, #2
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e112      	b.n	800823e <UART_SetConfig+0x2fe>
 8008018:	2304      	movs	r3, #4
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e10e      	b.n	800823e <UART_SetConfig+0x2fe>
 8008020:	2308      	movs	r3, #8
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008026:	e10a      	b.n	800823e <UART_SetConfig+0x2fe>
 8008028:	2310      	movs	r3, #16
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802e:	e106      	b.n	800823e <UART_SetConfig+0x2fe>
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a7c      	ldr	r2, [pc, #496]	@ (8008228 <UART_SetConfig+0x2e8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d138      	bne.n	80080ac <UART_SetConfig+0x16c>
 800803a:	4b7a      	ldr	r3, [pc, #488]	@ (8008224 <UART_SetConfig+0x2e4>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008040:	f003 030c 	and.w	r3, r3, #12
 8008044:	2b0c      	cmp	r3, #12
 8008046:	d82d      	bhi.n	80080a4 <UART_SetConfig+0x164>
 8008048:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <UART_SetConfig+0x110>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008085 	.word	0x08008085
 8008054:	080080a5 	.word	0x080080a5
 8008058:	080080a5 	.word	0x080080a5
 800805c:	080080a5 	.word	0x080080a5
 8008060:	08008095 	.word	0x08008095
 8008064:	080080a5 	.word	0x080080a5
 8008068:	080080a5 	.word	0x080080a5
 800806c:	080080a5 	.word	0x080080a5
 8008070:	0800808d 	.word	0x0800808d
 8008074:	080080a5 	.word	0x080080a5
 8008078:	080080a5 	.word	0x080080a5
 800807c:	080080a5 	.word	0x080080a5
 8008080:	0800809d 	.word	0x0800809d
 8008084:	2300      	movs	r3, #0
 8008086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808a:	e0d8      	b.n	800823e <UART_SetConfig+0x2fe>
 800808c:	2302      	movs	r3, #2
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008092:	e0d4      	b.n	800823e <UART_SetConfig+0x2fe>
 8008094:	2304      	movs	r3, #4
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809a:	e0d0      	b.n	800823e <UART_SetConfig+0x2fe>
 800809c:	2308      	movs	r3, #8
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a2:	e0cc      	b.n	800823e <UART_SetConfig+0x2fe>
 80080a4:	2310      	movs	r3, #16
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080aa:	e0c8      	b.n	800823e <UART_SetConfig+0x2fe>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a5e      	ldr	r2, [pc, #376]	@ (800822c <UART_SetConfig+0x2ec>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d125      	bne.n	8008102 <UART_SetConfig+0x1c2>
 80080b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008224 <UART_SetConfig+0x2e4>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080c0:	2b30      	cmp	r3, #48	@ 0x30
 80080c2:	d016      	beq.n	80080f2 <UART_SetConfig+0x1b2>
 80080c4:	2b30      	cmp	r3, #48	@ 0x30
 80080c6:	d818      	bhi.n	80080fa <UART_SetConfig+0x1ba>
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d00a      	beq.n	80080e2 <UART_SetConfig+0x1a2>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d814      	bhi.n	80080fa <UART_SetConfig+0x1ba>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <UART_SetConfig+0x19a>
 80080d4:	2b10      	cmp	r3, #16
 80080d6:	d008      	beq.n	80080ea <UART_SetConfig+0x1aa>
 80080d8:	e00f      	b.n	80080fa <UART_SetConfig+0x1ba>
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e0:	e0ad      	b.n	800823e <UART_SetConfig+0x2fe>
 80080e2:	2302      	movs	r3, #2
 80080e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e8:	e0a9      	b.n	800823e <UART_SetConfig+0x2fe>
 80080ea:	2304      	movs	r3, #4
 80080ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f0:	e0a5      	b.n	800823e <UART_SetConfig+0x2fe>
 80080f2:	2308      	movs	r3, #8
 80080f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f8:	e0a1      	b.n	800823e <UART_SetConfig+0x2fe>
 80080fa:	2310      	movs	r3, #16
 80080fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008100:	e09d      	b.n	800823e <UART_SetConfig+0x2fe>
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a4a      	ldr	r2, [pc, #296]	@ (8008230 <UART_SetConfig+0x2f0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d125      	bne.n	8008158 <UART_SetConfig+0x218>
 800810c:	4b45      	ldr	r3, [pc, #276]	@ (8008224 <UART_SetConfig+0x2e4>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008112:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008116:	2bc0      	cmp	r3, #192	@ 0xc0
 8008118:	d016      	beq.n	8008148 <UART_SetConfig+0x208>
 800811a:	2bc0      	cmp	r3, #192	@ 0xc0
 800811c:	d818      	bhi.n	8008150 <UART_SetConfig+0x210>
 800811e:	2b80      	cmp	r3, #128	@ 0x80
 8008120:	d00a      	beq.n	8008138 <UART_SetConfig+0x1f8>
 8008122:	2b80      	cmp	r3, #128	@ 0x80
 8008124:	d814      	bhi.n	8008150 <UART_SetConfig+0x210>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <UART_SetConfig+0x1f0>
 800812a:	2b40      	cmp	r3, #64	@ 0x40
 800812c:	d008      	beq.n	8008140 <UART_SetConfig+0x200>
 800812e:	e00f      	b.n	8008150 <UART_SetConfig+0x210>
 8008130:	2300      	movs	r3, #0
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008136:	e082      	b.n	800823e <UART_SetConfig+0x2fe>
 8008138:	2302      	movs	r3, #2
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813e:	e07e      	b.n	800823e <UART_SetConfig+0x2fe>
 8008140:	2304      	movs	r3, #4
 8008142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008146:	e07a      	b.n	800823e <UART_SetConfig+0x2fe>
 8008148:	2308      	movs	r3, #8
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800814e:	e076      	b.n	800823e <UART_SetConfig+0x2fe>
 8008150:	2310      	movs	r3, #16
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008156:	e072      	b.n	800823e <UART_SetConfig+0x2fe>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a35      	ldr	r2, [pc, #212]	@ (8008234 <UART_SetConfig+0x2f4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d12a      	bne.n	80081b8 <UART_SetConfig+0x278>
 8008162:	4b30      	ldr	r3, [pc, #192]	@ (8008224 <UART_SetConfig+0x2e4>)
 8008164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800816c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008170:	d01a      	beq.n	80081a8 <UART_SetConfig+0x268>
 8008172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008176:	d81b      	bhi.n	80081b0 <UART_SetConfig+0x270>
 8008178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800817c:	d00c      	beq.n	8008198 <UART_SetConfig+0x258>
 800817e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008182:	d815      	bhi.n	80081b0 <UART_SetConfig+0x270>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <UART_SetConfig+0x250>
 8008188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800818c:	d008      	beq.n	80081a0 <UART_SetConfig+0x260>
 800818e:	e00f      	b.n	80081b0 <UART_SetConfig+0x270>
 8008190:	2300      	movs	r3, #0
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e052      	b.n	800823e <UART_SetConfig+0x2fe>
 8008198:	2302      	movs	r3, #2
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819e:	e04e      	b.n	800823e <UART_SetConfig+0x2fe>
 80081a0:	2304      	movs	r3, #4
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a6:	e04a      	b.n	800823e <UART_SetConfig+0x2fe>
 80081a8:	2308      	movs	r3, #8
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ae:	e046      	b.n	800823e <UART_SetConfig+0x2fe>
 80081b0:	2310      	movs	r3, #16
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081b6:	e042      	b.n	800823e <UART_SetConfig+0x2fe>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a17      	ldr	r2, [pc, #92]	@ (800821c <UART_SetConfig+0x2dc>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d13a      	bne.n	8008238 <UART_SetConfig+0x2f8>
 80081c2:	4b18      	ldr	r3, [pc, #96]	@ (8008224 <UART_SetConfig+0x2e4>)
 80081c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081d0:	d01a      	beq.n	8008208 <UART_SetConfig+0x2c8>
 80081d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081d6:	d81b      	bhi.n	8008210 <UART_SetConfig+0x2d0>
 80081d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081dc:	d00c      	beq.n	80081f8 <UART_SetConfig+0x2b8>
 80081de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081e2:	d815      	bhi.n	8008210 <UART_SetConfig+0x2d0>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <UART_SetConfig+0x2b0>
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ec:	d008      	beq.n	8008200 <UART_SetConfig+0x2c0>
 80081ee:	e00f      	b.n	8008210 <UART_SetConfig+0x2d0>
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f6:	e022      	b.n	800823e <UART_SetConfig+0x2fe>
 80081f8:	2302      	movs	r3, #2
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081fe:	e01e      	b.n	800823e <UART_SetConfig+0x2fe>
 8008200:	2304      	movs	r3, #4
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008206:	e01a      	b.n	800823e <UART_SetConfig+0x2fe>
 8008208:	2308      	movs	r3, #8
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800820e:	e016      	b.n	800823e <UART_SetConfig+0x2fe>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008216:	e012      	b.n	800823e <UART_SetConfig+0x2fe>
 8008218:	cfff69f3 	.word	0xcfff69f3
 800821c:	40008000 	.word	0x40008000
 8008220:	40013800 	.word	0x40013800
 8008224:	40021000 	.word	0x40021000
 8008228:	40004400 	.word	0x40004400
 800822c:	40004800 	.word	0x40004800
 8008230:	40004c00 	.word	0x40004c00
 8008234:	40005000 	.word	0x40005000
 8008238:	2310      	movs	r3, #16
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4aae      	ldr	r2, [pc, #696]	@ (80084fc <UART_SetConfig+0x5bc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	f040 8097 	bne.w	8008378 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800824a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800824e:	2b08      	cmp	r3, #8
 8008250:	d823      	bhi.n	800829a <UART_SetConfig+0x35a>
 8008252:	a201      	add	r2, pc, #4	@ (adr r2, 8008258 <UART_SetConfig+0x318>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	0800827d 	.word	0x0800827d
 800825c:	0800829b 	.word	0x0800829b
 8008260:	08008285 	.word	0x08008285
 8008264:	0800829b 	.word	0x0800829b
 8008268:	0800828b 	.word	0x0800828b
 800826c:	0800829b 	.word	0x0800829b
 8008270:	0800829b 	.word	0x0800829b
 8008274:	0800829b 	.word	0x0800829b
 8008278:	08008293 	.word	0x08008293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800827c:	f7fd f9ca 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8008280:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008282:	e010      	b.n	80082a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008284:	4b9e      	ldr	r3, [pc, #632]	@ (8008500 <UART_SetConfig+0x5c0>)
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008288:	e00d      	b.n	80082a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828a:	f7fd f92b 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 800828e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008290:	e009      	b.n	80082a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008298:	e005      	b.n	80082a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8130 	beq.w	800850e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	4a94      	ldr	r2, [pc, #592]	@ (8008504 <UART_SetConfig+0x5c4>)
 80082b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4413      	add	r3, r2
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d305      	bcc.n	80082de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d903      	bls.n	80082e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082e4:	e113      	b.n	800850e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	2200      	movs	r2, #0
 80082ea:	60bb      	str	r3, [r7, #8]
 80082ec:	60fa      	str	r2, [r7, #12]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	4a84      	ldr	r2, [pc, #528]	@ (8008504 <UART_SetConfig+0x5c4>)
 80082f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2200      	movs	r2, #0
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008308:	f7f8 fc66 	bl	8000bd8 <__aeabi_uldivmod>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4610      	mov	r0, r2
 8008312:	4619      	mov	r1, r3
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	020b      	lsls	r3, r1, #8
 800831e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008322:	0202      	lsls	r2, r0, #8
 8008324:	6979      	ldr	r1, [r7, #20]
 8008326:	6849      	ldr	r1, [r1, #4]
 8008328:	0849      	lsrs	r1, r1, #1
 800832a:	2000      	movs	r0, #0
 800832c:	460c      	mov	r4, r1
 800832e:	4605      	mov	r5, r0
 8008330:	eb12 0804 	adds.w	r8, r2, r4
 8008334:	eb43 0905 	adc.w	r9, r3, r5
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	469a      	mov	sl, r3
 8008340:	4693      	mov	fp, r2
 8008342:	4652      	mov	r2, sl
 8008344:	465b      	mov	r3, fp
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	f7f8 fc45 	bl	8000bd8 <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4613      	mov	r3, r2
 8008354:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800835c:	d308      	bcc.n	8008370 <UART_SetConfig+0x430>
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008364:	d204      	bcs.n	8008370 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6a3a      	ldr	r2, [r7, #32]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	e0ce      	b.n	800850e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008376:	e0ca      	b.n	800850e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008380:	d166      	bne.n	8008450 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008386:	2b08      	cmp	r3, #8
 8008388:	d827      	bhi.n	80083da <UART_SetConfig+0x49a>
 800838a:	a201      	add	r2, pc, #4	@ (adr r2, 8008390 <UART_SetConfig+0x450>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083bd 	.word	0x080083bd
 8008398:	080083c5 	.word	0x080083c5
 800839c:	080083db 	.word	0x080083db
 80083a0:	080083cb 	.word	0x080083cb
 80083a4:	080083db 	.word	0x080083db
 80083a8:	080083db 	.word	0x080083db
 80083ac:	080083db 	.word	0x080083db
 80083b0:	080083d3 	.word	0x080083d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083b4:	f7fd f92e 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80083b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ba:	e014      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083bc:	f7fd f940 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 80083c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083c2:	e010      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c4:	4b4e      	ldr	r3, [pc, #312]	@ (8008500 <UART_SetConfig+0x5c0>)
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083c8:	e00d      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ca:	f7fd f88b 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80083ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083d0:	e009      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083d8:	e005      	b.n	80083e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8090 	beq.w	800850e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f2:	4a44      	ldr	r2, [pc, #272]	@ (8008504 <UART_SetConfig+0x5c4>)
 80083f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008400:	005a      	lsls	r2, r3, #1
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	441a      	add	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	2b0f      	cmp	r3, #15
 8008418:	d916      	bls.n	8008448 <UART_SetConfig+0x508>
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008420:	d212      	bcs.n	8008448 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	b29b      	uxth	r3, r3
 8008426:	f023 030f 	bic.w	r3, r3, #15
 800842a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	b29b      	uxth	r3, r3
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	b29a      	uxth	r2, r3
 8008438:	8bfb      	ldrh	r3, [r7, #30]
 800843a:	4313      	orrs	r3, r2
 800843c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	8bfa      	ldrh	r2, [r7, #30]
 8008444:	60da      	str	r2, [r3, #12]
 8008446:	e062      	b.n	800850e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800844e:	e05e      	b.n	800850e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008450:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008454:	2b08      	cmp	r3, #8
 8008456:	d828      	bhi.n	80084aa <UART_SetConfig+0x56a>
 8008458:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <UART_SetConfig+0x520>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008485 	.word	0x08008485
 8008464:	0800848d 	.word	0x0800848d
 8008468:	08008495 	.word	0x08008495
 800846c:	080084ab 	.word	0x080084ab
 8008470:	0800849b 	.word	0x0800849b
 8008474:	080084ab 	.word	0x080084ab
 8008478:	080084ab 	.word	0x080084ab
 800847c:	080084ab 	.word	0x080084ab
 8008480:	080084a3 	.word	0x080084a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008484:	f7fd f8c6 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8008488:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800848a:	e014      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800848c:	f7fd f8d8 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 8008490:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008492:	e010      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008494:	4b1a      	ldr	r3, [pc, #104]	@ (8008500 <UART_SetConfig+0x5c0>)
 8008496:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008498:	e00d      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800849a:	f7fd f823 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 800849e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084a0:	e009      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084a8:	e005      	b.n	80084b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084b4:	bf00      	nop
    }

    if (pclk != 0U)
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d028      	beq.n	800850e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c0:	4a10      	ldr	r2, [pc, #64]	@ (8008504 <UART_SetConfig+0x5c4>)
 80084c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c6:	461a      	mov	r2, r3
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	085b      	lsrs	r3, r3, #1
 80084d4:	441a      	add	r2, r3
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	fbb2 f3f3 	udiv	r3, r2, r3
 80084de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d910      	bls.n	8008508 <UART_SetConfig+0x5c8>
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ec:	d20c      	bcs.n	8008508 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60da      	str	r2, [r3, #12]
 80084f8:	e009      	b.n	800850e <UART_SetConfig+0x5ce>
 80084fa:	bf00      	nop
 80084fc:	40008000 	.word	0x40008000
 8008500:	00f42400 	.word	0x00f42400
 8008504:	0800ca9c 	.word	0x0800ca9c
      }
      else
      {
        ret = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2201      	movs	r2, #1
 8008512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2201      	movs	r2, #1
 800851a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800852a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800852e:	4618      	mov	r0, r3
 8008530:	3730      	adds	r7, #48	@ 0x30
 8008532:	46bd      	mov	sp, r7
 8008534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01a      	beq.n	800864e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008636:	d10a      	bne.n	800864e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	605a      	str	r2, [r3, #4]
  }
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b098      	sub	sp, #96	@ 0x60
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800868c:	f7fb fde6 	bl	800425c <HAL_GetTick>
 8008690:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b08      	cmp	r3, #8
 800869e:	d12f      	bne.n	8008700 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086a8:	2200      	movs	r2, #0
 80086aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f88e 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d022      	beq.n	8008700 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e063      	b.n	80087c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b04      	cmp	r3, #4
 800870c:	d149      	bne.n	80087a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800870e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008716:	2200      	movs	r2, #0
 8008718:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f857 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d03c      	beq.n	80087a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	623b      	str	r3, [r7, #32]
   return(result);
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800873c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008746:	633b      	str	r3, [r7, #48]	@ 0x30
 8008748:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800874c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e6      	bne.n	8008728 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	60fb      	str	r3, [r7, #12]
   return(result);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800877a:	61fa      	str	r2, [r7, #28]
 800877c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	69b9      	ldr	r1, [r7, #24]
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	617b      	str	r3, [r7, #20]
   return(result);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e012      	b.n	80087c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3758      	adds	r7, #88	@ 0x58
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e0:	e04f      	b.n	8008882 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e8:	d04b      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ea:	f7fb fd37 	bl	800425c <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d302      	bcc.n	8008800 <UART_WaitOnFlagUntilTimeout+0x30>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e04e      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	2b00      	cmp	r3, #0
 8008810:	d037      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2b80      	cmp	r3, #128	@ 0x80
 8008816:	d034      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b40      	cmp	r3, #64	@ 0x40
 800881c:	d031      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b08      	cmp	r3, #8
 800882a:	d110      	bne.n	800884e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2208      	movs	r2, #8
 8008832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 f838 	bl	80088aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2208      	movs	r2, #8
 800883e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e029      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800885c:	d111      	bne.n	8008882 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f81e 	bl	80088aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e00f      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4013      	ands	r3, r2
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	429a      	cmp	r2, r3
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	429a      	cmp	r2, r3
 800889e:	d0a0      	beq.n	80087e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b095      	sub	sp, #84	@ 0x54
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80088d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e6      	bne.n	80088b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3308      	adds	r3, #8
 8008906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800890a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800890e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e3      	bne.n	80088e4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d118      	bne.n	8008956 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	60bb      	str	r3, [r7, #8]
   return(result);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f023 0310 	bic.w	r3, r3, #16
 8008938:	647b      	str	r3, [r7, #68]	@ 0x44
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6979      	ldr	r1, [r7, #20]
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	613b      	str	r3, [r7, #16]
   return(result);
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e6      	bne.n	8008924 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800896a:	bf00      	nop
 800896c:	3754      	adds	r7, #84	@ 0x54
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_UARTEx_DisableFifoMode+0x16>
 8008988:	2302      	movs	r3, #2
 800898a:	e027      	b.n	80089dc <HAL_UARTEx_DisableFifoMode+0x66>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2224      	movs	r2, #36	@ 0x24
 8008998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0201 	bic.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e02d      	b.n	8008a5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2224      	movs	r2, #36	@ 0x24
 8008a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0201 	bic.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f84f 	bl	8008ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e02d      	b.n	8008ad8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2224      	movs	r2, #36	@ 0x24
 8008a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f811 	bl	8008ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d108      	bne.n	8008b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b00:	e031      	b.n	8008b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b02:	2308      	movs	r3, #8
 8008b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b06:	2308      	movs	r3, #8
 8008b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	0e5b      	lsrs	r3, r3, #25
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	0f5b      	lsrs	r3, r3, #29
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	7b3a      	ldrb	r2, [r7, #12]
 8008b2e:	4911      	ldr	r1, [pc, #68]	@ (8008b74 <UARTEx_SetNbDataToProcess+0x94>)
 8008b30:	5c8a      	ldrb	r2, [r1, r2]
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b36:	7b3a      	ldrb	r2, [r7, #12]
 8008b38:	490f      	ldr	r1, [pc, #60]	@ (8008b78 <UARTEx_SetNbDataToProcess+0x98>)
 8008b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	7b7a      	ldrb	r2, [r7, #13]
 8008b4c:	4909      	ldr	r1, [pc, #36]	@ (8008b74 <UARTEx_SetNbDataToProcess+0x94>)
 8008b4e:	5c8a      	ldrb	r2, [r1, r2]
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b54:	7b7a      	ldrb	r2, [r7, #13]
 8008b56:	4908      	ldr	r1, [pc, #32]	@ (8008b78 <UARTEx_SetNbDataToProcess+0x98>)
 8008b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	0800cab4 	.word	0x0800cab4
 8008b78:	0800cabc 	.word	0x0800cabc

08008b7c <__cvt>:
 8008b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	ec57 6b10 	vmov	r6, r7, d0
 8008b84:	2f00      	cmp	r7, #0
 8008b86:	460c      	mov	r4, r1
 8008b88:	4619      	mov	r1, r3
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	bfbb      	ittet	lt
 8008b8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008b92:	461f      	movlt	r7, r3
 8008b94:	2300      	movge	r3, #0
 8008b96:	232d      	movlt	r3, #45	@ 0x2d
 8008b98:	700b      	strb	r3, [r1, #0]
 8008b9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ba0:	4691      	mov	r9, r2
 8008ba2:	f023 0820 	bic.w	r8, r3, #32
 8008ba6:	bfbc      	itt	lt
 8008ba8:	4632      	movlt	r2, r6
 8008baa:	4616      	movlt	r6, r2
 8008bac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008bb0:	d005      	beq.n	8008bbe <__cvt+0x42>
 8008bb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008bb6:	d100      	bne.n	8008bba <__cvt+0x3e>
 8008bb8:	3401      	adds	r4, #1
 8008bba:	2102      	movs	r1, #2
 8008bbc:	e000      	b.n	8008bc0 <__cvt+0x44>
 8008bbe:	2103      	movs	r1, #3
 8008bc0:	ab03      	add	r3, sp, #12
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	ab02      	add	r3, sp, #8
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	ec47 6b10 	vmov	d0, r6, r7
 8008bcc:	4653      	mov	r3, sl
 8008bce:	4622      	mov	r2, r4
 8008bd0:	f000 fe22 	bl	8009818 <_dtoa_r>
 8008bd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008bd8:	4605      	mov	r5, r0
 8008bda:	d119      	bne.n	8008c10 <__cvt+0x94>
 8008bdc:	f019 0f01 	tst.w	r9, #1
 8008be0:	d00e      	beq.n	8008c00 <__cvt+0x84>
 8008be2:	eb00 0904 	add.w	r9, r0, r4
 8008be6:	2200      	movs	r2, #0
 8008be8:	2300      	movs	r3, #0
 8008bea:	4630      	mov	r0, r6
 8008bec:	4639      	mov	r1, r7
 8008bee:	f7f7 ff83 	bl	8000af8 <__aeabi_dcmpeq>
 8008bf2:	b108      	cbz	r0, 8008bf8 <__cvt+0x7c>
 8008bf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bf8:	2230      	movs	r2, #48	@ 0x30
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	454b      	cmp	r3, r9
 8008bfe:	d31e      	bcc.n	8008c3e <__cvt+0xc2>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c04:	1b5b      	subs	r3, r3, r5
 8008c06:	4628      	mov	r0, r5
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	b004      	add	sp, #16
 8008c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c14:	eb00 0904 	add.w	r9, r0, r4
 8008c18:	d1e5      	bne.n	8008be6 <__cvt+0x6a>
 8008c1a:	7803      	ldrb	r3, [r0, #0]
 8008c1c:	2b30      	cmp	r3, #48	@ 0x30
 8008c1e:	d10a      	bne.n	8008c36 <__cvt+0xba>
 8008c20:	2200      	movs	r2, #0
 8008c22:	2300      	movs	r3, #0
 8008c24:	4630      	mov	r0, r6
 8008c26:	4639      	mov	r1, r7
 8008c28:	f7f7 ff66 	bl	8000af8 <__aeabi_dcmpeq>
 8008c2c:	b918      	cbnz	r0, 8008c36 <__cvt+0xba>
 8008c2e:	f1c4 0401 	rsb	r4, r4, #1
 8008c32:	f8ca 4000 	str.w	r4, [sl]
 8008c36:	f8da 3000 	ldr.w	r3, [sl]
 8008c3a:	4499      	add	r9, r3
 8008c3c:	e7d3      	b.n	8008be6 <__cvt+0x6a>
 8008c3e:	1c59      	adds	r1, r3, #1
 8008c40:	9103      	str	r1, [sp, #12]
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	e7d9      	b.n	8008bfa <__cvt+0x7e>

08008c46 <__exponent>:
 8008c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	bfba      	itte	lt
 8008c4c:	4249      	neglt	r1, r1
 8008c4e:	232d      	movlt	r3, #45	@ 0x2d
 8008c50:	232b      	movge	r3, #43	@ 0x2b
 8008c52:	2909      	cmp	r1, #9
 8008c54:	7002      	strb	r2, [r0, #0]
 8008c56:	7043      	strb	r3, [r0, #1]
 8008c58:	dd29      	ble.n	8008cae <__exponent+0x68>
 8008c5a:	f10d 0307 	add.w	r3, sp, #7
 8008c5e:	461d      	mov	r5, r3
 8008c60:	270a      	movs	r7, #10
 8008c62:	461a      	mov	r2, r3
 8008c64:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c68:	fb07 1416 	mls	r4, r7, r6, r1
 8008c6c:	3430      	adds	r4, #48	@ 0x30
 8008c6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c72:	460c      	mov	r4, r1
 8008c74:	2c63      	cmp	r4, #99	@ 0x63
 8008c76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	dcf1      	bgt.n	8008c62 <__exponent+0x1c>
 8008c7e:	3130      	adds	r1, #48	@ 0x30
 8008c80:	1e94      	subs	r4, r2, #2
 8008c82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c86:	1c41      	adds	r1, r0, #1
 8008c88:	4623      	mov	r3, r4
 8008c8a:	42ab      	cmp	r3, r5
 8008c8c:	d30a      	bcc.n	8008ca4 <__exponent+0x5e>
 8008c8e:	f10d 0309 	add.w	r3, sp, #9
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	42ac      	cmp	r4, r5
 8008c96:	bf88      	it	hi
 8008c98:	2300      	movhi	r3, #0
 8008c9a:	3302      	adds	r3, #2
 8008c9c:	4403      	add	r3, r0
 8008c9e:	1a18      	subs	r0, r3, r0
 8008ca0:	b003      	add	sp, #12
 8008ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ca8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008cac:	e7ed      	b.n	8008c8a <__exponent+0x44>
 8008cae:	2330      	movs	r3, #48	@ 0x30
 8008cb0:	3130      	adds	r1, #48	@ 0x30
 8008cb2:	7083      	strb	r3, [r0, #2]
 8008cb4:	70c1      	strb	r1, [r0, #3]
 8008cb6:	1d03      	adds	r3, r0, #4
 8008cb8:	e7f1      	b.n	8008c9e <__exponent+0x58>
	...

08008cbc <_printf_float>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	b08d      	sub	sp, #52	@ 0x34
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008cc8:	4616      	mov	r6, r2
 8008cca:	461f      	mov	r7, r3
 8008ccc:	4605      	mov	r5, r0
 8008cce:	f000 fce7 	bl	80096a0 <_localeconv_r>
 8008cd2:	6803      	ldr	r3, [r0, #0]
 8008cd4:	9304      	str	r3, [sp, #16]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7f7 fae2 	bl	80002a0 <strlen>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce4:	9005      	str	r0, [sp, #20]
 8008ce6:	3307      	adds	r3, #7
 8008ce8:	f023 0307 	bic.w	r3, r3, #7
 8008cec:	f103 0208 	add.w	r2, r3, #8
 8008cf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008cf4:	f8d4 b000 	ldr.w	fp, [r4]
 8008cf8:	f8c8 2000 	str.w	r2, [r8]
 8008cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d04:	9307      	str	r3, [sp, #28]
 8008d06:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d12:	4b9c      	ldr	r3, [pc, #624]	@ (8008f84 <_printf_float+0x2c8>)
 8008d14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d18:	f7f7 ff20 	bl	8000b5c <__aeabi_dcmpun>
 8008d1c:	bb70      	cbnz	r0, 8008d7c <_printf_float+0xc0>
 8008d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d22:	4b98      	ldr	r3, [pc, #608]	@ (8008f84 <_printf_float+0x2c8>)
 8008d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d28:	f7f7 fefa 	bl	8000b20 <__aeabi_dcmple>
 8008d2c:	bb30      	cbnz	r0, 8008d7c <_printf_float+0xc0>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2300      	movs	r3, #0
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fee9 	bl	8000b0c <__aeabi_dcmplt>
 8008d3a:	b110      	cbz	r0, 8008d42 <_printf_float+0x86>
 8008d3c:	232d      	movs	r3, #45	@ 0x2d
 8008d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d42:	4a91      	ldr	r2, [pc, #580]	@ (8008f88 <_printf_float+0x2cc>)
 8008d44:	4b91      	ldr	r3, [pc, #580]	@ (8008f8c <_printf_float+0x2d0>)
 8008d46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d4a:	bf94      	ite	ls
 8008d4c:	4690      	movls	r8, r2
 8008d4e:	4698      	movhi	r8, r3
 8008d50:	2303      	movs	r3, #3
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	f02b 0304 	bic.w	r3, fp, #4
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	f04f 0900 	mov.w	r9, #0
 8008d5e:	9700      	str	r7, [sp, #0]
 8008d60:	4633      	mov	r3, r6
 8008d62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d64:	4621      	mov	r1, r4
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 f9d2 	bl	8009110 <_printf_common>
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	f040 808d 	bne.w	8008e8c <_printf_float+0x1d0>
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d76:	b00d      	add	sp, #52	@ 0x34
 8008d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7c:	4642      	mov	r2, r8
 8008d7e:	464b      	mov	r3, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	4649      	mov	r1, r9
 8008d84:	f7f7 feea 	bl	8000b5c <__aeabi_dcmpun>
 8008d88:	b140      	cbz	r0, 8008d9c <_printf_float+0xe0>
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bfbc      	itt	lt
 8008d90:	232d      	movlt	r3, #45	@ 0x2d
 8008d92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d96:	4a7e      	ldr	r2, [pc, #504]	@ (8008f90 <_printf_float+0x2d4>)
 8008d98:	4b7e      	ldr	r3, [pc, #504]	@ (8008f94 <_printf_float+0x2d8>)
 8008d9a:	e7d4      	b.n	8008d46 <_printf_float+0x8a>
 8008d9c:	6863      	ldr	r3, [r4, #4]
 8008d9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008da2:	9206      	str	r2, [sp, #24]
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	d13b      	bne.n	8008e20 <_printf_float+0x164>
 8008da8:	2306      	movs	r3, #6
 8008daa:	6063      	str	r3, [r4, #4]
 8008dac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008db0:	2300      	movs	r3, #0
 8008db2:	6022      	str	r2, [r4, #0]
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	ab0a      	add	r3, sp, #40	@ 0x28
 8008db8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008dbc:	ab09      	add	r3, sp, #36	@ 0x24
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	6861      	ldr	r1, [r4, #4]
 8008dc2:	ec49 8b10 	vmov	d0, r8, r9
 8008dc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f7ff fed6 	bl	8008b7c <__cvt>
 8008dd0:	9b06      	ldr	r3, [sp, #24]
 8008dd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dd4:	2b47      	cmp	r3, #71	@ 0x47
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	d129      	bne.n	8008e2e <_printf_float+0x172>
 8008dda:	1cc8      	adds	r0, r1, #3
 8008ddc:	db02      	blt.n	8008de4 <_printf_float+0x128>
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	4299      	cmp	r1, r3
 8008de2:	dd41      	ble.n	8008e68 <_printf_float+0x1ac>
 8008de4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008de8:	fa5f fa8a 	uxtb.w	sl, sl
 8008dec:	3901      	subs	r1, #1
 8008dee:	4652      	mov	r2, sl
 8008df0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008df4:	9109      	str	r1, [sp, #36]	@ 0x24
 8008df6:	f7ff ff26 	bl	8008c46 <__exponent>
 8008dfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008dfc:	1813      	adds	r3, r2, r0
 8008dfe:	2a01      	cmp	r2, #1
 8008e00:	4681      	mov	r9, r0
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	dc02      	bgt.n	8008e0c <_printf_float+0x150>
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	07d2      	lsls	r2, r2, #31
 8008e0a:	d501      	bpl.n	8008e10 <_printf_float+0x154>
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	6123      	str	r3, [r4, #16]
 8008e10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0a2      	beq.n	8008d5e <_printf_float+0xa2>
 8008e18:	232d      	movs	r3, #45	@ 0x2d
 8008e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e1e:	e79e      	b.n	8008d5e <_printf_float+0xa2>
 8008e20:	9a06      	ldr	r2, [sp, #24]
 8008e22:	2a47      	cmp	r2, #71	@ 0x47
 8008e24:	d1c2      	bne.n	8008dac <_printf_float+0xf0>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1c0      	bne.n	8008dac <_printf_float+0xf0>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e7bd      	b.n	8008daa <_printf_float+0xee>
 8008e2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e32:	d9db      	bls.n	8008dec <_printf_float+0x130>
 8008e34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e38:	d118      	bne.n	8008e6c <_printf_float+0x1b0>
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	6863      	ldr	r3, [r4, #4]
 8008e3e:	dd0b      	ble.n	8008e58 <_printf_float+0x19c>
 8008e40:	6121      	str	r1, [r4, #16]
 8008e42:	b913      	cbnz	r3, 8008e4a <_printf_float+0x18e>
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	07d0      	lsls	r0, r2, #31
 8008e48:	d502      	bpl.n	8008e50 <_printf_float+0x194>
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	440b      	add	r3, r1
 8008e4e:	6123      	str	r3, [r4, #16]
 8008e50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e52:	f04f 0900 	mov.w	r9, #0
 8008e56:	e7db      	b.n	8008e10 <_printf_float+0x154>
 8008e58:	b913      	cbnz	r3, 8008e60 <_printf_float+0x1a4>
 8008e5a:	6822      	ldr	r2, [r4, #0]
 8008e5c:	07d2      	lsls	r2, r2, #31
 8008e5e:	d501      	bpl.n	8008e64 <_printf_float+0x1a8>
 8008e60:	3302      	adds	r3, #2
 8008e62:	e7f4      	b.n	8008e4e <_printf_float+0x192>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e7f2      	b.n	8008e4e <_printf_float+0x192>
 8008e68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	db05      	blt.n	8008e7e <_printf_float+0x1c2>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	6121      	str	r1, [r4, #16]
 8008e76:	07d8      	lsls	r0, r3, #31
 8008e78:	d5ea      	bpl.n	8008e50 <_printf_float+0x194>
 8008e7a:	1c4b      	adds	r3, r1, #1
 8008e7c:	e7e7      	b.n	8008e4e <_printf_float+0x192>
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	bfd4      	ite	le
 8008e82:	f1c1 0202 	rsble	r2, r1, #2
 8008e86:	2201      	movgt	r2, #1
 8008e88:	4413      	add	r3, r2
 8008e8a:	e7e0      	b.n	8008e4e <_printf_float+0x192>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	055a      	lsls	r2, r3, #21
 8008e90:	d407      	bmi.n	8008ea2 <_printf_float+0x1e6>
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	4642      	mov	r2, r8
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d12b      	bne.n	8008ef8 <_printf_float+0x23c>
 8008ea0:	e767      	b.n	8008d72 <_printf_float+0xb6>
 8008ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ea6:	f240 80dd 	bls.w	8009064 <_printf_float+0x3a8>
 8008eaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	f7f7 fe21 	bl	8000af8 <__aeabi_dcmpeq>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d033      	beq.n	8008f22 <_printf_float+0x266>
 8008eba:	4a37      	ldr	r2, [pc, #220]	@ (8008f98 <_printf_float+0x2dc>)
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	47b8      	blx	r7
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	f43f af54 	beq.w	8008d72 <_printf_float+0xb6>
 8008eca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ece:	4543      	cmp	r3, r8
 8008ed0:	db02      	blt.n	8008ed8 <_printf_float+0x21c>
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	07d8      	lsls	r0, r3, #31
 8008ed6:	d50f      	bpl.n	8008ef8 <_printf_float+0x23c>
 8008ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008edc:	4631      	mov	r1, r6
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f43f af45 	beq.w	8008d72 <_printf_float+0xb6>
 8008ee8:	f04f 0900 	mov.w	r9, #0
 8008eec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008ef0:	f104 0a1a 	add.w	sl, r4, #26
 8008ef4:	45c8      	cmp	r8, r9
 8008ef6:	dc09      	bgt.n	8008f0c <_printf_float+0x250>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	079b      	lsls	r3, r3, #30
 8008efc:	f100 8103 	bmi.w	8009106 <_printf_float+0x44a>
 8008f00:	68e0      	ldr	r0, [r4, #12]
 8008f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f04:	4298      	cmp	r0, r3
 8008f06:	bfb8      	it	lt
 8008f08:	4618      	movlt	r0, r3
 8008f0a:	e734      	b.n	8008d76 <_printf_float+0xba>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	4652      	mov	r2, sl
 8008f10:	4631      	mov	r1, r6
 8008f12:	4628      	mov	r0, r5
 8008f14:	47b8      	blx	r7
 8008f16:	3001      	adds	r0, #1
 8008f18:	f43f af2b 	beq.w	8008d72 <_printf_float+0xb6>
 8008f1c:	f109 0901 	add.w	r9, r9, #1
 8008f20:	e7e8      	b.n	8008ef4 <_printf_float+0x238>
 8008f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dc39      	bgt.n	8008f9c <_printf_float+0x2e0>
 8008f28:	4a1b      	ldr	r2, [pc, #108]	@ (8008f98 <_printf_float+0x2dc>)
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4628      	mov	r0, r5
 8008f30:	47b8      	blx	r7
 8008f32:	3001      	adds	r0, #1
 8008f34:	f43f af1d 	beq.w	8008d72 <_printf_float+0xb6>
 8008f38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f3c:	ea59 0303 	orrs.w	r3, r9, r3
 8008f40:	d102      	bne.n	8008f48 <_printf_float+0x28c>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	07d9      	lsls	r1, r3, #31
 8008f46:	d5d7      	bpl.n	8008ef8 <_printf_float+0x23c>
 8008f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	f43f af0d 	beq.w	8008d72 <_printf_float+0xb6>
 8008f58:	f04f 0a00 	mov.w	sl, #0
 8008f5c:	f104 0b1a 	add.w	fp, r4, #26
 8008f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f62:	425b      	negs	r3, r3
 8008f64:	4553      	cmp	r3, sl
 8008f66:	dc01      	bgt.n	8008f6c <_printf_float+0x2b0>
 8008f68:	464b      	mov	r3, r9
 8008f6a:	e793      	b.n	8008e94 <_printf_float+0x1d8>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	465a      	mov	r2, fp
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	f43f aefb 	beq.w	8008d72 <_printf_float+0xb6>
 8008f7c:	f10a 0a01 	add.w	sl, sl, #1
 8008f80:	e7ee      	b.n	8008f60 <_printf_float+0x2a4>
 8008f82:	bf00      	nop
 8008f84:	7fefffff 	.word	0x7fefffff
 8008f88:	0800cac4 	.word	0x0800cac4
 8008f8c:	0800cac8 	.word	0x0800cac8
 8008f90:	0800cacc 	.word	0x0800cacc
 8008f94:	0800cad0 	.word	0x0800cad0
 8008f98:	0800cad4 	.word	0x0800cad4
 8008f9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fa2:	4553      	cmp	r3, sl
 8008fa4:	bfa8      	it	ge
 8008fa6:	4653      	movge	r3, sl
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	4699      	mov	r9, r3
 8008fac:	dc36      	bgt.n	800901c <_printf_float+0x360>
 8008fae:	f04f 0b00 	mov.w	fp, #0
 8008fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fb6:	f104 021a 	add.w	r2, r4, #26
 8008fba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fbc:	9306      	str	r3, [sp, #24]
 8008fbe:	eba3 0309 	sub.w	r3, r3, r9
 8008fc2:	455b      	cmp	r3, fp
 8008fc4:	dc31      	bgt.n	800902a <_printf_float+0x36e>
 8008fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc8:	459a      	cmp	sl, r3
 8008fca:	dc3a      	bgt.n	8009042 <_printf_float+0x386>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	07da      	lsls	r2, r3, #31
 8008fd0:	d437      	bmi.n	8009042 <_printf_float+0x386>
 8008fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd4:	ebaa 0903 	sub.w	r9, sl, r3
 8008fd8:	9b06      	ldr	r3, [sp, #24]
 8008fda:	ebaa 0303 	sub.w	r3, sl, r3
 8008fde:	4599      	cmp	r9, r3
 8008fe0:	bfa8      	it	ge
 8008fe2:	4699      	movge	r9, r3
 8008fe4:	f1b9 0f00 	cmp.w	r9, #0
 8008fe8:	dc33      	bgt.n	8009052 <_printf_float+0x396>
 8008fea:	f04f 0800 	mov.w	r8, #0
 8008fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ff2:	f104 0b1a 	add.w	fp, r4, #26
 8008ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff8:	ebaa 0303 	sub.w	r3, sl, r3
 8008ffc:	eba3 0309 	sub.w	r3, r3, r9
 8009000:	4543      	cmp	r3, r8
 8009002:	f77f af79 	ble.w	8008ef8 <_printf_float+0x23c>
 8009006:	2301      	movs	r3, #1
 8009008:	465a      	mov	r2, fp
 800900a:	4631      	mov	r1, r6
 800900c:	4628      	mov	r0, r5
 800900e:	47b8      	blx	r7
 8009010:	3001      	adds	r0, #1
 8009012:	f43f aeae 	beq.w	8008d72 <_printf_float+0xb6>
 8009016:	f108 0801 	add.w	r8, r8, #1
 800901a:	e7ec      	b.n	8008ff6 <_printf_float+0x33a>
 800901c:	4642      	mov	r2, r8
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	d1c2      	bne.n	8008fae <_printf_float+0x2f2>
 8009028:	e6a3      	b.n	8008d72 <_printf_float+0xb6>
 800902a:	2301      	movs	r3, #1
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	9206      	str	r2, [sp, #24]
 8009032:	47b8      	blx	r7
 8009034:	3001      	adds	r0, #1
 8009036:	f43f ae9c 	beq.w	8008d72 <_printf_float+0xb6>
 800903a:	9a06      	ldr	r2, [sp, #24]
 800903c:	f10b 0b01 	add.w	fp, fp, #1
 8009040:	e7bb      	b.n	8008fba <_printf_float+0x2fe>
 8009042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	d1c0      	bne.n	8008fd2 <_printf_float+0x316>
 8009050:	e68f      	b.n	8008d72 <_printf_float+0xb6>
 8009052:	9a06      	ldr	r2, [sp, #24]
 8009054:	464b      	mov	r3, r9
 8009056:	4442      	add	r2, r8
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	d1c3      	bne.n	8008fea <_printf_float+0x32e>
 8009062:	e686      	b.n	8008d72 <_printf_float+0xb6>
 8009064:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009068:	f1ba 0f01 	cmp.w	sl, #1
 800906c:	dc01      	bgt.n	8009072 <_printf_float+0x3b6>
 800906e:	07db      	lsls	r3, r3, #31
 8009070:	d536      	bpl.n	80090e0 <_printf_float+0x424>
 8009072:	2301      	movs	r3, #1
 8009074:	4642      	mov	r2, r8
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	f43f ae78 	beq.w	8008d72 <_printf_float+0xb6>
 8009082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae70 	beq.w	8008d72 <_printf_float+0xb6>
 8009092:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009096:	2200      	movs	r2, #0
 8009098:	2300      	movs	r3, #0
 800909a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800909e:	f7f7 fd2b 	bl	8000af8 <__aeabi_dcmpeq>
 80090a2:	b9c0      	cbnz	r0, 80090d6 <_printf_float+0x41a>
 80090a4:	4653      	mov	r3, sl
 80090a6:	f108 0201 	add.w	r2, r8, #1
 80090aa:	4631      	mov	r1, r6
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b8      	blx	r7
 80090b0:	3001      	adds	r0, #1
 80090b2:	d10c      	bne.n	80090ce <_printf_float+0x412>
 80090b4:	e65d      	b.n	8008d72 <_printf_float+0xb6>
 80090b6:	2301      	movs	r3, #1
 80090b8:	465a      	mov	r2, fp
 80090ba:	4631      	mov	r1, r6
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f ae56 	beq.w	8008d72 <_printf_float+0xb6>
 80090c6:	f108 0801 	add.w	r8, r8, #1
 80090ca:	45d0      	cmp	r8, sl
 80090cc:	dbf3      	blt.n	80090b6 <_printf_float+0x3fa>
 80090ce:	464b      	mov	r3, r9
 80090d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090d4:	e6df      	b.n	8008e96 <_printf_float+0x1da>
 80090d6:	f04f 0800 	mov.w	r8, #0
 80090da:	f104 0b1a 	add.w	fp, r4, #26
 80090de:	e7f4      	b.n	80090ca <_printf_float+0x40e>
 80090e0:	2301      	movs	r3, #1
 80090e2:	4642      	mov	r2, r8
 80090e4:	e7e1      	b.n	80090aa <_printf_float+0x3ee>
 80090e6:	2301      	movs	r3, #1
 80090e8:	464a      	mov	r2, r9
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	f43f ae3e 	beq.w	8008d72 <_printf_float+0xb6>
 80090f6:	f108 0801 	add.w	r8, r8, #1
 80090fa:	68e3      	ldr	r3, [r4, #12]
 80090fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090fe:	1a5b      	subs	r3, r3, r1
 8009100:	4543      	cmp	r3, r8
 8009102:	dcf0      	bgt.n	80090e6 <_printf_float+0x42a>
 8009104:	e6fc      	b.n	8008f00 <_printf_float+0x244>
 8009106:	f04f 0800 	mov.w	r8, #0
 800910a:	f104 0919 	add.w	r9, r4, #25
 800910e:	e7f4      	b.n	80090fa <_printf_float+0x43e>

08009110 <_printf_common>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	4616      	mov	r6, r2
 8009116:	4698      	mov	r8, r3
 8009118:	688a      	ldr	r2, [r1, #8]
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009120:	4293      	cmp	r3, r2
 8009122:	bfb8      	it	lt
 8009124:	4613      	movlt	r3, r2
 8009126:	6033      	str	r3, [r6, #0]
 8009128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800912c:	4607      	mov	r7, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b10a      	cbz	r2, 8009136 <_printf_common+0x26>
 8009132:	3301      	adds	r3, #1
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	0699      	lsls	r1, r3, #26
 800913a:	bf42      	ittt	mi
 800913c:	6833      	ldrmi	r3, [r6, #0]
 800913e:	3302      	addmi	r3, #2
 8009140:	6033      	strmi	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	f015 0506 	ands.w	r5, r5, #6
 8009148:	d106      	bne.n	8009158 <_printf_common+0x48>
 800914a:	f104 0a19 	add.w	sl, r4, #25
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	6832      	ldr	r2, [r6, #0]
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	42ab      	cmp	r3, r5
 8009156:	dc26      	bgt.n	80091a6 <_printf_common+0x96>
 8009158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	3b00      	subs	r3, #0
 8009160:	bf18      	it	ne
 8009162:	2301      	movne	r3, #1
 8009164:	0692      	lsls	r2, r2, #26
 8009166:	d42b      	bmi.n	80091c0 <_printf_common+0xb0>
 8009168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800916c:	4641      	mov	r1, r8
 800916e:	4638      	mov	r0, r7
 8009170:	47c8      	blx	r9
 8009172:	3001      	adds	r0, #1
 8009174:	d01e      	beq.n	80091b4 <_printf_common+0xa4>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	6922      	ldr	r2, [r4, #16]
 800917a:	f003 0306 	and.w	r3, r3, #6
 800917e:	2b04      	cmp	r3, #4
 8009180:	bf02      	ittt	eq
 8009182:	68e5      	ldreq	r5, [r4, #12]
 8009184:	6833      	ldreq	r3, [r6, #0]
 8009186:	1aed      	subeq	r5, r5, r3
 8009188:	68a3      	ldr	r3, [r4, #8]
 800918a:	bf0c      	ite	eq
 800918c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009190:	2500      	movne	r5, #0
 8009192:	4293      	cmp	r3, r2
 8009194:	bfc4      	itt	gt
 8009196:	1a9b      	subgt	r3, r3, r2
 8009198:	18ed      	addgt	r5, r5, r3
 800919a:	2600      	movs	r6, #0
 800919c:	341a      	adds	r4, #26
 800919e:	42b5      	cmp	r5, r6
 80091a0:	d11a      	bne.n	80091d8 <_printf_common+0xc8>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e008      	b.n	80091b8 <_printf_common+0xa8>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4641      	mov	r1, r8
 80091ac:	4638      	mov	r0, r7
 80091ae:	47c8      	blx	r9
 80091b0:	3001      	adds	r0, #1
 80091b2:	d103      	bne.n	80091bc <_printf_common+0xac>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	3501      	adds	r5, #1
 80091be:	e7c6      	b.n	800914e <_printf_common+0x3e>
 80091c0:	18e1      	adds	r1, r4, r3
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	2030      	movs	r0, #48	@ 0x30
 80091c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091ca:	4422      	add	r2, r4
 80091cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7c7      	b.n	8009168 <_printf_common+0x58>
 80091d8:	2301      	movs	r3, #1
 80091da:	4622      	mov	r2, r4
 80091dc:	4641      	mov	r1, r8
 80091de:	4638      	mov	r0, r7
 80091e0:	47c8      	blx	r9
 80091e2:	3001      	adds	r0, #1
 80091e4:	d0e6      	beq.n	80091b4 <_printf_common+0xa4>
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7d9      	b.n	800919e <_printf_common+0x8e>
	...

080091ec <_printf_i>:
 80091ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	7e0f      	ldrb	r7, [r1, #24]
 80091f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091f4:	2f78      	cmp	r7, #120	@ 0x78
 80091f6:	4691      	mov	r9, r2
 80091f8:	4680      	mov	r8, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	469a      	mov	sl, r3
 80091fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009202:	d807      	bhi.n	8009214 <_printf_i+0x28>
 8009204:	2f62      	cmp	r7, #98	@ 0x62
 8009206:	d80a      	bhi.n	800921e <_printf_i+0x32>
 8009208:	2f00      	cmp	r7, #0
 800920a:	f000 80d2 	beq.w	80093b2 <_printf_i+0x1c6>
 800920e:	2f58      	cmp	r7, #88	@ 0x58
 8009210:	f000 80b9 	beq.w	8009386 <_printf_i+0x19a>
 8009214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800921c:	e03a      	b.n	8009294 <_printf_i+0xa8>
 800921e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009222:	2b15      	cmp	r3, #21
 8009224:	d8f6      	bhi.n	8009214 <_printf_i+0x28>
 8009226:	a101      	add	r1, pc, #4	@ (adr r1, 800922c <_printf_i+0x40>)
 8009228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800922c:	08009285 	.word	0x08009285
 8009230:	08009299 	.word	0x08009299
 8009234:	08009215 	.word	0x08009215
 8009238:	08009215 	.word	0x08009215
 800923c:	08009215 	.word	0x08009215
 8009240:	08009215 	.word	0x08009215
 8009244:	08009299 	.word	0x08009299
 8009248:	08009215 	.word	0x08009215
 800924c:	08009215 	.word	0x08009215
 8009250:	08009215 	.word	0x08009215
 8009254:	08009215 	.word	0x08009215
 8009258:	08009399 	.word	0x08009399
 800925c:	080092c3 	.word	0x080092c3
 8009260:	08009353 	.word	0x08009353
 8009264:	08009215 	.word	0x08009215
 8009268:	08009215 	.word	0x08009215
 800926c:	080093bb 	.word	0x080093bb
 8009270:	08009215 	.word	0x08009215
 8009274:	080092c3 	.word	0x080092c3
 8009278:	08009215 	.word	0x08009215
 800927c:	08009215 	.word	0x08009215
 8009280:	0800935b 	.word	0x0800935b
 8009284:	6833      	ldr	r3, [r6, #0]
 8009286:	1d1a      	adds	r2, r3, #4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6032      	str	r2, [r6, #0]
 800928c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009294:	2301      	movs	r3, #1
 8009296:	e09d      	b.n	80093d4 <_printf_i+0x1e8>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	6820      	ldr	r0, [r4, #0]
 800929c:	1d19      	adds	r1, r3, #4
 800929e:	6031      	str	r1, [r6, #0]
 80092a0:	0606      	lsls	r6, r0, #24
 80092a2:	d501      	bpl.n	80092a8 <_printf_i+0xbc>
 80092a4:	681d      	ldr	r5, [r3, #0]
 80092a6:	e003      	b.n	80092b0 <_printf_i+0xc4>
 80092a8:	0645      	lsls	r5, r0, #25
 80092aa:	d5fb      	bpl.n	80092a4 <_printf_i+0xb8>
 80092ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	da03      	bge.n	80092bc <_printf_i+0xd0>
 80092b4:	232d      	movs	r3, #45	@ 0x2d
 80092b6:	426d      	negs	r5, r5
 80092b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092bc:	4859      	ldr	r0, [pc, #356]	@ (8009424 <_printf_i+0x238>)
 80092be:	230a      	movs	r3, #10
 80092c0:	e011      	b.n	80092e6 <_printf_i+0xfa>
 80092c2:	6821      	ldr	r1, [r4, #0]
 80092c4:	6833      	ldr	r3, [r6, #0]
 80092c6:	0608      	lsls	r0, r1, #24
 80092c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80092cc:	d402      	bmi.n	80092d4 <_printf_i+0xe8>
 80092ce:	0649      	lsls	r1, r1, #25
 80092d0:	bf48      	it	mi
 80092d2:	b2ad      	uxthmi	r5, r5
 80092d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80092d6:	4853      	ldr	r0, [pc, #332]	@ (8009424 <_printf_i+0x238>)
 80092d8:	6033      	str	r3, [r6, #0]
 80092da:	bf14      	ite	ne
 80092dc:	230a      	movne	r3, #10
 80092de:	2308      	moveq	r3, #8
 80092e0:	2100      	movs	r1, #0
 80092e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092e6:	6866      	ldr	r6, [r4, #4]
 80092e8:	60a6      	str	r6, [r4, #8]
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	bfa2      	ittt	ge
 80092ee:	6821      	ldrge	r1, [r4, #0]
 80092f0:	f021 0104 	bicge.w	r1, r1, #4
 80092f4:	6021      	strge	r1, [r4, #0]
 80092f6:	b90d      	cbnz	r5, 80092fc <_printf_i+0x110>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	d04b      	beq.n	8009394 <_printf_i+0x1a8>
 80092fc:	4616      	mov	r6, r2
 80092fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009302:	fb03 5711 	mls	r7, r3, r1, r5
 8009306:	5dc7      	ldrb	r7, [r0, r7]
 8009308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800930c:	462f      	mov	r7, r5
 800930e:	42bb      	cmp	r3, r7
 8009310:	460d      	mov	r5, r1
 8009312:	d9f4      	bls.n	80092fe <_printf_i+0x112>
 8009314:	2b08      	cmp	r3, #8
 8009316:	d10b      	bne.n	8009330 <_printf_i+0x144>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	07df      	lsls	r7, r3, #31
 800931c:	d508      	bpl.n	8009330 <_printf_i+0x144>
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	6861      	ldr	r1, [r4, #4]
 8009322:	4299      	cmp	r1, r3
 8009324:	bfde      	ittt	le
 8009326:	2330      	movle	r3, #48	@ 0x30
 8009328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800932c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009330:	1b92      	subs	r2, r2, r6
 8009332:	6122      	str	r2, [r4, #16]
 8009334:	f8cd a000 	str.w	sl, [sp]
 8009338:	464b      	mov	r3, r9
 800933a:	aa03      	add	r2, sp, #12
 800933c:	4621      	mov	r1, r4
 800933e:	4640      	mov	r0, r8
 8009340:	f7ff fee6 	bl	8009110 <_printf_common>
 8009344:	3001      	adds	r0, #1
 8009346:	d14a      	bne.n	80093de <_printf_i+0x1f2>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800934c:	b004      	add	sp, #16
 800934e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	f043 0320 	orr.w	r3, r3, #32
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	4833      	ldr	r0, [pc, #204]	@ (8009428 <_printf_i+0x23c>)
 800935c:	2778      	movs	r7, #120	@ 0x78
 800935e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	6831      	ldr	r1, [r6, #0]
 8009366:	061f      	lsls	r7, r3, #24
 8009368:	f851 5b04 	ldr.w	r5, [r1], #4
 800936c:	d402      	bmi.n	8009374 <_printf_i+0x188>
 800936e:	065f      	lsls	r7, r3, #25
 8009370:	bf48      	it	mi
 8009372:	b2ad      	uxthmi	r5, r5
 8009374:	6031      	str	r1, [r6, #0]
 8009376:	07d9      	lsls	r1, r3, #31
 8009378:	bf44      	itt	mi
 800937a:	f043 0320 	orrmi.w	r3, r3, #32
 800937e:	6023      	strmi	r3, [r4, #0]
 8009380:	b11d      	cbz	r5, 800938a <_printf_i+0x19e>
 8009382:	2310      	movs	r3, #16
 8009384:	e7ac      	b.n	80092e0 <_printf_i+0xf4>
 8009386:	4827      	ldr	r0, [pc, #156]	@ (8009424 <_printf_i+0x238>)
 8009388:	e7e9      	b.n	800935e <_printf_i+0x172>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	f023 0320 	bic.w	r3, r3, #32
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	e7f6      	b.n	8009382 <_printf_i+0x196>
 8009394:	4616      	mov	r6, r2
 8009396:	e7bd      	b.n	8009314 <_printf_i+0x128>
 8009398:	6833      	ldr	r3, [r6, #0]
 800939a:	6825      	ldr	r5, [r4, #0]
 800939c:	6961      	ldr	r1, [r4, #20]
 800939e:	1d18      	adds	r0, r3, #4
 80093a0:	6030      	str	r0, [r6, #0]
 80093a2:	062e      	lsls	r6, r5, #24
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	d501      	bpl.n	80093ac <_printf_i+0x1c0>
 80093a8:	6019      	str	r1, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <_printf_i+0x1c6>
 80093ac:	0668      	lsls	r0, r5, #25
 80093ae:	d5fb      	bpl.n	80093a8 <_printf_i+0x1bc>
 80093b0:	8019      	strh	r1, [r3, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	4616      	mov	r6, r2
 80093b8:	e7bc      	b.n	8009334 <_printf_i+0x148>
 80093ba:	6833      	ldr	r3, [r6, #0]
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	6032      	str	r2, [r6, #0]
 80093c0:	681e      	ldr	r6, [r3, #0]
 80093c2:	6862      	ldr	r2, [r4, #4]
 80093c4:	2100      	movs	r1, #0
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7f6 ff1a 	bl	8000200 <memchr>
 80093cc:	b108      	cbz	r0, 80093d2 <_printf_i+0x1e6>
 80093ce:	1b80      	subs	r0, r0, r6
 80093d0:	6060      	str	r0, [r4, #4]
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	2300      	movs	r3, #0
 80093d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093dc:	e7aa      	b.n	8009334 <_printf_i+0x148>
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	4632      	mov	r2, r6
 80093e2:	4649      	mov	r1, r9
 80093e4:	4640      	mov	r0, r8
 80093e6:	47d0      	blx	sl
 80093e8:	3001      	adds	r0, #1
 80093ea:	d0ad      	beq.n	8009348 <_printf_i+0x15c>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	079b      	lsls	r3, r3, #30
 80093f0:	d413      	bmi.n	800941a <_printf_i+0x22e>
 80093f2:	68e0      	ldr	r0, [r4, #12]
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	4298      	cmp	r0, r3
 80093f8:	bfb8      	it	lt
 80093fa:	4618      	movlt	r0, r3
 80093fc:	e7a6      	b.n	800934c <_printf_i+0x160>
 80093fe:	2301      	movs	r3, #1
 8009400:	4632      	mov	r2, r6
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	47d0      	blx	sl
 8009408:	3001      	adds	r0, #1
 800940a:	d09d      	beq.n	8009348 <_printf_i+0x15c>
 800940c:	3501      	adds	r5, #1
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	9903      	ldr	r1, [sp, #12]
 8009412:	1a5b      	subs	r3, r3, r1
 8009414:	42ab      	cmp	r3, r5
 8009416:	dcf2      	bgt.n	80093fe <_printf_i+0x212>
 8009418:	e7eb      	b.n	80093f2 <_printf_i+0x206>
 800941a:	2500      	movs	r5, #0
 800941c:	f104 0619 	add.w	r6, r4, #25
 8009420:	e7f5      	b.n	800940e <_printf_i+0x222>
 8009422:	bf00      	nop
 8009424:	0800cad6 	.word	0x0800cad6
 8009428:	0800cae7 	.word	0x0800cae7

0800942c <std>:
 800942c:	2300      	movs	r3, #0
 800942e:	b510      	push	{r4, lr}
 8009430:	4604      	mov	r4, r0
 8009432:	e9c0 3300 	strd	r3, r3, [r0]
 8009436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800943a:	6083      	str	r3, [r0, #8]
 800943c:	8181      	strh	r1, [r0, #12]
 800943e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009440:	81c2      	strh	r2, [r0, #14]
 8009442:	6183      	str	r3, [r0, #24]
 8009444:	4619      	mov	r1, r3
 8009446:	2208      	movs	r2, #8
 8009448:	305c      	adds	r0, #92	@ 0x5c
 800944a:	f000 f921 	bl	8009690 <memset>
 800944e:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <std+0x58>)
 8009450:	6263      	str	r3, [r4, #36]	@ 0x24
 8009452:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <std+0x5c>)
 8009454:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009456:	4b0d      	ldr	r3, [pc, #52]	@ (800948c <std+0x60>)
 8009458:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <std+0x64>)
 800945c:	6323      	str	r3, [r4, #48]	@ 0x30
 800945e:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <std+0x68>)
 8009460:	6224      	str	r4, [r4, #32]
 8009462:	429c      	cmp	r4, r3
 8009464:	d006      	beq.n	8009474 <std+0x48>
 8009466:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800946a:	4294      	cmp	r4, r2
 800946c:	d002      	beq.n	8009474 <std+0x48>
 800946e:	33d0      	adds	r3, #208	@ 0xd0
 8009470:	429c      	cmp	r4, r3
 8009472:	d105      	bne.n	8009480 <std+0x54>
 8009474:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800947c:	f000 b93e 	b.w	80096fc <__retarget_lock_init_recursive>
 8009480:	bd10      	pop	{r4, pc}
 8009482:	bf00      	nop
 8009484:	0800afed 	.word	0x0800afed
 8009488:	0800b00f 	.word	0x0800b00f
 800948c:	0800b047 	.word	0x0800b047
 8009490:	0800b06b 	.word	0x0800b06b
 8009494:	200006a8 	.word	0x200006a8

08009498 <stdio_exit_handler>:
 8009498:	4a02      	ldr	r2, [pc, #8]	@ (80094a4 <stdio_exit_handler+0xc>)
 800949a:	4903      	ldr	r1, [pc, #12]	@ (80094a8 <stdio_exit_handler+0x10>)
 800949c:	4803      	ldr	r0, [pc, #12]	@ (80094ac <stdio_exit_handler+0x14>)
 800949e:	f000 b869 	b.w	8009574 <_fwalk_sglue>
 80094a2:	bf00      	nop
 80094a4:	20000224 	.word	0x20000224
 80094a8:	0800a881 	.word	0x0800a881
 80094ac:	20000234 	.word	0x20000234

080094b0 <cleanup_stdio>:
 80094b0:	6841      	ldr	r1, [r0, #4]
 80094b2:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <cleanup_stdio+0x34>)
 80094b4:	4299      	cmp	r1, r3
 80094b6:	b510      	push	{r4, lr}
 80094b8:	4604      	mov	r4, r0
 80094ba:	d001      	beq.n	80094c0 <cleanup_stdio+0x10>
 80094bc:	f001 f9e0 	bl	800a880 <_fflush_r>
 80094c0:	68a1      	ldr	r1, [r4, #8]
 80094c2:	4b09      	ldr	r3, [pc, #36]	@ (80094e8 <cleanup_stdio+0x38>)
 80094c4:	4299      	cmp	r1, r3
 80094c6:	d002      	beq.n	80094ce <cleanup_stdio+0x1e>
 80094c8:	4620      	mov	r0, r4
 80094ca:	f001 f9d9 	bl	800a880 <_fflush_r>
 80094ce:	68e1      	ldr	r1, [r4, #12]
 80094d0:	4b06      	ldr	r3, [pc, #24]	@ (80094ec <cleanup_stdio+0x3c>)
 80094d2:	4299      	cmp	r1, r3
 80094d4:	d004      	beq.n	80094e0 <cleanup_stdio+0x30>
 80094d6:	4620      	mov	r0, r4
 80094d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094dc:	f001 b9d0 	b.w	800a880 <_fflush_r>
 80094e0:	bd10      	pop	{r4, pc}
 80094e2:	bf00      	nop
 80094e4:	200006a8 	.word	0x200006a8
 80094e8:	20000710 	.word	0x20000710
 80094ec:	20000778 	.word	0x20000778

080094f0 <global_stdio_init.part.0>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009520 <global_stdio_init.part.0+0x30>)
 80094f4:	4c0b      	ldr	r4, [pc, #44]	@ (8009524 <global_stdio_init.part.0+0x34>)
 80094f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009528 <global_stdio_init.part.0+0x38>)
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	4620      	mov	r0, r4
 80094fc:	2200      	movs	r2, #0
 80094fe:	2104      	movs	r1, #4
 8009500:	f7ff ff94 	bl	800942c <std>
 8009504:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009508:	2201      	movs	r2, #1
 800950a:	2109      	movs	r1, #9
 800950c:	f7ff ff8e 	bl	800942c <std>
 8009510:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009514:	2202      	movs	r2, #2
 8009516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951a:	2112      	movs	r1, #18
 800951c:	f7ff bf86 	b.w	800942c <std>
 8009520:	200007e0 	.word	0x200007e0
 8009524:	200006a8 	.word	0x200006a8
 8009528:	08009499 	.word	0x08009499

0800952c <__sfp_lock_acquire>:
 800952c:	4801      	ldr	r0, [pc, #4]	@ (8009534 <__sfp_lock_acquire+0x8>)
 800952e:	f000 b8e6 	b.w	80096fe <__retarget_lock_acquire_recursive>
 8009532:	bf00      	nop
 8009534:	200007e5 	.word	0x200007e5

08009538 <__sfp_lock_release>:
 8009538:	4801      	ldr	r0, [pc, #4]	@ (8009540 <__sfp_lock_release+0x8>)
 800953a:	f000 b8e1 	b.w	8009700 <__retarget_lock_release_recursive>
 800953e:	bf00      	nop
 8009540:	200007e5 	.word	0x200007e5

08009544 <__sinit>:
 8009544:	b510      	push	{r4, lr}
 8009546:	4604      	mov	r4, r0
 8009548:	f7ff fff0 	bl	800952c <__sfp_lock_acquire>
 800954c:	6a23      	ldr	r3, [r4, #32]
 800954e:	b11b      	cbz	r3, 8009558 <__sinit+0x14>
 8009550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009554:	f7ff bff0 	b.w	8009538 <__sfp_lock_release>
 8009558:	4b04      	ldr	r3, [pc, #16]	@ (800956c <__sinit+0x28>)
 800955a:	6223      	str	r3, [r4, #32]
 800955c:	4b04      	ldr	r3, [pc, #16]	@ (8009570 <__sinit+0x2c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1f5      	bne.n	8009550 <__sinit+0xc>
 8009564:	f7ff ffc4 	bl	80094f0 <global_stdio_init.part.0>
 8009568:	e7f2      	b.n	8009550 <__sinit+0xc>
 800956a:	bf00      	nop
 800956c:	080094b1 	.word	0x080094b1
 8009570:	200007e0 	.word	0x200007e0

08009574 <_fwalk_sglue>:
 8009574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009578:	4607      	mov	r7, r0
 800957a:	4688      	mov	r8, r1
 800957c:	4614      	mov	r4, r2
 800957e:	2600      	movs	r6, #0
 8009580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009584:	f1b9 0901 	subs.w	r9, r9, #1
 8009588:	d505      	bpl.n	8009596 <_fwalk_sglue+0x22>
 800958a:	6824      	ldr	r4, [r4, #0]
 800958c:	2c00      	cmp	r4, #0
 800958e:	d1f7      	bne.n	8009580 <_fwalk_sglue+0xc>
 8009590:	4630      	mov	r0, r6
 8009592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d907      	bls.n	80095ac <_fwalk_sglue+0x38>
 800959c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095a0:	3301      	adds	r3, #1
 80095a2:	d003      	beq.n	80095ac <_fwalk_sglue+0x38>
 80095a4:	4629      	mov	r1, r5
 80095a6:	4638      	mov	r0, r7
 80095a8:	47c0      	blx	r8
 80095aa:	4306      	orrs	r6, r0
 80095ac:	3568      	adds	r5, #104	@ 0x68
 80095ae:	e7e9      	b.n	8009584 <_fwalk_sglue+0x10>

080095b0 <iprintf>:
 80095b0:	b40f      	push	{r0, r1, r2, r3}
 80095b2:	b507      	push	{r0, r1, r2, lr}
 80095b4:	4906      	ldr	r1, [pc, #24]	@ (80095d0 <iprintf+0x20>)
 80095b6:	ab04      	add	r3, sp, #16
 80095b8:	6808      	ldr	r0, [r1, #0]
 80095ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80095be:	6881      	ldr	r1, [r0, #8]
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	f000 ff17 	bl	800a3f4 <_vfiprintf_r>
 80095c6:	b003      	add	sp, #12
 80095c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80095cc:	b004      	add	sp, #16
 80095ce:	4770      	bx	lr
 80095d0:	20000230 	.word	0x20000230

080095d4 <_puts_r>:
 80095d4:	6a03      	ldr	r3, [r0, #32]
 80095d6:	b570      	push	{r4, r5, r6, lr}
 80095d8:	6884      	ldr	r4, [r0, #8]
 80095da:	4605      	mov	r5, r0
 80095dc:	460e      	mov	r6, r1
 80095de:	b90b      	cbnz	r3, 80095e4 <_puts_r+0x10>
 80095e0:	f7ff ffb0 	bl	8009544 <__sinit>
 80095e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095e6:	07db      	lsls	r3, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_puts_r+0x22>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	0598      	lsls	r0, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_puts_r+0x22>
 80095f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095f2:	f000 f884 	bl	80096fe <__retarget_lock_acquire_recursive>
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	0719      	lsls	r1, r3, #28
 80095fa:	d502      	bpl.n	8009602 <_puts_r+0x2e>
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d135      	bne.n	800966e <_puts_r+0x9a>
 8009602:	4621      	mov	r1, r4
 8009604:	4628      	mov	r0, r5
 8009606:	f001 fd73 	bl	800b0f0 <__swsetup_r>
 800960a:	b380      	cbz	r0, 800966e <_puts_r+0x9a>
 800960c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009610:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009612:	07da      	lsls	r2, r3, #31
 8009614:	d405      	bmi.n	8009622 <_puts_r+0x4e>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	059b      	lsls	r3, r3, #22
 800961a:	d402      	bmi.n	8009622 <_puts_r+0x4e>
 800961c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800961e:	f000 f86f 	bl	8009700 <__retarget_lock_release_recursive>
 8009622:	4628      	mov	r0, r5
 8009624:	bd70      	pop	{r4, r5, r6, pc}
 8009626:	2b00      	cmp	r3, #0
 8009628:	da04      	bge.n	8009634 <_puts_r+0x60>
 800962a:	69a2      	ldr	r2, [r4, #24]
 800962c:	429a      	cmp	r2, r3
 800962e:	dc17      	bgt.n	8009660 <_puts_r+0x8c>
 8009630:	290a      	cmp	r1, #10
 8009632:	d015      	beq.n	8009660 <_puts_r+0x8c>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	7019      	strb	r1, [r3, #0]
 800963c:	68a3      	ldr	r3, [r4, #8]
 800963e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009642:	3b01      	subs	r3, #1
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	2900      	cmp	r1, #0
 8009648:	d1ed      	bne.n	8009626 <_puts_r+0x52>
 800964a:	2b00      	cmp	r3, #0
 800964c:	da11      	bge.n	8009672 <_puts_r+0x9e>
 800964e:	4622      	mov	r2, r4
 8009650:	210a      	movs	r1, #10
 8009652:	4628      	mov	r0, r5
 8009654:	f001 fd0d 	bl	800b072 <__swbuf_r>
 8009658:	3001      	adds	r0, #1
 800965a:	d0d7      	beq.n	800960c <_puts_r+0x38>
 800965c:	250a      	movs	r5, #10
 800965e:	e7d7      	b.n	8009610 <_puts_r+0x3c>
 8009660:	4622      	mov	r2, r4
 8009662:	4628      	mov	r0, r5
 8009664:	f001 fd05 	bl	800b072 <__swbuf_r>
 8009668:	3001      	adds	r0, #1
 800966a:	d1e7      	bne.n	800963c <_puts_r+0x68>
 800966c:	e7ce      	b.n	800960c <_puts_r+0x38>
 800966e:	3e01      	subs	r6, #1
 8009670:	e7e4      	b.n	800963c <_puts_r+0x68>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	6022      	str	r2, [r4, #0]
 8009678:	220a      	movs	r2, #10
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	e7ee      	b.n	800965c <_puts_r+0x88>
	...

08009680 <puts>:
 8009680:	4b02      	ldr	r3, [pc, #8]	@ (800968c <puts+0xc>)
 8009682:	4601      	mov	r1, r0
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	f7ff bfa5 	b.w	80095d4 <_puts_r>
 800968a:	bf00      	nop
 800968c:	20000230 	.word	0x20000230

08009690 <memset>:
 8009690:	4402      	add	r2, r0
 8009692:	4603      	mov	r3, r0
 8009694:	4293      	cmp	r3, r2
 8009696:	d100      	bne.n	800969a <memset+0xa>
 8009698:	4770      	bx	lr
 800969a:	f803 1b01 	strb.w	r1, [r3], #1
 800969e:	e7f9      	b.n	8009694 <memset+0x4>

080096a0 <_localeconv_r>:
 80096a0:	4800      	ldr	r0, [pc, #0]	@ (80096a4 <_localeconv_r+0x4>)
 80096a2:	4770      	bx	lr
 80096a4:	20000370 	.word	0x20000370

080096a8 <__errno>:
 80096a8:	4b01      	ldr	r3, [pc, #4]	@ (80096b0 <__errno+0x8>)
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000230 	.word	0x20000230

080096b4 <__libc_init_array>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	4d0d      	ldr	r5, [pc, #52]	@ (80096ec <__libc_init_array+0x38>)
 80096b8:	4c0d      	ldr	r4, [pc, #52]	@ (80096f0 <__libc_init_array+0x3c>)
 80096ba:	1b64      	subs	r4, r4, r5
 80096bc:	10a4      	asrs	r4, r4, #2
 80096be:	2600      	movs	r6, #0
 80096c0:	42a6      	cmp	r6, r4
 80096c2:	d109      	bne.n	80096d8 <__libc_init_array+0x24>
 80096c4:	4d0b      	ldr	r5, [pc, #44]	@ (80096f4 <__libc_init_array+0x40>)
 80096c6:	4c0c      	ldr	r4, [pc, #48]	@ (80096f8 <__libc_init_array+0x44>)
 80096c8:	f001 ff48 	bl	800b55c <_init>
 80096cc:	1b64      	subs	r4, r4, r5
 80096ce:	10a4      	asrs	r4, r4, #2
 80096d0:	2600      	movs	r6, #0
 80096d2:	42a6      	cmp	r6, r4
 80096d4:	d105      	bne.n	80096e2 <__libc_init_array+0x2e>
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096dc:	4798      	blx	r3
 80096de:	3601      	adds	r6, #1
 80096e0:	e7ee      	b.n	80096c0 <__libc_init_array+0xc>
 80096e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e6:	4798      	blx	r3
 80096e8:	3601      	adds	r6, #1
 80096ea:	e7f2      	b.n	80096d2 <__libc_init_array+0x1e>
 80096ec:	0800ce40 	.word	0x0800ce40
 80096f0:	0800ce40 	.word	0x0800ce40
 80096f4:	0800ce40 	.word	0x0800ce40
 80096f8:	0800ce44 	.word	0x0800ce44

080096fc <__retarget_lock_init_recursive>:
 80096fc:	4770      	bx	lr

080096fe <__retarget_lock_acquire_recursive>:
 80096fe:	4770      	bx	lr

08009700 <__retarget_lock_release_recursive>:
 8009700:	4770      	bx	lr

08009702 <quorem>:
 8009702:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009706:	6903      	ldr	r3, [r0, #16]
 8009708:	690c      	ldr	r4, [r1, #16]
 800970a:	42a3      	cmp	r3, r4
 800970c:	4607      	mov	r7, r0
 800970e:	db7e      	blt.n	800980e <quorem+0x10c>
 8009710:	3c01      	subs	r4, #1
 8009712:	f101 0814 	add.w	r8, r1, #20
 8009716:	00a3      	lsls	r3, r4, #2
 8009718:	f100 0514 	add.w	r5, r0, #20
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800972c:	3301      	adds	r3, #1
 800972e:	429a      	cmp	r2, r3
 8009730:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009734:	fbb2 f6f3 	udiv	r6, r2, r3
 8009738:	d32e      	bcc.n	8009798 <quorem+0x96>
 800973a:	f04f 0a00 	mov.w	sl, #0
 800973e:	46c4      	mov	ip, r8
 8009740:	46ae      	mov	lr, r5
 8009742:	46d3      	mov	fp, sl
 8009744:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009748:	b298      	uxth	r0, r3
 800974a:	fb06 a000 	mla	r0, r6, r0, sl
 800974e:	0c02      	lsrs	r2, r0, #16
 8009750:	0c1b      	lsrs	r3, r3, #16
 8009752:	fb06 2303 	mla	r3, r6, r3, r2
 8009756:	f8de 2000 	ldr.w	r2, [lr]
 800975a:	b280      	uxth	r0, r0
 800975c:	b292      	uxth	r2, r2
 800975e:	1a12      	subs	r2, r2, r0
 8009760:	445a      	add	r2, fp
 8009762:	f8de 0000 	ldr.w	r0, [lr]
 8009766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800976a:	b29b      	uxth	r3, r3
 800976c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009770:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009774:	b292      	uxth	r2, r2
 8009776:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800977a:	45e1      	cmp	r9, ip
 800977c:	f84e 2b04 	str.w	r2, [lr], #4
 8009780:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009784:	d2de      	bcs.n	8009744 <quorem+0x42>
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	58eb      	ldr	r3, [r5, r3]
 800978a:	b92b      	cbnz	r3, 8009798 <quorem+0x96>
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	3b04      	subs	r3, #4
 8009790:	429d      	cmp	r5, r3
 8009792:	461a      	mov	r2, r3
 8009794:	d32f      	bcc.n	80097f6 <quorem+0xf4>
 8009796:	613c      	str	r4, [r7, #16]
 8009798:	4638      	mov	r0, r7
 800979a:	f001 fb1f 	bl	800addc <__mcmp>
 800979e:	2800      	cmp	r0, #0
 80097a0:	db25      	blt.n	80097ee <quorem+0xec>
 80097a2:	4629      	mov	r1, r5
 80097a4:	2000      	movs	r0, #0
 80097a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80097aa:	f8d1 c000 	ldr.w	ip, [r1]
 80097ae:	fa1f fe82 	uxth.w	lr, r2
 80097b2:	fa1f f38c 	uxth.w	r3, ip
 80097b6:	eba3 030e 	sub.w	r3, r3, lr
 80097ba:	4403      	add	r3, r0
 80097bc:	0c12      	lsrs	r2, r2, #16
 80097be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80097c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097cc:	45c1      	cmp	r9, r8
 80097ce:	f841 3b04 	str.w	r3, [r1], #4
 80097d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097d6:	d2e6      	bcs.n	80097a6 <quorem+0xa4>
 80097d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097e0:	b922      	cbnz	r2, 80097ec <quorem+0xea>
 80097e2:	3b04      	subs	r3, #4
 80097e4:	429d      	cmp	r5, r3
 80097e6:	461a      	mov	r2, r3
 80097e8:	d30b      	bcc.n	8009802 <quorem+0x100>
 80097ea:	613c      	str	r4, [r7, #16]
 80097ec:	3601      	adds	r6, #1
 80097ee:	4630      	mov	r0, r6
 80097f0:	b003      	add	sp, #12
 80097f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	3b04      	subs	r3, #4
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	d1cb      	bne.n	8009796 <quorem+0x94>
 80097fe:	3c01      	subs	r4, #1
 8009800:	e7c6      	b.n	8009790 <quorem+0x8e>
 8009802:	6812      	ldr	r2, [r2, #0]
 8009804:	3b04      	subs	r3, #4
 8009806:	2a00      	cmp	r2, #0
 8009808:	d1ef      	bne.n	80097ea <quorem+0xe8>
 800980a:	3c01      	subs	r4, #1
 800980c:	e7ea      	b.n	80097e4 <quorem+0xe2>
 800980e:	2000      	movs	r0, #0
 8009810:	e7ee      	b.n	80097f0 <quorem+0xee>
 8009812:	0000      	movs	r0, r0
 8009814:	0000      	movs	r0, r0
	...

08009818 <_dtoa_r>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	69c7      	ldr	r7, [r0, #28]
 800981e:	b099      	sub	sp, #100	@ 0x64
 8009820:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009824:	ec55 4b10 	vmov	r4, r5, d0
 8009828:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800982a:	9109      	str	r1, [sp, #36]	@ 0x24
 800982c:	4683      	mov	fp, r0
 800982e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009830:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009832:	b97f      	cbnz	r7, 8009854 <_dtoa_r+0x3c>
 8009834:	2010      	movs	r0, #16
 8009836:	f000 fef5 	bl	800a624 <malloc>
 800983a:	4602      	mov	r2, r0
 800983c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009840:	b920      	cbnz	r0, 800984c <_dtoa_r+0x34>
 8009842:	4ba7      	ldr	r3, [pc, #668]	@ (8009ae0 <_dtoa_r+0x2c8>)
 8009844:	21ef      	movs	r1, #239	@ 0xef
 8009846:	48a7      	ldr	r0, [pc, #668]	@ (8009ae4 <_dtoa_r+0x2cc>)
 8009848:	f001 fd90 	bl	800b36c <__assert_func>
 800984c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009850:	6007      	str	r7, [r0, #0]
 8009852:	60c7      	str	r7, [r0, #12]
 8009854:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009858:	6819      	ldr	r1, [r3, #0]
 800985a:	b159      	cbz	r1, 8009874 <_dtoa_r+0x5c>
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	604a      	str	r2, [r1, #4]
 8009860:	2301      	movs	r3, #1
 8009862:	4093      	lsls	r3, r2
 8009864:	608b      	str	r3, [r1, #8]
 8009866:	4658      	mov	r0, fp
 8009868:	f001 f87e 	bl	800a968 <_Bfree>
 800986c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	1e2b      	subs	r3, r5, #0
 8009876:	bfb9      	ittee	lt
 8009878:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800987c:	9303      	strlt	r3, [sp, #12]
 800987e:	2300      	movge	r3, #0
 8009880:	6033      	strge	r3, [r6, #0]
 8009882:	9f03      	ldr	r7, [sp, #12]
 8009884:	4b98      	ldr	r3, [pc, #608]	@ (8009ae8 <_dtoa_r+0x2d0>)
 8009886:	bfbc      	itt	lt
 8009888:	2201      	movlt	r2, #1
 800988a:	6032      	strlt	r2, [r6, #0]
 800988c:	43bb      	bics	r3, r7
 800988e:	d112      	bne.n	80098b6 <_dtoa_r+0x9e>
 8009890:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009892:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800989c:	4323      	orrs	r3, r4
 800989e:	f000 854d 	beq.w	800a33c <_dtoa_r+0xb24>
 80098a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009afc <_dtoa_r+0x2e4>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 854f 	beq.w	800a34c <_dtoa_r+0xb34>
 80098ae:	f10a 0303 	add.w	r3, sl, #3
 80098b2:	f000 bd49 	b.w	800a348 <_dtoa_r+0xb30>
 80098b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098ba:	2200      	movs	r2, #0
 80098bc:	ec51 0b17 	vmov	r0, r1, d7
 80098c0:	2300      	movs	r3, #0
 80098c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80098c6:	f7f7 f917 	bl	8000af8 <__aeabi_dcmpeq>
 80098ca:	4680      	mov	r8, r0
 80098cc:	b158      	cbz	r0, 80098e6 <_dtoa_r+0xce>
 80098ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80098d0:	2301      	movs	r3, #1
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098d6:	b113      	cbz	r3, 80098de <_dtoa_r+0xc6>
 80098d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098da:	4b84      	ldr	r3, [pc, #528]	@ (8009aec <_dtoa_r+0x2d4>)
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009b00 <_dtoa_r+0x2e8>
 80098e2:	f000 bd33 	b.w	800a34c <_dtoa_r+0xb34>
 80098e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80098ea:	aa16      	add	r2, sp, #88	@ 0x58
 80098ec:	a917      	add	r1, sp, #92	@ 0x5c
 80098ee:	4658      	mov	r0, fp
 80098f0:	f001 fb24 	bl	800af3c <__d2b>
 80098f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80098f8:	4681      	mov	r9, r0
 80098fa:	2e00      	cmp	r6, #0
 80098fc:	d077      	beq.n	80099ee <_dtoa_r+0x1d6>
 80098fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009900:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800990c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009910:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009914:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009918:	4619      	mov	r1, r3
 800991a:	2200      	movs	r2, #0
 800991c:	4b74      	ldr	r3, [pc, #464]	@ (8009af0 <_dtoa_r+0x2d8>)
 800991e:	f7f6 fccb 	bl	80002b8 <__aeabi_dsub>
 8009922:	a369      	add	r3, pc, #420	@ (adr r3, 8009ac8 <_dtoa_r+0x2b0>)
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	f7f6 fe7e 	bl	8000628 <__aeabi_dmul>
 800992c:	a368      	add	r3, pc, #416	@ (adr r3, 8009ad0 <_dtoa_r+0x2b8>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fcc3 	bl	80002bc <__adddf3>
 8009936:	4604      	mov	r4, r0
 8009938:	4630      	mov	r0, r6
 800993a:	460d      	mov	r5, r1
 800993c:	f7f6 fe0a 	bl	8000554 <__aeabi_i2d>
 8009940:	a365      	add	r3, pc, #404	@ (adr r3, 8009ad8 <_dtoa_r+0x2c0>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fe6f 	bl	8000628 <__aeabi_dmul>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f7f6 fcb3 	bl	80002bc <__adddf3>
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
 800995a:	f7f7 f915 	bl	8000b88 <__aeabi_d2iz>
 800995e:	2200      	movs	r2, #0
 8009960:	4607      	mov	r7, r0
 8009962:	2300      	movs	r3, #0
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f7 f8d0 	bl	8000b0c <__aeabi_dcmplt>
 800996c:	b140      	cbz	r0, 8009980 <_dtoa_r+0x168>
 800996e:	4638      	mov	r0, r7
 8009970:	f7f6 fdf0 	bl	8000554 <__aeabi_i2d>
 8009974:	4622      	mov	r2, r4
 8009976:	462b      	mov	r3, r5
 8009978:	f7f7 f8be 	bl	8000af8 <__aeabi_dcmpeq>
 800997c:	b900      	cbnz	r0, 8009980 <_dtoa_r+0x168>
 800997e:	3f01      	subs	r7, #1
 8009980:	2f16      	cmp	r7, #22
 8009982:	d851      	bhi.n	8009a28 <_dtoa_r+0x210>
 8009984:	4b5b      	ldr	r3, [pc, #364]	@ (8009af4 <_dtoa_r+0x2dc>)
 8009986:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009992:	f7f7 f8bb 	bl	8000b0c <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d048      	beq.n	8009a2c <_dtoa_r+0x214>
 800999a:	3f01      	subs	r7, #1
 800999c:	2300      	movs	r3, #0
 800999e:	9312      	str	r3, [sp, #72]	@ 0x48
 80099a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099a2:	1b9b      	subs	r3, r3, r6
 80099a4:	1e5a      	subs	r2, r3, #1
 80099a6:	bf44      	itt	mi
 80099a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80099ac:	2300      	movmi	r3, #0
 80099ae:	9208      	str	r2, [sp, #32]
 80099b0:	bf54      	ite	pl
 80099b2:	f04f 0800 	movpl.w	r8, #0
 80099b6:	9308      	strmi	r3, [sp, #32]
 80099b8:	2f00      	cmp	r7, #0
 80099ba:	db39      	blt.n	8009a30 <_dtoa_r+0x218>
 80099bc:	9b08      	ldr	r3, [sp, #32]
 80099be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80099c0:	443b      	add	r3, r7
 80099c2:	9308      	str	r3, [sp, #32]
 80099c4:	2300      	movs	r3, #0
 80099c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d864      	bhi.n	8009a98 <_dtoa_r+0x280>
 80099ce:	2b05      	cmp	r3, #5
 80099d0:	bfc4      	itt	gt
 80099d2:	3b04      	subgt	r3, #4
 80099d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80099d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d8:	f1a3 0302 	sub.w	r3, r3, #2
 80099dc:	bfcc      	ite	gt
 80099de:	2400      	movgt	r4, #0
 80099e0:	2401      	movle	r4, #1
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d863      	bhi.n	8009aae <_dtoa_r+0x296>
 80099e6:	e8df f003 	tbb	[pc, r3]
 80099ea:	372a      	.short	0x372a
 80099ec:	5535      	.short	0x5535
 80099ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80099f2:	441e      	add	r6, r3
 80099f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	bfc1      	itttt	gt
 80099fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a00:	409f      	lslgt	r7, r3
 8009a02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a0a:	bfd6      	itet	le
 8009a0c:	f1c3 0320 	rsble	r3, r3, #32
 8009a10:	ea47 0003 	orrgt.w	r0, r7, r3
 8009a14:	fa04 f003 	lslle.w	r0, r4, r3
 8009a18:	f7f6 fd8c 	bl	8000534 <__aeabi_ui2d>
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a22:	3e01      	subs	r6, #1
 8009a24:	9214      	str	r2, [sp, #80]	@ 0x50
 8009a26:	e777      	b.n	8009918 <_dtoa_r+0x100>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e7b8      	b.n	800999e <_dtoa_r+0x186>
 8009a2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009a2e:	e7b7      	b.n	80099a0 <_dtoa_r+0x188>
 8009a30:	427b      	negs	r3, r7
 8009a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a34:	2300      	movs	r3, #0
 8009a36:	eba8 0807 	sub.w	r8, r8, r7
 8009a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a3c:	e7c4      	b.n	80099c8 <_dtoa_r+0x1b0>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	dc35      	bgt.n	8009ab4 <_dtoa_r+0x29c>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	9307      	str	r3, [sp, #28]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a52:	e00b      	b.n	8009a6c <_dtoa_r+0x254>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e7f3      	b.n	8009a40 <_dtoa_r+0x228>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a5e:	18fb      	adds	r3, r7, r3
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	3301      	adds	r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	bfb8      	it	lt
 8009a6a:	2301      	movlt	r3, #1
 8009a6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009a70:	2100      	movs	r1, #0
 8009a72:	2204      	movs	r2, #4
 8009a74:	f102 0514 	add.w	r5, r2, #20
 8009a78:	429d      	cmp	r5, r3
 8009a7a:	d91f      	bls.n	8009abc <_dtoa_r+0x2a4>
 8009a7c:	6041      	str	r1, [r0, #4]
 8009a7e:	4658      	mov	r0, fp
 8009a80:	f000 ff32 	bl	800a8e8 <_Balloc>
 8009a84:	4682      	mov	sl, r0
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d13c      	bne.n	8009b04 <_dtoa_r+0x2ec>
 8009a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009af8 <_dtoa_r+0x2e0>)
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a92:	e6d8      	b.n	8009846 <_dtoa_r+0x2e>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e7e0      	b.n	8009a5a <_dtoa_r+0x242>
 8009a98:	2401      	movs	r4, #1
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2312      	movs	r3, #18
 8009aac:	e7d0      	b.n	8009a50 <_dtoa_r+0x238>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ab2:	e7f5      	b.n	8009aa0 <_dtoa_r+0x288>
 8009ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	e7d7      	b.n	8009a6c <_dtoa_r+0x254>
 8009abc:	3101      	adds	r1, #1
 8009abe:	0052      	lsls	r2, r2, #1
 8009ac0:	e7d8      	b.n	8009a74 <_dtoa_r+0x25c>
 8009ac2:	bf00      	nop
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	636f4361 	.word	0x636f4361
 8009acc:	3fd287a7 	.word	0x3fd287a7
 8009ad0:	8b60c8b3 	.word	0x8b60c8b3
 8009ad4:	3fc68a28 	.word	0x3fc68a28
 8009ad8:	509f79fb 	.word	0x509f79fb
 8009adc:	3fd34413 	.word	0x3fd34413
 8009ae0:	0800cb05 	.word	0x0800cb05
 8009ae4:	0800cb1c 	.word	0x0800cb1c
 8009ae8:	7ff00000 	.word	0x7ff00000
 8009aec:	0800cad5 	.word	0x0800cad5
 8009af0:	3ff80000 	.word	0x3ff80000
 8009af4:	0800cc28 	.word	0x0800cc28
 8009af8:	0800cb74 	.word	0x0800cb74
 8009afc:	0800cb01 	.word	0x0800cb01
 8009b00:	0800cad4 	.word	0x0800cad4
 8009b04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b08:	6018      	str	r0, [r3, #0]
 8009b0a:	9b07      	ldr	r3, [sp, #28]
 8009b0c:	2b0e      	cmp	r3, #14
 8009b0e:	f200 80a4 	bhi.w	8009c5a <_dtoa_r+0x442>
 8009b12:	2c00      	cmp	r4, #0
 8009b14:	f000 80a1 	beq.w	8009c5a <_dtoa_r+0x442>
 8009b18:	2f00      	cmp	r7, #0
 8009b1a:	dd33      	ble.n	8009b84 <_dtoa_r+0x36c>
 8009b1c:	4bad      	ldr	r3, [pc, #692]	@ (8009dd4 <_dtoa_r+0x5bc>)
 8009b1e:	f007 020f 	and.w	r2, r7, #15
 8009b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b26:	ed93 7b00 	vldr	d7, [r3]
 8009b2a:	05f8      	lsls	r0, r7, #23
 8009b2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b34:	d516      	bpl.n	8009b64 <_dtoa_r+0x34c>
 8009b36:	4ba8      	ldr	r3, [pc, #672]	@ (8009dd8 <_dtoa_r+0x5c0>)
 8009b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b40:	f7f6 fe9c 	bl	800087c <__aeabi_ddiv>
 8009b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b48:	f004 040f 	and.w	r4, r4, #15
 8009b4c:	2603      	movs	r6, #3
 8009b4e:	4da2      	ldr	r5, [pc, #648]	@ (8009dd8 <_dtoa_r+0x5c0>)
 8009b50:	b954      	cbnz	r4, 8009b68 <_dtoa_r+0x350>
 8009b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5a:	f7f6 fe8f 	bl	800087c <__aeabi_ddiv>
 8009b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b62:	e028      	b.n	8009bb6 <_dtoa_r+0x39e>
 8009b64:	2602      	movs	r6, #2
 8009b66:	e7f2      	b.n	8009b4e <_dtoa_r+0x336>
 8009b68:	07e1      	lsls	r1, r4, #31
 8009b6a:	d508      	bpl.n	8009b7e <_dtoa_r+0x366>
 8009b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b74:	f7f6 fd58 	bl	8000628 <__aeabi_dmul>
 8009b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	1064      	asrs	r4, r4, #1
 8009b80:	3508      	adds	r5, #8
 8009b82:	e7e5      	b.n	8009b50 <_dtoa_r+0x338>
 8009b84:	f000 80d2 	beq.w	8009d2c <_dtoa_r+0x514>
 8009b88:	427c      	negs	r4, r7
 8009b8a:	4b92      	ldr	r3, [pc, #584]	@ (8009dd4 <_dtoa_r+0x5bc>)
 8009b8c:	4d92      	ldr	r5, [pc, #584]	@ (8009dd8 <_dtoa_r+0x5c0>)
 8009b8e:	f004 020f 	and.w	r2, r4, #15
 8009b92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b9e:	f7f6 fd43 	bl	8000628 <__aeabi_dmul>
 8009ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba6:	1124      	asrs	r4, r4, #4
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2602      	movs	r6, #2
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	f040 80b2 	bne.w	8009d16 <_dtoa_r+0x4fe>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1d3      	bne.n	8009b5e <_dtoa_r+0x346>
 8009bb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80b7 	beq.w	8009d30 <_dtoa_r+0x518>
 8009bc2:	4b86      	ldr	r3, [pc, #536]	@ (8009ddc <_dtoa_r+0x5c4>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7f6 ff9f 	bl	8000b0c <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f000 80ae 	beq.w	8009d30 <_dtoa_r+0x518>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 80aa 	beq.w	8009d30 <_dtoa_r+0x518>
 8009bdc:	9b00      	ldr	r3, [sp, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	dd37      	ble.n	8009c52 <_dtoa_r+0x43a>
 8009be2:	1e7b      	subs	r3, r7, #1
 8009be4:	9304      	str	r3, [sp, #16]
 8009be6:	4620      	mov	r0, r4
 8009be8:	4b7d      	ldr	r3, [pc, #500]	@ (8009de0 <_dtoa_r+0x5c8>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 fd1b 	bl	8000628 <__aeabi_dmul>
 8009bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf6:	9c00      	ldr	r4, [sp, #0]
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7f6 fcaa 	bl	8000554 <__aeabi_i2d>
 8009c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c04:	f7f6 fd10 	bl	8000628 <__aeabi_dmul>
 8009c08:	4b76      	ldr	r3, [pc, #472]	@ (8009de4 <_dtoa_r+0x5cc>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f7f6 fb56 	bl	80002bc <__adddf3>
 8009c10:	4605      	mov	r5, r0
 8009c12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c16:	2c00      	cmp	r4, #0
 8009c18:	f040 808d 	bne.w	8009d36 <_dtoa_r+0x51e>
 8009c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c20:	4b71      	ldr	r3, [pc, #452]	@ (8009de8 <_dtoa_r+0x5d0>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	f7f6 fb48 	bl	80002b8 <__aeabi_dsub>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c30:	462a      	mov	r2, r5
 8009c32:	4633      	mov	r3, r6
 8009c34:	f7f6 ff88 	bl	8000b48 <__aeabi_dcmpgt>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	f040 828b 	bne.w	800a154 <_dtoa_r+0x93c>
 8009c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c42:	462a      	mov	r2, r5
 8009c44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009c48:	f7f6 ff60 	bl	8000b0c <__aeabi_dcmplt>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f040 8128 	bne.w	8009ea2 <_dtoa_r+0x68a>
 8009c52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009c56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009c5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f2c0 815a 	blt.w	8009f16 <_dtoa_r+0x6fe>
 8009c62:	2f0e      	cmp	r7, #14
 8009c64:	f300 8157 	bgt.w	8009f16 <_dtoa_r+0x6fe>
 8009c68:	4b5a      	ldr	r3, [pc, #360]	@ (8009dd4 <_dtoa_r+0x5bc>)
 8009c6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c6e:	ed93 7b00 	vldr	d7, [r3]
 8009c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	ed8d 7b00 	vstr	d7, [sp]
 8009c7a:	da03      	bge.n	8009c84 <_dtoa_r+0x46c>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f340 8101 	ble.w	8009e86 <_dtoa_r+0x66e>
 8009c84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c88:	4656      	mov	r6, sl
 8009c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	f7f6 fdf3 	bl	800087c <__aeabi_ddiv>
 8009c96:	f7f6 ff77 	bl	8000b88 <__aeabi_d2iz>
 8009c9a:	4680      	mov	r8, r0
 8009c9c:	f7f6 fc5a 	bl	8000554 <__aeabi_i2d>
 8009ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ca4:	f7f6 fcc0 	bl	8000628 <__aeabi_dmul>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009cb4:	f7f6 fb00 	bl	80002b8 <__aeabi_dsub>
 8009cb8:	f806 4b01 	strb.w	r4, [r6], #1
 8009cbc:	9d07      	ldr	r5, [sp, #28]
 8009cbe:	eba6 040a 	sub.w	r4, r6, sl
 8009cc2:	42a5      	cmp	r5, r4
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	f040 8117 	bne.w	8009efa <_dtoa_r+0x6e2>
 8009ccc:	f7f6 faf6 	bl	80002bc <__adddf3>
 8009cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	460d      	mov	r5, r1
 8009cd8:	f7f6 ff36 	bl	8000b48 <__aeabi_dcmpgt>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	f040 80f9 	bne.w	8009ed4 <_dtoa_r+0x6bc>
 8009ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7f6 ff05 	bl	8000af8 <__aeabi_dcmpeq>
 8009cee:	b118      	cbz	r0, 8009cf8 <_dtoa_r+0x4e0>
 8009cf0:	f018 0f01 	tst.w	r8, #1
 8009cf4:	f040 80ee 	bne.w	8009ed4 <_dtoa_r+0x6bc>
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	4658      	mov	r0, fp
 8009cfc:	f000 fe34 	bl	800a968 <_Bfree>
 8009d00:	2300      	movs	r3, #0
 8009d02:	7033      	strb	r3, [r6, #0]
 8009d04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d06:	3701      	adds	r7, #1
 8009d08:	601f      	str	r7, [r3, #0]
 8009d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 831d 	beq.w	800a34c <_dtoa_r+0xb34>
 8009d12:	601e      	str	r6, [r3, #0]
 8009d14:	e31a      	b.n	800a34c <_dtoa_r+0xb34>
 8009d16:	07e2      	lsls	r2, r4, #31
 8009d18:	d505      	bpl.n	8009d26 <_dtoa_r+0x50e>
 8009d1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d1e:	f7f6 fc83 	bl	8000628 <__aeabi_dmul>
 8009d22:	3601      	adds	r6, #1
 8009d24:	2301      	movs	r3, #1
 8009d26:	1064      	asrs	r4, r4, #1
 8009d28:	3508      	adds	r5, #8
 8009d2a:	e73f      	b.n	8009bac <_dtoa_r+0x394>
 8009d2c:	2602      	movs	r6, #2
 8009d2e:	e742      	b.n	8009bb6 <_dtoa_r+0x39e>
 8009d30:	9c07      	ldr	r4, [sp, #28]
 8009d32:	9704      	str	r7, [sp, #16]
 8009d34:	e761      	b.n	8009bfa <_dtoa_r+0x3e2>
 8009d36:	4b27      	ldr	r3, [pc, #156]	@ (8009dd4 <_dtoa_r+0x5bc>)
 8009d38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d42:	4454      	add	r4, sl
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d053      	beq.n	8009df0 <_dtoa_r+0x5d8>
 8009d48:	4928      	ldr	r1, [pc, #160]	@ (8009dec <_dtoa_r+0x5d4>)
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7f6 fd96 	bl	800087c <__aeabi_ddiv>
 8009d50:	4633      	mov	r3, r6
 8009d52:	462a      	mov	r2, r5
 8009d54:	f7f6 fab0 	bl	80002b8 <__aeabi_dsub>
 8009d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d5c:	4656      	mov	r6, sl
 8009d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d62:	f7f6 ff11 	bl	8000b88 <__aeabi_d2iz>
 8009d66:	4605      	mov	r5, r0
 8009d68:	f7f6 fbf4 	bl	8000554 <__aeabi_i2d>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d74:	f7f6 faa0 	bl	80002b8 <__aeabi_dsub>
 8009d78:	3530      	adds	r5, #48	@ 0x30
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d82:	f806 5b01 	strb.w	r5, [r6], #1
 8009d86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d8a:	f7f6 febf 	bl	8000b0c <__aeabi_dcmplt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d171      	bne.n	8009e76 <_dtoa_r+0x65e>
 8009d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d96:	4911      	ldr	r1, [pc, #68]	@ (8009ddc <_dtoa_r+0x5c4>)
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f7f6 fa8d 	bl	80002b8 <__aeabi_dsub>
 8009d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009da2:	f7f6 feb3 	bl	8000b0c <__aeabi_dcmplt>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f040 8095 	bne.w	8009ed6 <_dtoa_r+0x6be>
 8009dac:	42a6      	cmp	r6, r4
 8009dae:	f43f af50 	beq.w	8009c52 <_dtoa_r+0x43a>
 8009db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009db6:	4b0a      	ldr	r3, [pc, #40]	@ (8009de0 <_dtoa_r+0x5c8>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	f7f6 fc35 	bl	8000628 <__aeabi_dmul>
 8009dbe:	4b08      	ldr	r3, [pc, #32]	@ (8009de0 <_dtoa_r+0x5c8>)
 8009dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dca:	f7f6 fc2d 	bl	8000628 <__aeabi_dmul>
 8009dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd2:	e7c4      	b.n	8009d5e <_dtoa_r+0x546>
 8009dd4:	0800cc28 	.word	0x0800cc28
 8009dd8:	0800cc00 	.word	0x0800cc00
 8009ddc:	3ff00000 	.word	0x3ff00000
 8009de0:	40240000 	.word	0x40240000
 8009de4:	401c0000 	.word	0x401c0000
 8009de8:	40140000 	.word	0x40140000
 8009dec:	3fe00000 	.word	0x3fe00000
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	f7f6 fc18 	bl	8000628 <__aeabi_dmul>
 8009df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dfc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009dfe:	4656      	mov	r6, sl
 8009e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e04:	f7f6 fec0 	bl	8000b88 <__aeabi_d2iz>
 8009e08:	4605      	mov	r5, r0
 8009e0a:	f7f6 fba3 	bl	8000554 <__aeabi_i2d>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e16:	f7f6 fa4f 	bl	80002b8 <__aeabi_dsub>
 8009e1a:	3530      	adds	r5, #48	@ 0x30
 8009e1c:	f806 5b01 	strb.w	r5, [r6], #1
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	42a6      	cmp	r6, r4
 8009e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e2a:	f04f 0200 	mov.w	r2, #0
 8009e2e:	d124      	bne.n	8009e7a <_dtoa_r+0x662>
 8009e30:	4bac      	ldr	r3, [pc, #688]	@ (800a0e4 <_dtoa_r+0x8cc>)
 8009e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e36:	f7f6 fa41 	bl	80002bc <__adddf3>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e42:	f7f6 fe81 	bl	8000b48 <__aeabi_dcmpgt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d145      	bne.n	8009ed6 <_dtoa_r+0x6be>
 8009e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e4e:	49a5      	ldr	r1, [pc, #660]	@ (800a0e4 <_dtoa_r+0x8cc>)
 8009e50:	2000      	movs	r0, #0
 8009e52:	f7f6 fa31 	bl	80002b8 <__aeabi_dsub>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e5e:	f7f6 fe55 	bl	8000b0c <__aeabi_dcmplt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f aef5 	beq.w	8009c52 <_dtoa_r+0x43a>
 8009e68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009e6a:	1e73      	subs	r3, r6, #1
 8009e6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e72:	2b30      	cmp	r3, #48	@ 0x30
 8009e74:	d0f8      	beq.n	8009e68 <_dtoa_r+0x650>
 8009e76:	9f04      	ldr	r7, [sp, #16]
 8009e78:	e73e      	b.n	8009cf8 <_dtoa_r+0x4e0>
 8009e7a:	4b9b      	ldr	r3, [pc, #620]	@ (800a0e8 <_dtoa_r+0x8d0>)
 8009e7c:	f7f6 fbd4 	bl	8000628 <__aeabi_dmul>
 8009e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e84:	e7bc      	b.n	8009e00 <_dtoa_r+0x5e8>
 8009e86:	d10c      	bne.n	8009ea2 <_dtoa_r+0x68a>
 8009e88:	4b98      	ldr	r3, [pc, #608]	@ (800a0ec <_dtoa_r+0x8d4>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e90:	f7f6 fbca 	bl	8000628 <__aeabi_dmul>
 8009e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e98:	f7f6 fe4c 	bl	8000b34 <__aeabi_dcmpge>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f000 8157 	beq.w	800a150 <_dtoa_r+0x938>
 8009ea2:	2400      	movs	r4, #0
 8009ea4:	4625      	mov	r5, r4
 8009ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ea8:	43db      	mvns	r3, r3
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	4656      	mov	r6, sl
 8009eae:	2700      	movs	r7, #0
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4658      	mov	r0, fp
 8009eb4:	f000 fd58 	bl	800a968 <_Bfree>
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	d0dc      	beq.n	8009e76 <_dtoa_r+0x65e>
 8009ebc:	b12f      	cbz	r7, 8009eca <_dtoa_r+0x6b2>
 8009ebe:	42af      	cmp	r7, r5
 8009ec0:	d003      	beq.n	8009eca <_dtoa_r+0x6b2>
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	4658      	mov	r0, fp
 8009ec6:	f000 fd4f 	bl	800a968 <_Bfree>
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4658      	mov	r0, fp
 8009ece:	f000 fd4b 	bl	800a968 <_Bfree>
 8009ed2:	e7d0      	b.n	8009e76 <_dtoa_r+0x65e>
 8009ed4:	9704      	str	r7, [sp, #16]
 8009ed6:	4633      	mov	r3, r6
 8009ed8:	461e      	mov	r6, r3
 8009eda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ede:	2a39      	cmp	r2, #57	@ 0x39
 8009ee0:	d107      	bne.n	8009ef2 <_dtoa_r+0x6da>
 8009ee2:	459a      	cmp	sl, r3
 8009ee4:	d1f8      	bne.n	8009ed8 <_dtoa_r+0x6c0>
 8009ee6:	9a04      	ldr	r2, [sp, #16]
 8009ee8:	3201      	adds	r2, #1
 8009eea:	9204      	str	r2, [sp, #16]
 8009eec:	2230      	movs	r2, #48	@ 0x30
 8009eee:	f88a 2000 	strb.w	r2, [sl]
 8009ef2:	781a      	ldrb	r2, [r3, #0]
 8009ef4:	3201      	adds	r2, #1
 8009ef6:	701a      	strb	r2, [r3, #0]
 8009ef8:	e7bd      	b.n	8009e76 <_dtoa_r+0x65e>
 8009efa:	4b7b      	ldr	r3, [pc, #492]	@ (800a0e8 <_dtoa_r+0x8d0>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	f7f6 fb93 	bl	8000628 <__aeabi_dmul>
 8009f02:	2200      	movs	r2, #0
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	460d      	mov	r5, r1
 8009f0a:	f7f6 fdf5 	bl	8000af8 <__aeabi_dcmpeq>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f43f aebb 	beq.w	8009c8a <_dtoa_r+0x472>
 8009f14:	e6f0      	b.n	8009cf8 <_dtoa_r+0x4e0>
 8009f16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	f000 80db 	beq.w	800a0d4 <_dtoa_r+0x8bc>
 8009f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f20:	2a01      	cmp	r2, #1
 8009f22:	f300 80bf 	bgt.w	800a0a4 <_dtoa_r+0x88c>
 8009f26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	f000 80b7 	beq.w	800a09c <_dtoa_r+0x884>
 8009f2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f34:	4646      	mov	r6, r8
 8009f36:	9a08      	ldr	r2, [sp, #32]
 8009f38:	2101      	movs	r1, #1
 8009f3a:	441a      	add	r2, r3
 8009f3c:	4658      	mov	r0, fp
 8009f3e:	4498      	add	r8, r3
 8009f40:	9208      	str	r2, [sp, #32]
 8009f42:	f000 fdc5 	bl	800aad0 <__i2b>
 8009f46:	4605      	mov	r5, r0
 8009f48:	b15e      	cbz	r6, 8009f62 <_dtoa_r+0x74a>
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd08      	ble.n	8009f62 <_dtoa_r+0x74a>
 8009f50:	42b3      	cmp	r3, r6
 8009f52:	9a08      	ldr	r2, [sp, #32]
 8009f54:	bfa8      	it	ge
 8009f56:	4633      	movge	r3, r6
 8009f58:	eba8 0803 	sub.w	r8, r8, r3
 8009f5c:	1af6      	subs	r6, r6, r3
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	9308      	str	r3, [sp, #32]
 8009f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f64:	b1f3      	cbz	r3, 8009fa4 <_dtoa_r+0x78c>
 8009f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 80b7 	beq.w	800a0dc <_dtoa_r+0x8c4>
 8009f6e:	b18c      	cbz	r4, 8009f94 <_dtoa_r+0x77c>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4622      	mov	r2, r4
 8009f74:	4658      	mov	r0, fp
 8009f76:	f000 fe6b 	bl	800ac50 <__pow5mult>
 8009f7a:	464a      	mov	r2, r9
 8009f7c:	4601      	mov	r1, r0
 8009f7e:	4605      	mov	r5, r0
 8009f80:	4658      	mov	r0, fp
 8009f82:	f000 fdbb 	bl	800aafc <__multiply>
 8009f86:	4649      	mov	r1, r9
 8009f88:	9004      	str	r0, [sp, #16]
 8009f8a:	4658      	mov	r0, fp
 8009f8c:	f000 fcec 	bl	800a968 <_Bfree>
 8009f90:	9b04      	ldr	r3, [sp, #16]
 8009f92:	4699      	mov	r9, r3
 8009f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f96:	1b1a      	subs	r2, r3, r4
 8009f98:	d004      	beq.n	8009fa4 <_dtoa_r+0x78c>
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	4658      	mov	r0, fp
 8009f9e:	f000 fe57 	bl	800ac50 <__pow5mult>
 8009fa2:	4681      	mov	r9, r0
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	f000 fd92 	bl	800aad0 <__i2b>
 8009fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fae:	4604      	mov	r4, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 81cf 	beq.w	800a354 <_dtoa_r+0xb3c>
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	4601      	mov	r1, r0
 8009fba:	4658      	mov	r0, fp
 8009fbc:	f000 fe48 	bl	800ac50 <__pow5mult>
 8009fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	f300 8095 	bgt.w	800a0f4 <_dtoa_r+0x8dc>
 8009fca:	9b02      	ldr	r3, [sp, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 8087 	bne.w	800a0e0 <_dtoa_r+0x8c8>
 8009fd2:	9b03      	ldr	r3, [sp, #12]
 8009fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 8089 	bne.w	800a0f0 <_dtoa_r+0x8d8>
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009fe4:	0d1b      	lsrs	r3, r3, #20
 8009fe6:	051b      	lsls	r3, r3, #20
 8009fe8:	b12b      	cbz	r3, 8009ff6 <_dtoa_r+0x7de>
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	3301      	adds	r3, #1
 8009fee:	9308      	str	r3, [sp, #32]
 8009ff0:	f108 0801 	add.w	r8, r8, #1
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 81b0 	beq.w	800a360 <_dtoa_r+0xb48>
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a006:	6918      	ldr	r0, [r3, #16]
 800a008:	f000 fd16 	bl	800aa38 <__hi0bits>
 800a00c:	f1c0 0020 	rsb	r0, r0, #32
 800a010:	9b08      	ldr	r3, [sp, #32]
 800a012:	4418      	add	r0, r3
 800a014:	f010 001f 	ands.w	r0, r0, #31
 800a018:	d077      	beq.n	800a10a <_dtoa_r+0x8f2>
 800a01a:	f1c0 0320 	rsb	r3, r0, #32
 800a01e:	2b04      	cmp	r3, #4
 800a020:	dd6b      	ble.n	800a0fa <_dtoa_r+0x8e2>
 800a022:	9b08      	ldr	r3, [sp, #32]
 800a024:	f1c0 001c 	rsb	r0, r0, #28
 800a028:	4403      	add	r3, r0
 800a02a:	4480      	add	r8, r0
 800a02c:	4406      	add	r6, r0
 800a02e:	9308      	str	r3, [sp, #32]
 800a030:	f1b8 0f00 	cmp.w	r8, #0
 800a034:	dd05      	ble.n	800a042 <_dtoa_r+0x82a>
 800a036:	4649      	mov	r1, r9
 800a038:	4642      	mov	r2, r8
 800a03a:	4658      	mov	r0, fp
 800a03c:	f000 fe62 	bl	800ad04 <__lshift>
 800a040:	4681      	mov	r9, r0
 800a042:	9b08      	ldr	r3, [sp, #32]
 800a044:	2b00      	cmp	r3, #0
 800a046:	dd05      	ble.n	800a054 <_dtoa_r+0x83c>
 800a048:	4621      	mov	r1, r4
 800a04a:	461a      	mov	r2, r3
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fe59 	bl	800ad04 <__lshift>
 800a052:	4604      	mov	r4, r0
 800a054:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a056:	2b00      	cmp	r3, #0
 800a058:	d059      	beq.n	800a10e <_dtoa_r+0x8f6>
 800a05a:	4621      	mov	r1, r4
 800a05c:	4648      	mov	r0, r9
 800a05e:	f000 febd 	bl	800addc <__mcmp>
 800a062:	2800      	cmp	r0, #0
 800a064:	da53      	bge.n	800a10e <_dtoa_r+0x8f6>
 800a066:	1e7b      	subs	r3, r7, #1
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	4649      	mov	r1, r9
 800a06c:	2300      	movs	r3, #0
 800a06e:	220a      	movs	r2, #10
 800a070:	4658      	mov	r0, fp
 800a072:	f000 fc9b 	bl	800a9ac <__multadd>
 800a076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a078:	4681      	mov	r9, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 8172 	beq.w	800a364 <_dtoa_r+0xb4c>
 800a080:	2300      	movs	r3, #0
 800a082:	4629      	mov	r1, r5
 800a084:	220a      	movs	r2, #10
 800a086:	4658      	mov	r0, fp
 800a088:	f000 fc90 	bl	800a9ac <__multadd>
 800a08c:	9b00      	ldr	r3, [sp, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	4605      	mov	r5, r0
 800a092:	dc67      	bgt.n	800a164 <_dtoa_r+0x94c>
 800a094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a096:	2b02      	cmp	r3, #2
 800a098:	dc41      	bgt.n	800a11e <_dtoa_r+0x906>
 800a09a:	e063      	b.n	800a164 <_dtoa_r+0x94c>
 800a09c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a09e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a0a2:	e746      	b.n	8009f32 <_dtoa_r+0x71a>
 800a0a4:	9b07      	ldr	r3, [sp, #28]
 800a0a6:	1e5c      	subs	r4, r3, #1
 800a0a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	bfbf      	itttt	lt
 800a0ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a0b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a0b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a0b4:	1ae3      	sublt	r3, r4, r3
 800a0b6:	bfb4      	ite	lt
 800a0b8:	18d2      	addlt	r2, r2, r3
 800a0ba:	1b1c      	subge	r4, r3, r4
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	bfbc      	itt	lt
 800a0c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a0c2:	2400      	movlt	r4, #0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	bfb5      	itete	lt
 800a0c8:	eba8 0603 	sublt.w	r6, r8, r3
 800a0cc:	9b07      	ldrge	r3, [sp, #28]
 800a0ce:	2300      	movlt	r3, #0
 800a0d0:	4646      	movge	r6, r8
 800a0d2:	e730      	b.n	8009f36 <_dtoa_r+0x71e>
 800a0d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a0d8:	4646      	mov	r6, r8
 800a0da:	e735      	b.n	8009f48 <_dtoa_r+0x730>
 800a0dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0de:	e75c      	b.n	8009f9a <_dtoa_r+0x782>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e788      	b.n	8009ff6 <_dtoa_r+0x7de>
 800a0e4:	3fe00000 	.word	0x3fe00000
 800a0e8:	40240000 	.word	0x40240000
 800a0ec:	40140000 	.word	0x40140000
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	e780      	b.n	8009ff6 <_dtoa_r+0x7de>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0f8:	e782      	b.n	800a000 <_dtoa_r+0x7e8>
 800a0fa:	d099      	beq.n	800a030 <_dtoa_r+0x818>
 800a0fc:	9a08      	ldr	r2, [sp, #32]
 800a0fe:	331c      	adds	r3, #28
 800a100:	441a      	add	r2, r3
 800a102:	4498      	add	r8, r3
 800a104:	441e      	add	r6, r3
 800a106:	9208      	str	r2, [sp, #32]
 800a108:	e792      	b.n	800a030 <_dtoa_r+0x818>
 800a10a:	4603      	mov	r3, r0
 800a10c:	e7f6      	b.n	800a0fc <_dtoa_r+0x8e4>
 800a10e:	9b07      	ldr	r3, [sp, #28]
 800a110:	9704      	str	r7, [sp, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	dc20      	bgt.n	800a158 <_dtoa_r+0x940>
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	dd1e      	ble.n	800a15c <_dtoa_r+0x944>
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	f47f aec0 	bne.w	8009ea6 <_dtoa_r+0x68e>
 800a126:	4621      	mov	r1, r4
 800a128:	2205      	movs	r2, #5
 800a12a:	4658      	mov	r0, fp
 800a12c:	f000 fc3e 	bl	800a9ac <__multadd>
 800a130:	4601      	mov	r1, r0
 800a132:	4604      	mov	r4, r0
 800a134:	4648      	mov	r0, r9
 800a136:	f000 fe51 	bl	800addc <__mcmp>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	f77f aeb3 	ble.w	8009ea6 <_dtoa_r+0x68e>
 800a140:	4656      	mov	r6, sl
 800a142:	2331      	movs	r3, #49	@ 0x31
 800a144:	f806 3b01 	strb.w	r3, [r6], #1
 800a148:	9b04      	ldr	r3, [sp, #16]
 800a14a:	3301      	adds	r3, #1
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	e6ae      	b.n	8009eae <_dtoa_r+0x696>
 800a150:	9c07      	ldr	r4, [sp, #28]
 800a152:	9704      	str	r7, [sp, #16]
 800a154:	4625      	mov	r5, r4
 800a156:	e7f3      	b.n	800a140 <_dtoa_r+0x928>
 800a158:	9b07      	ldr	r3, [sp, #28]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 8104 	beq.w	800a36c <_dtoa_r+0xb54>
 800a164:	2e00      	cmp	r6, #0
 800a166:	dd05      	ble.n	800a174 <_dtoa_r+0x95c>
 800a168:	4629      	mov	r1, r5
 800a16a:	4632      	mov	r2, r6
 800a16c:	4658      	mov	r0, fp
 800a16e:	f000 fdc9 	bl	800ad04 <__lshift>
 800a172:	4605      	mov	r5, r0
 800a174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05a      	beq.n	800a230 <_dtoa_r+0xa18>
 800a17a:	6869      	ldr	r1, [r5, #4]
 800a17c:	4658      	mov	r0, fp
 800a17e:	f000 fbb3 	bl	800a8e8 <_Balloc>
 800a182:	4606      	mov	r6, r0
 800a184:	b928      	cbnz	r0, 800a192 <_dtoa_r+0x97a>
 800a186:	4b84      	ldr	r3, [pc, #528]	@ (800a398 <_dtoa_r+0xb80>)
 800a188:	4602      	mov	r2, r0
 800a18a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a18e:	f7ff bb5a 	b.w	8009846 <_dtoa_r+0x2e>
 800a192:	692a      	ldr	r2, [r5, #16]
 800a194:	3202      	adds	r2, #2
 800a196:	0092      	lsls	r2, r2, #2
 800a198:	f105 010c 	add.w	r1, r5, #12
 800a19c:	300c      	adds	r0, #12
 800a19e:	f001 f8d7 	bl	800b350 <memcpy>
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	f000 fdac 	bl	800ad04 <__lshift>
 800a1ac:	f10a 0301 	add.w	r3, sl, #1
 800a1b0:	9307      	str	r3, [sp, #28]
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	4453      	add	r3, sl
 800a1b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1b8:	9b02      	ldr	r3, [sp, #8]
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	462f      	mov	r7, r5
 800a1c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	9b07      	ldr	r3, [sp, #28]
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	4648      	mov	r0, r9
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	f7ff fa98 	bl	8009702 <quorem>
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	9002      	str	r0, [sp, #8]
 800a1d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1da:	4648      	mov	r0, r9
 800a1dc:	f000 fdfe 	bl	800addc <__mcmp>
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	9008      	str	r0, [sp, #32]
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4658      	mov	r0, fp
 800a1e8:	f000 fe14 	bl	800ae14 <__mdiff>
 800a1ec:	68c2      	ldr	r2, [r0, #12]
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	bb02      	cbnz	r2, 800a234 <_dtoa_r+0xa1c>
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	4648      	mov	r0, r9
 800a1f6:	f000 fdf1 	bl	800addc <__mcmp>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4658      	mov	r0, fp
 800a200:	920e      	str	r2, [sp, #56]	@ 0x38
 800a202:	f000 fbb1 	bl	800a968 <_Bfree>
 800a206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a208:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a20a:	9e07      	ldr	r6, [sp, #28]
 800a20c:	ea43 0102 	orr.w	r1, r3, r2
 800a210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a212:	4319      	orrs	r1, r3
 800a214:	d110      	bne.n	800a238 <_dtoa_r+0xa20>
 800a216:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a21a:	d029      	beq.n	800a270 <_dtoa_r+0xa58>
 800a21c:	9b08      	ldr	r3, [sp, #32]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dd02      	ble.n	800a228 <_dtoa_r+0xa10>
 800a222:	9b02      	ldr	r3, [sp, #8]
 800a224:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a228:	9b00      	ldr	r3, [sp, #0]
 800a22a:	f883 8000 	strb.w	r8, [r3]
 800a22e:	e63f      	b.n	8009eb0 <_dtoa_r+0x698>
 800a230:	4628      	mov	r0, r5
 800a232:	e7bb      	b.n	800a1ac <_dtoa_r+0x994>
 800a234:	2201      	movs	r2, #1
 800a236:	e7e1      	b.n	800a1fc <_dtoa_r+0x9e4>
 800a238:	9b08      	ldr	r3, [sp, #32]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	db04      	blt.n	800a248 <_dtoa_r+0xa30>
 800a23e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a240:	430b      	orrs	r3, r1
 800a242:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a244:	430b      	orrs	r3, r1
 800a246:	d120      	bne.n	800a28a <_dtoa_r+0xa72>
 800a248:	2a00      	cmp	r2, #0
 800a24a:	dded      	ble.n	800a228 <_dtoa_r+0xa10>
 800a24c:	4649      	mov	r1, r9
 800a24e:	2201      	movs	r2, #1
 800a250:	4658      	mov	r0, fp
 800a252:	f000 fd57 	bl	800ad04 <__lshift>
 800a256:	4621      	mov	r1, r4
 800a258:	4681      	mov	r9, r0
 800a25a:	f000 fdbf 	bl	800addc <__mcmp>
 800a25e:	2800      	cmp	r0, #0
 800a260:	dc03      	bgt.n	800a26a <_dtoa_r+0xa52>
 800a262:	d1e1      	bne.n	800a228 <_dtoa_r+0xa10>
 800a264:	f018 0f01 	tst.w	r8, #1
 800a268:	d0de      	beq.n	800a228 <_dtoa_r+0xa10>
 800a26a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a26e:	d1d8      	bne.n	800a222 <_dtoa_r+0xa0a>
 800a270:	9a00      	ldr	r2, [sp, #0]
 800a272:	2339      	movs	r3, #57	@ 0x39
 800a274:	7013      	strb	r3, [r2, #0]
 800a276:	4633      	mov	r3, r6
 800a278:	461e      	mov	r6, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a280:	2a39      	cmp	r2, #57	@ 0x39
 800a282:	d052      	beq.n	800a32a <_dtoa_r+0xb12>
 800a284:	3201      	adds	r2, #1
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	e612      	b.n	8009eb0 <_dtoa_r+0x698>
 800a28a:	2a00      	cmp	r2, #0
 800a28c:	dd07      	ble.n	800a29e <_dtoa_r+0xa86>
 800a28e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a292:	d0ed      	beq.n	800a270 <_dtoa_r+0xa58>
 800a294:	9a00      	ldr	r2, [sp, #0]
 800a296:	f108 0301 	add.w	r3, r8, #1
 800a29a:	7013      	strb	r3, [r2, #0]
 800a29c:	e608      	b.n	8009eb0 <_dtoa_r+0x698>
 800a29e:	9b07      	ldr	r3, [sp, #28]
 800a2a0:	9a07      	ldr	r2, [sp, #28]
 800a2a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a2a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d028      	beq.n	800a2fe <_dtoa_r+0xae6>
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	220a      	movs	r2, #10
 800a2b2:	4658      	mov	r0, fp
 800a2b4:	f000 fb7a 	bl	800a9ac <__multadd>
 800a2b8:	42af      	cmp	r7, r5
 800a2ba:	4681      	mov	r9, r0
 800a2bc:	f04f 0300 	mov.w	r3, #0
 800a2c0:	f04f 020a 	mov.w	r2, #10
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4658      	mov	r0, fp
 800a2c8:	d107      	bne.n	800a2da <_dtoa_r+0xac2>
 800a2ca:	f000 fb6f 	bl	800a9ac <__multadd>
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	9307      	str	r3, [sp, #28]
 800a2d8:	e774      	b.n	800a1c4 <_dtoa_r+0x9ac>
 800a2da:	f000 fb67 	bl	800a9ac <__multadd>
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	220a      	movs	r2, #10
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	f000 fb60 	bl	800a9ac <__multadd>
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	e7f0      	b.n	800a2d2 <_dtoa_r+0xaba>
 800a2f0:	9b00      	ldr	r3, [sp, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bfcc      	ite	gt
 800a2f6:	461e      	movgt	r6, r3
 800a2f8:	2601      	movle	r6, #1
 800a2fa:	4456      	add	r6, sl
 800a2fc:	2700      	movs	r7, #0
 800a2fe:	4649      	mov	r1, r9
 800a300:	2201      	movs	r2, #1
 800a302:	4658      	mov	r0, fp
 800a304:	f000 fcfe 	bl	800ad04 <__lshift>
 800a308:	4621      	mov	r1, r4
 800a30a:	4681      	mov	r9, r0
 800a30c:	f000 fd66 	bl	800addc <__mcmp>
 800a310:	2800      	cmp	r0, #0
 800a312:	dcb0      	bgt.n	800a276 <_dtoa_r+0xa5e>
 800a314:	d102      	bne.n	800a31c <_dtoa_r+0xb04>
 800a316:	f018 0f01 	tst.w	r8, #1
 800a31a:	d1ac      	bne.n	800a276 <_dtoa_r+0xa5e>
 800a31c:	4633      	mov	r3, r6
 800a31e:	461e      	mov	r6, r3
 800a320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a324:	2a30      	cmp	r2, #48	@ 0x30
 800a326:	d0fa      	beq.n	800a31e <_dtoa_r+0xb06>
 800a328:	e5c2      	b.n	8009eb0 <_dtoa_r+0x698>
 800a32a:	459a      	cmp	sl, r3
 800a32c:	d1a4      	bne.n	800a278 <_dtoa_r+0xa60>
 800a32e:	9b04      	ldr	r3, [sp, #16]
 800a330:	3301      	adds	r3, #1
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	2331      	movs	r3, #49	@ 0x31
 800a336:	f88a 3000 	strb.w	r3, [sl]
 800a33a:	e5b9      	b.n	8009eb0 <_dtoa_r+0x698>
 800a33c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a33e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a39c <_dtoa_r+0xb84>
 800a342:	b11b      	cbz	r3, 800a34c <_dtoa_r+0xb34>
 800a344:	f10a 0308 	add.w	r3, sl, #8
 800a348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	4650      	mov	r0, sl
 800a34e:	b019      	add	sp, #100	@ 0x64
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a356:	2b01      	cmp	r3, #1
 800a358:	f77f ae37 	ble.w	8009fca <_dtoa_r+0x7b2>
 800a35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a360:	2001      	movs	r0, #1
 800a362:	e655      	b.n	800a010 <_dtoa_r+0x7f8>
 800a364:	9b00      	ldr	r3, [sp, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f77f aed6 	ble.w	800a118 <_dtoa_r+0x900>
 800a36c:	4656      	mov	r6, sl
 800a36e:	4621      	mov	r1, r4
 800a370:	4648      	mov	r0, r9
 800a372:	f7ff f9c6 	bl	8009702 <quorem>
 800a376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a37a:	f806 8b01 	strb.w	r8, [r6], #1
 800a37e:	9b00      	ldr	r3, [sp, #0]
 800a380:	eba6 020a 	sub.w	r2, r6, sl
 800a384:	4293      	cmp	r3, r2
 800a386:	ddb3      	ble.n	800a2f0 <_dtoa_r+0xad8>
 800a388:	4649      	mov	r1, r9
 800a38a:	2300      	movs	r3, #0
 800a38c:	220a      	movs	r2, #10
 800a38e:	4658      	mov	r0, fp
 800a390:	f000 fb0c 	bl	800a9ac <__multadd>
 800a394:	4681      	mov	r9, r0
 800a396:	e7ea      	b.n	800a36e <_dtoa_r+0xb56>
 800a398:	0800cb74 	.word	0x0800cb74
 800a39c:	0800caf8 	.word	0x0800caf8

0800a3a0 <__sfputc_r>:
 800a3a0:	6893      	ldr	r3, [r2, #8]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	b410      	push	{r4}
 800a3a8:	6093      	str	r3, [r2, #8]
 800a3aa:	da08      	bge.n	800a3be <__sfputc_r+0x1e>
 800a3ac:	6994      	ldr	r4, [r2, #24]
 800a3ae:	42a3      	cmp	r3, r4
 800a3b0:	db01      	blt.n	800a3b6 <__sfputc_r+0x16>
 800a3b2:	290a      	cmp	r1, #10
 800a3b4:	d103      	bne.n	800a3be <__sfputc_r+0x1e>
 800a3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ba:	f000 be5a 	b.w	800b072 <__swbuf_r>
 800a3be:	6813      	ldr	r3, [r2, #0]
 800a3c0:	1c58      	adds	r0, r3, #1
 800a3c2:	6010      	str	r0, [r2, #0]
 800a3c4:	7019      	strb	r1, [r3, #0]
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <__sfputs_r>:
 800a3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	18d5      	adds	r5, r2, r3
 800a3d8:	42ac      	cmp	r4, r5
 800a3da:	d101      	bne.n	800a3e0 <__sfputs_r+0x12>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e007      	b.n	800a3f0 <__sfputs_r+0x22>
 800a3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e4:	463a      	mov	r2, r7
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f7ff ffda 	bl	800a3a0 <__sfputc_r>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d1f3      	bne.n	800a3d8 <__sfputs_r+0xa>
 800a3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3f4 <_vfiprintf_r>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	b09d      	sub	sp, #116	@ 0x74
 800a3fc:	4614      	mov	r4, r2
 800a3fe:	4698      	mov	r8, r3
 800a400:	4606      	mov	r6, r0
 800a402:	b118      	cbz	r0, 800a40c <_vfiprintf_r+0x18>
 800a404:	6a03      	ldr	r3, [r0, #32]
 800a406:	b90b      	cbnz	r3, 800a40c <_vfiprintf_r+0x18>
 800a408:	f7ff f89c 	bl	8009544 <__sinit>
 800a40c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a40e:	07d9      	lsls	r1, r3, #31
 800a410:	d405      	bmi.n	800a41e <_vfiprintf_r+0x2a>
 800a412:	89ab      	ldrh	r3, [r5, #12]
 800a414:	059a      	lsls	r2, r3, #22
 800a416:	d402      	bmi.n	800a41e <_vfiprintf_r+0x2a>
 800a418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a41a:	f7ff f970 	bl	80096fe <__retarget_lock_acquire_recursive>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	071b      	lsls	r3, r3, #28
 800a422:	d501      	bpl.n	800a428 <_vfiprintf_r+0x34>
 800a424:	692b      	ldr	r3, [r5, #16]
 800a426:	b99b      	cbnz	r3, 800a450 <_vfiprintf_r+0x5c>
 800a428:	4629      	mov	r1, r5
 800a42a:	4630      	mov	r0, r6
 800a42c:	f000 fe60 	bl	800b0f0 <__swsetup_r>
 800a430:	b170      	cbz	r0, 800a450 <_vfiprintf_r+0x5c>
 800a432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a434:	07dc      	lsls	r4, r3, #31
 800a436:	d504      	bpl.n	800a442 <_vfiprintf_r+0x4e>
 800a438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a43c:	b01d      	add	sp, #116	@ 0x74
 800a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a442:	89ab      	ldrh	r3, [r5, #12]
 800a444:	0598      	lsls	r0, r3, #22
 800a446:	d4f7      	bmi.n	800a438 <_vfiprintf_r+0x44>
 800a448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a44a:	f7ff f959 	bl	8009700 <__retarget_lock_release_recursive>
 800a44e:	e7f3      	b.n	800a438 <_vfiprintf_r+0x44>
 800a450:	2300      	movs	r3, #0
 800a452:	9309      	str	r3, [sp, #36]	@ 0x24
 800a454:	2320      	movs	r3, #32
 800a456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a45e:	2330      	movs	r3, #48	@ 0x30
 800a460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a610 <_vfiprintf_r+0x21c>
 800a464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a468:	f04f 0901 	mov.w	r9, #1
 800a46c:	4623      	mov	r3, r4
 800a46e:	469a      	mov	sl, r3
 800a470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a474:	b10a      	cbz	r2, 800a47a <_vfiprintf_r+0x86>
 800a476:	2a25      	cmp	r2, #37	@ 0x25
 800a478:	d1f9      	bne.n	800a46e <_vfiprintf_r+0x7a>
 800a47a:	ebba 0b04 	subs.w	fp, sl, r4
 800a47e:	d00b      	beq.n	800a498 <_vfiprintf_r+0xa4>
 800a480:	465b      	mov	r3, fp
 800a482:	4622      	mov	r2, r4
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ffa1 	bl	800a3ce <__sfputs_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	f000 80a7 	beq.w	800a5e0 <_vfiprintf_r+0x1ec>
 800a492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a494:	445a      	add	r2, fp
 800a496:	9209      	str	r2, [sp, #36]	@ 0x24
 800a498:	f89a 3000 	ldrb.w	r3, [sl]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 809f 	beq.w	800a5e0 <_vfiprintf_r+0x1ec>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ac:	f10a 0a01 	add.w	sl, sl, #1
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	9307      	str	r3, [sp, #28]
 800a4b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4ba:	4654      	mov	r4, sl
 800a4bc:	2205      	movs	r2, #5
 800a4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c2:	4853      	ldr	r0, [pc, #332]	@ (800a610 <_vfiprintf_r+0x21c>)
 800a4c4:	f7f5 fe9c 	bl	8000200 <memchr>
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	b9d8      	cbnz	r0, 800a504 <_vfiprintf_r+0x110>
 800a4cc:	06d1      	lsls	r1, r2, #27
 800a4ce:	bf44      	itt	mi
 800a4d0:	2320      	movmi	r3, #32
 800a4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4d6:	0713      	lsls	r3, r2, #28
 800a4d8:	bf44      	itt	mi
 800a4da:	232b      	movmi	r3, #43	@ 0x2b
 800a4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4e6:	d015      	beq.n	800a514 <_vfiprintf_r+0x120>
 800a4e8:	9a07      	ldr	r2, [sp, #28]
 800a4ea:	4654      	mov	r4, sl
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f04f 0c0a 	mov.w	ip, #10
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f8:	3b30      	subs	r3, #48	@ 0x30
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	d94b      	bls.n	800a596 <_vfiprintf_r+0x1a2>
 800a4fe:	b1b0      	cbz	r0, 800a52e <_vfiprintf_r+0x13a>
 800a500:	9207      	str	r2, [sp, #28]
 800a502:	e014      	b.n	800a52e <_vfiprintf_r+0x13a>
 800a504:	eba0 0308 	sub.w	r3, r0, r8
 800a508:	fa09 f303 	lsl.w	r3, r9, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	46a2      	mov	sl, r4
 800a512:	e7d2      	b.n	800a4ba <_vfiprintf_r+0xc6>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d19      	adds	r1, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9103      	str	r1, [sp, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfbb      	ittet	lt
 800a520:	425b      	neglt	r3, r3
 800a522:	f042 0202 	orrlt.w	r2, r2, #2
 800a526:	9307      	strge	r3, [sp, #28]
 800a528:	9307      	strlt	r3, [sp, #28]
 800a52a:	bfb8      	it	lt
 800a52c:	9204      	strlt	r2, [sp, #16]
 800a52e:	7823      	ldrb	r3, [r4, #0]
 800a530:	2b2e      	cmp	r3, #46	@ 0x2e
 800a532:	d10a      	bne.n	800a54a <_vfiprintf_r+0x156>
 800a534:	7863      	ldrb	r3, [r4, #1]
 800a536:	2b2a      	cmp	r3, #42	@ 0x2a
 800a538:	d132      	bne.n	800a5a0 <_vfiprintf_r+0x1ac>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9203      	str	r2, [sp, #12]
 800a542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a546:	3402      	adds	r4, #2
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a620 <_vfiprintf_r+0x22c>
 800a54e:	7821      	ldrb	r1, [r4, #0]
 800a550:	2203      	movs	r2, #3
 800a552:	4650      	mov	r0, sl
 800a554:	f7f5 fe54 	bl	8000200 <memchr>
 800a558:	b138      	cbz	r0, 800a56a <_vfiprintf_r+0x176>
 800a55a:	9b04      	ldr	r3, [sp, #16]
 800a55c:	eba0 000a 	sub.w	r0, r0, sl
 800a560:	2240      	movs	r2, #64	@ 0x40
 800a562:	4082      	lsls	r2, r0
 800a564:	4313      	orrs	r3, r2
 800a566:	3401      	adds	r4, #1
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56e:	4829      	ldr	r0, [pc, #164]	@ (800a614 <_vfiprintf_r+0x220>)
 800a570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a574:	2206      	movs	r2, #6
 800a576:	f7f5 fe43 	bl	8000200 <memchr>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d03f      	beq.n	800a5fe <_vfiprintf_r+0x20a>
 800a57e:	4b26      	ldr	r3, [pc, #152]	@ (800a618 <_vfiprintf_r+0x224>)
 800a580:	bb1b      	cbnz	r3, 800a5ca <_vfiprintf_r+0x1d6>
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	3307      	adds	r3, #7
 800a586:	f023 0307 	bic.w	r3, r3, #7
 800a58a:	3308      	adds	r3, #8
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a590:	443b      	add	r3, r7
 800a592:	9309      	str	r3, [sp, #36]	@ 0x24
 800a594:	e76a      	b.n	800a46c <_vfiprintf_r+0x78>
 800a596:	fb0c 3202 	mla	r2, ip, r2, r3
 800a59a:	460c      	mov	r4, r1
 800a59c:	2001      	movs	r0, #1
 800a59e:	e7a8      	b.n	800a4f2 <_vfiprintf_r+0xfe>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	3401      	adds	r4, #1
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	f04f 0c0a 	mov.w	ip, #10
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b2:	3a30      	subs	r2, #48	@ 0x30
 800a5b4:	2a09      	cmp	r2, #9
 800a5b6:	d903      	bls.n	800a5c0 <_vfiprintf_r+0x1cc>
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0c6      	beq.n	800a54a <_vfiprintf_r+0x156>
 800a5bc:	9105      	str	r1, [sp, #20]
 800a5be:	e7c4      	b.n	800a54a <_vfiprintf_r+0x156>
 800a5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e7f0      	b.n	800a5ac <_vfiprintf_r+0x1b8>
 800a5ca:	ab03      	add	r3, sp, #12
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	4b12      	ldr	r3, [pc, #72]	@ (800a61c <_vfiprintf_r+0x228>)
 800a5d2:	a904      	add	r1, sp, #16
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7fe fb71 	bl	8008cbc <_printf_float>
 800a5da:	4607      	mov	r7, r0
 800a5dc:	1c78      	adds	r0, r7, #1
 800a5de:	d1d6      	bne.n	800a58e <_vfiprintf_r+0x19a>
 800a5e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5e2:	07d9      	lsls	r1, r3, #31
 800a5e4:	d405      	bmi.n	800a5f2 <_vfiprintf_r+0x1fe>
 800a5e6:	89ab      	ldrh	r3, [r5, #12]
 800a5e8:	059a      	lsls	r2, r3, #22
 800a5ea:	d402      	bmi.n	800a5f2 <_vfiprintf_r+0x1fe>
 800a5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5ee:	f7ff f887 	bl	8009700 <__retarget_lock_release_recursive>
 800a5f2:	89ab      	ldrh	r3, [r5, #12]
 800a5f4:	065b      	lsls	r3, r3, #25
 800a5f6:	f53f af1f 	bmi.w	800a438 <_vfiprintf_r+0x44>
 800a5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5fc:	e71e      	b.n	800a43c <_vfiprintf_r+0x48>
 800a5fe:	ab03      	add	r3, sp, #12
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	462a      	mov	r2, r5
 800a604:	4b05      	ldr	r3, [pc, #20]	@ (800a61c <_vfiprintf_r+0x228>)
 800a606:	a904      	add	r1, sp, #16
 800a608:	4630      	mov	r0, r6
 800a60a:	f7fe fdef 	bl	80091ec <_printf_i>
 800a60e:	e7e4      	b.n	800a5da <_vfiprintf_r+0x1e6>
 800a610:	0800cb85 	.word	0x0800cb85
 800a614:	0800cb8f 	.word	0x0800cb8f
 800a618:	08008cbd 	.word	0x08008cbd
 800a61c:	0800a3cf 	.word	0x0800a3cf
 800a620:	0800cb8b 	.word	0x0800cb8b

0800a624 <malloc>:
 800a624:	4b02      	ldr	r3, [pc, #8]	@ (800a630 <malloc+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f000 b825 	b.w	800a678 <_malloc_r>
 800a62e:	bf00      	nop
 800a630:	20000230 	.word	0x20000230

0800a634 <sbrk_aligned>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	4e0f      	ldr	r6, [pc, #60]	@ (800a674 <sbrk_aligned+0x40>)
 800a638:	460c      	mov	r4, r1
 800a63a:	6831      	ldr	r1, [r6, #0]
 800a63c:	4605      	mov	r5, r0
 800a63e:	b911      	cbnz	r1, 800a646 <sbrk_aligned+0x12>
 800a640:	f000 fe64 	bl	800b30c <_sbrk_r>
 800a644:	6030      	str	r0, [r6, #0]
 800a646:	4621      	mov	r1, r4
 800a648:	4628      	mov	r0, r5
 800a64a:	f000 fe5f 	bl	800b30c <_sbrk_r>
 800a64e:	1c43      	adds	r3, r0, #1
 800a650:	d103      	bne.n	800a65a <sbrk_aligned+0x26>
 800a652:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a656:	4620      	mov	r0, r4
 800a658:	bd70      	pop	{r4, r5, r6, pc}
 800a65a:	1cc4      	adds	r4, r0, #3
 800a65c:	f024 0403 	bic.w	r4, r4, #3
 800a660:	42a0      	cmp	r0, r4
 800a662:	d0f8      	beq.n	800a656 <sbrk_aligned+0x22>
 800a664:	1a21      	subs	r1, r4, r0
 800a666:	4628      	mov	r0, r5
 800a668:	f000 fe50 	bl	800b30c <_sbrk_r>
 800a66c:	3001      	adds	r0, #1
 800a66e:	d1f2      	bne.n	800a656 <sbrk_aligned+0x22>
 800a670:	e7ef      	b.n	800a652 <sbrk_aligned+0x1e>
 800a672:	bf00      	nop
 800a674:	200007e8 	.word	0x200007e8

0800a678 <_malloc_r>:
 800a678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a67c:	1ccd      	adds	r5, r1, #3
 800a67e:	f025 0503 	bic.w	r5, r5, #3
 800a682:	3508      	adds	r5, #8
 800a684:	2d0c      	cmp	r5, #12
 800a686:	bf38      	it	cc
 800a688:	250c      	movcc	r5, #12
 800a68a:	2d00      	cmp	r5, #0
 800a68c:	4606      	mov	r6, r0
 800a68e:	db01      	blt.n	800a694 <_malloc_r+0x1c>
 800a690:	42a9      	cmp	r1, r5
 800a692:	d904      	bls.n	800a69e <_malloc_r+0x26>
 800a694:	230c      	movs	r3, #12
 800a696:	6033      	str	r3, [r6, #0]
 800a698:	2000      	movs	r0, #0
 800a69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a774 <_malloc_r+0xfc>
 800a6a2:	f000 f915 	bl	800a8d0 <__malloc_lock>
 800a6a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6aa:	461c      	mov	r4, r3
 800a6ac:	bb44      	cbnz	r4, 800a700 <_malloc_r+0x88>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff ffbf 	bl	800a634 <sbrk_aligned>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	d158      	bne.n	800a76e <_malloc_r+0xf6>
 800a6bc:	f8d8 4000 	ldr.w	r4, [r8]
 800a6c0:	4627      	mov	r7, r4
 800a6c2:	2f00      	cmp	r7, #0
 800a6c4:	d143      	bne.n	800a74e <_malloc_r+0xd6>
 800a6c6:	2c00      	cmp	r4, #0
 800a6c8:	d04b      	beq.n	800a762 <_malloc_r+0xea>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	eb04 0903 	add.w	r9, r4, r3
 800a6d4:	f000 fe1a 	bl	800b30c <_sbrk_r>
 800a6d8:	4581      	cmp	r9, r0
 800a6da:	d142      	bne.n	800a762 <_malloc_r+0xea>
 800a6dc:	6821      	ldr	r1, [r4, #0]
 800a6de:	1a6d      	subs	r5, r5, r1
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7ff ffa6 	bl	800a634 <sbrk_aligned>
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d03a      	beq.n	800a762 <_malloc_r+0xea>
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	442b      	add	r3, r5
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	bb62      	cbnz	r2, 800a754 <_malloc_r+0xdc>
 800a6fa:	f8c8 7000 	str.w	r7, [r8]
 800a6fe:	e00f      	b.n	800a720 <_malloc_r+0xa8>
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	1b52      	subs	r2, r2, r5
 800a704:	d420      	bmi.n	800a748 <_malloc_r+0xd0>
 800a706:	2a0b      	cmp	r2, #11
 800a708:	d917      	bls.n	800a73a <_malloc_r+0xc2>
 800a70a:	1961      	adds	r1, r4, r5
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	6025      	str	r5, [r4, #0]
 800a710:	bf18      	it	ne
 800a712:	6059      	strne	r1, [r3, #4]
 800a714:	6863      	ldr	r3, [r4, #4]
 800a716:	bf08      	it	eq
 800a718:	f8c8 1000 	streq.w	r1, [r8]
 800a71c:	5162      	str	r2, [r4, r5]
 800a71e:	604b      	str	r3, [r1, #4]
 800a720:	4630      	mov	r0, r6
 800a722:	f000 f8db 	bl	800a8dc <__malloc_unlock>
 800a726:	f104 000b 	add.w	r0, r4, #11
 800a72a:	1d23      	adds	r3, r4, #4
 800a72c:	f020 0007 	bic.w	r0, r0, #7
 800a730:	1ac2      	subs	r2, r0, r3
 800a732:	bf1c      	itt	ne
 800a734:	1a1b      	subne	r3, r3, r0
 800a736:	50a3      	strne	r3, [r4, r2]
 800a738:	e7af      	b.n	800a69a <_malloc_r+0x22>
 800a73a:	6862      	ldr	r2, [r4, #4]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	bf0c      	ite	eq
 800a740:	f8c8 2000 	streq.w	r2, [r8]
 800a744:	605a      	strne	r2, [r3, #4]
 800a746:	e7eb      	b.n	800a720 <_malloc_r+0xa8>
 800a748:	4623      	mov	r3, r4
 800a74a:	6864      	ldr	r4, [r4, #4]
 800a74c:	e7ae      	b.n	800a6ac <_malloc_r+0x34>
 800a74e:	463c      	mov	r4, r7
 800a750:	687f      	ldr	r7, [r7, #4]
 800a752:	e7b6      	b.n	800a6c2 <_malloc_r+0x4a>
 800a754:	461a      	mov	r2, r3
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d1fb      	bne.n	800a754 <_malloc_r+0xdc>
 800a75c:	2300      	movs	r3, #0
 800a75e:	6053      	str	r3, [r2, #4]
 800a760:	e7de      	b.n	800a720 <_malloc_r+0xa8>
 800a762:	230c      	movs	r3, #12
 800a764:	6033      	str	r3, [r6, #0]
 800a766:	4630      	mov	r0, r6
 800a768:	f000 f8b8 	bl	800a8dc <__malloc_unlock>
 800a76c:	e794      	b.n	800a698 <_malloc_r+0x20>
 800a76e:	6005      	str	r5, [r0, #0]
 800a770:	e7d6      	b.n	800a720 <_malloc_r+0xa8>
 800a772:	bf00      	nop
 800a774:	200007ec 	.word	0x200007ec

0800a778 <__sflush_r>:
 800a778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a780:	0716      	lsls	r6, r2, #28
 800a782:	4605      	mov	r5, r0
 800a784:	460c      	mov	r4, r1
 800a786:	d454      	bmi.n	800a832 <__sflush_r+0xba>
 800a788:	684b      	ldr	r3, [r1, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dc02      	bgt.n	800a794 <__sflush_r+0x1c>
 800a78e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a790:	2b00      	cmp	r3, #0
 800a792:	dd48      	ble.n	800a826 <__sflush_r+0xae>
 800a794:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a796:	2e00      	cmp	r6, #0
 800a798:	d045      	beq.n	800a826 <__sflush_r+0xae>
 800a79a:	2300      	movs	r3, #0
 800a79c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7a0:	682f      	ldr	r7, [r5, #0]
 800a7a2:	6a21      	ldr	r1, [r4, #32]
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	d030      	beq.n	800a80a <__sflush_r+0x92>
 800a7a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	0759      	lsls	r1, r3, #29
 800a7ae:	d505      	bpl.n	800a7bc <__sflush_r+0x44>
 800a7b0:	6863      	ldr	r3, [r4, #4]
 800a7b2:	1ad2      	subs	r2, r2, r3
 800a7b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7b6:	b10b      	cbz	r3, 800a7bc <__sflush_r+0x44>
 800a7b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7ba:	1ad2      	subs	r2, r2, r3
 800a7bc:	2300      	movs	r3, #0
 800a7be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7c0:	6a21      	ldr	r1, [r4, #32]
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b0      	blx	r6
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	d106      	bne.n	800a7da <__sflush_r+0x62>
 800a7cc:	6829      	ldr	r1, [r5, #0]
 800a7ce:	291d      	cmp	r1, #29
 800a7d0:	d82b      	bhi.n	800a82a <__sflush_r+0xb2>
 800a7d2:	4a2a      	ldr	r2, [pc, #168]	@ (800a87c <__sflush_r+0x104>)
 800a7d4:	410a      	asrs	r2, r1
 800a7d6:	07d6      	lsls	r6, r2, #31
 800a7d8:	d427      	bmi.n	800a82a <__sflush_r+0xb2>
 800a7da:	2200      	movs	r2, #0
 800a7dc:	6062      	str	r2, [r4, #4]
 800a7de:	04d9      	lsls	r1, r3, #19
 800a7e0:	6922      	ldr	r2, [r4, #16]
 800a7e2:	6022      	str	r2, [r4, #0]
 800a7e4:	d504      	bpl.n	800a7f0 <__sflush_r+0x78>
 800a7e6:	1c42      	adds	r2, r0, #1
 800a7e8:	d101      	bne.n	800a7ee <__sflush_r+0x76>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	b903      	cbnz	r3, 800a7f0 <__sflush_r+0x78>
 800a7ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7f2:	602f      	str	r7, [r5, #0]
 800a7f4:	b1b9      	cbz	r1, 800a826 <__sflush_r+0xae>
 800a7f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	d002      	beq.n	800a804 <__sflush_r+0x8c>
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 fde6 	bl	800b3d0 <_free_r>
 800a804:	2300      	movs	r3, #0
 800a806:	6363      	str	r3, [r4, #52]	@ 0x34
 800a808:	e00d      	b.n	800a826 <__sflush_r+0xae>
 800a80a:	2301      	movs	r3, #1
 800a80c:	4628      	mov	r0, r5
 800a80e:	47b0      	blx	r6
 800a810:	4602      	mov	r2, r0
 800a812:	1c50      	adds	r0, r2, #1
 800a814:	d1c9      	bne.n	800a7aa <__sflush_r+0x32>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0c6      	beq.n	800a7aa <__sflush_r+0x32>
 800a81c:	2b1d      	cmp	r3, #29
 800a81e:	d001      	beq.n	800a824 <__sflush_r+0xac>
 800a820:	2b16      	cmp	r3, #22
 800a822:	d11e      	bne.n	800a862 <__sflush_r+0xea>
 800a824:	602f      	str	r7, [r5, #0]
 800a826:	2000      	movs	r0, #0
 800a828:	e022      	b.n	800a870 <__sflush_r+0xf8>
 800a82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a82e:	b21b      	sxth	r3, r3
 800a830:	e01b      	b.n	800a86a <__sflush_r+0xf2>
 800a832:	690f      	ldr	r7, [r1, #16]
 800a834:	2f00      	cmp	r7, #0
 800a836:	d0f6      	beq.n	800a826 <__sflush_r+0xae>
 800a838:	0793      	lsls	r3, r2, #30
 800a83a:	680e      	ldr	r6, [r1, #0]
 800a83c:	bf08      	it	eq
 800a83e:	694b      	ldreq	r3, [r1, #20]
 800a840:	600f      	str	r7, [r1, #0]
 800a842:	bf18      	it	ne
 800a844:	2300      	movne	r3, #0
 800a846:	eba6 0807 	sub.w	r8, r6, r7
 800a84a:	608b      	str	r3, [r1, #8]
 800a84c:	f1b8 0f00 	cmp.w	r8, #0
 800a850:	dde9      	ble.n	800a826 <__sflush_r+0xae>
 800a852:	6a21      	ldr	r1, [r4, #32]
 800a854:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a856:	4643      	mov	r3, r8
 800a858:	463a      	mov	r2, r7
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b0      	blx	r6
 800a85e:	2800      	cmp	r0, #0
 800a860:	dc08      	bgt.n	800a874 <__sflush_r+0xfc>
 800a862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a874:	4407      	add	r7, r0
 800a876:	eba8 0800 	sub.w	r8, r8, r0
 800a87a:	e7e7      	b.n	800a84c <__sflush_r+0xd4>
 800a87c:	dfbffffe 	.word	0xdfbffffe

0800a880 <_fflush_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	690b      	ldr	r3, [r1, #16]
 800a884:	4605      	mov	r5, r0
 800a886:	460c      	mov	r4, r1
 800a888:	b913      	cbnz	r3, 800a890 <_fflush_r+0x10>
 800a88a:	2500      	movs	r5, #0
 800a88c:	4628      	mov	r0, r5
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	b118      	cbz	r0, 800a89a <_fflush_r+0x1a>
 800a892:	6a03      	ldr	r3, [r0, #32]
 800a894:	b90b      	cbnz	r3, 800a89a <_fflush_r+0x1a>
 800a896:	f7fe fe55 	bl	8009544 <__sinit>
 800a89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0f3      	beq.n	800a88a <_fflush_r+0xa>
 800a8a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8a4:	07d0      	lsls	r0, r2, #31
 800a8a6:	d404      	bmi.n	800a8b2 <_fflush_r+0x32>
 800a8a8:	0599      	lsls	r1, r3, #22
 800a8aa:	d402      	bmi.n	800a8b2 <_fflush_r+0x32>
 800a8ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ae:	f7fe ff26 	bl	80096fe <__retarget_lock_acquire_recursive>
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	f7ff ff5f 	bl	800a778 <__sflush_r>
 800a8ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8bc:	07da      	lsls	r2, r3, #31
 800a8be:	4605      	mov	r5, r0
 800a8c0:	d4e4      	bmi.n	800a88c <_fflush_r+0xc>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	059b      	lsls	r3, r3, #22
 800a8c6:	d4e1      	bmi.n	800a88c <_fflush_r+0xc>
 800a8c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ca:	f7fe ff19 	bl	8009700 <__retarget_lock_release_recursive>
 800a8ce:	e7dd      	b.n	800a88c <_fflush_r+0xc>

0800a8d0 <__malloc_lock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	@ (800a8d8 <__malloc_lock+0x8>)
 800a8d2:	f7fe bf14 	b.w	80096fe <__retarget_lock_acquire_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	200007e4 	.word	0x200007e4

0800a8dc <__malloc_unlock>:
 800a8dc:	4801      	ldr	r0, [pc, #4]	@ (800a8e4 <__malloc_unlock+0x8>)
 800a8de:	f7fe bf0f 	b.w	8009700 <__retarget_lock_release_recursive>
 800a8e2:	bf00      	nop
 800a8e4:	200007e4 	.word	0x200007e4

0800a8e8 <_Balloc>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	69c6      	ldr	r6, [r0, #28]
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	b976      	cbnz	r6, 800a910 <_Balloc+0x28>
 800a8f2:	2010      	movs	r0, #16
 800a8f4:	f7ff fe96 	bl	800a624 <malloc>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	61e0      	str	r0, [r4, #28]
 800a8fc:	b920      	cbnz	r0, 800a908 <_Balloc+0x20>
 800a8fe:	4b18      	ldr	r3, [pc, #96]	@ (800a960 <_Balloc+0x78>)
 800a900:	4818      	ldr	r0, [pc, #96]	@ (800a964 <_Balloc+0x7c>)
 800a902:	216b      	movs	r1, #107	@ 0x6b
 800a904:	f000 fd32 	bl	800b36c <__assert_func>
 800a908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a90c:	6006      	str	r6, [r0, #0]
 800a90e:	60c6      	str	r6, [r0, #12]
 800a910:	69e6      	ldr	r6, [r4, #28]
 800a912:	68f3      	ldr	r3, [r6, #12]
 800a914:	b183      	cbz	r3, 800a938 <_Balloc+0x50>
 800a916:	69e3      	ldr	r3, [r4, #28]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a91e:	b9b8      	cbnz	r0, 800a950 <_Balloc+0x68>
 800a920:	2101      	movs	r1, #1
 800a922:	fa01 f605 	lsl.w	r6, r1, r5
 800a926:	1d72      	adds	r2, r6, #5
 800a928:	0092      	lsls	r2, r2, #2
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 fd3c 	bl	800b3a8 <_calloc_r>
 800a930:	b160      	cbz	r0, 800a94c <_Balloc+0x64>
 800a932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a936:	e00e      	b.n	800a956 <_Balloc+0x6e>
 800a938:	2221      	movs	r2, #33	@ 0x21
 800a93a:	2104      	movs	r1, #4
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 fd33 	bl	800b3a8 <_calloc_r>
 800a942:	69e3      	ldr	r3, [r4, #28]
 800a944:	60f0      	str	r0, [r6, #12]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e4      	bne.n	800a916 <_Balloc+0x2e>
 800a94c:	2000      	movs	r0, #0
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	6802      	ldr	r2, [r0, #0]
 800a952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a956:	2300      	movs	r3, #0
 800a958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a95c:	e7f7      	b.n	800a94e <_Balloc+0x66>
 800a95e:	bf00      	nop
 800a960:	0800cb05 	.word	0x0800cb05
 800a964:	0800cb96 	.word	0x0800cb96

0800a968 <_Bfree>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	69c6      	ldr	r6, [r0, #28]
 800a96c:	4605      	mov	r5, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	b976      	cbnz	r6, 800a990 <_Bfree+0x28>
 800a972:	2010      	movs	r0, #16
 800a974:	f7ff fe56 	bl	800a624 <malloc>
 800a978:	4602      	mov	r2, r0
 800a97a:	61e8      	str	r0, [r5, #28]
 800a97c:	b920      	cbnz	r0, 800a988 <_Bfree+0x20>
 800a97e:	4b09      	ldr	r3, [pc, #36]	@ (800a9a4 <_Bfree+0x3c>)
 800a980:	4809      	ldr	r0, [pc, #36]	@ (800a9a8 <_Bfree+0x40>)
 800a982:	218f      	movs	r1, #143	@ 0x8f
 800a984:	f000 fcf2 	bl	800b36c <__assert_func>
 800a988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a98c:	6006      	str	r6, [r0, #0]
 800a98e:	60c6      	str	r6, [r0, #12]
 800a990:	b13c      	cbz	r4, 800a9a2 <_Bfree+0x3a>
 800a992:	69eb      	ldr	r3, [r5, #28]
 800a994:	6862      	ldr	r2, [r4, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a99c:	6021      	str	r1, [r4, #0]
 800a99e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	0800cb05 	.word	0x0800cb05
 800a9a8:	0800cb96 	.word	0x0800cb96

0800a9ac <__multadd>:
 800a9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b0:	690d      	ldr	r5, [r1, #16]
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	461e      	mov	r6, r3
 800a9b8:	f101 0c14 	add.w	ip, r1, #20
 800a9bc:	2000      	movs	r0, #0
 800a9be:	f8dc 3000 	ldr.w	r3, [ip]
 800a9c2:	b299      	uxth	r1, r3
 800a9c4:	fb02 6101 	mla	r1, r2, r1, r6
 800a9c8:	0c1e      	lsrs	r6, r3, #16
 800a9ca:	0c0b      	lsrs	r3, r1, #16
 800a9cc:	fb02 3306 	mla	r3, r2, r6, r3
 800a9d0:	b289      	uxth	r1, r1
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9d8:	4285      	cmp	r5, r0
 800a9da:	f84c 1b04 	str.w	r1, [ip], #4
 800a9de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9e2:	dcec      	bgt.n	800a9be <__multadd+0x12>
 800a9e4:	b30e      	cbz	r6, 800aa2a <__multadd+0x7e>
 800a9e6:	68a3      	ldr	r3, [r4, #8]
 800a9e8:	42ab      	cmp	r3, r5
 800a9ea:	dc19      	bgt.n	800aa20 <__multadd+0x74>
 800a9ec:	6861      	ldr	r1, [r4, #4]
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	3101      	adds	r1, #1
 800a9f2:	f7ff ff79 	bl	800a8e8 <_Balloc>
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	b928      	cbnz	r0, 800aa06 <__multadd+0x5a>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa30 <__multadd+0x84>)
 800a9fe:	480d      	ldr	r0, [pc, #52]	@ (800aa34 <__multadd+0x88>)
 800aa00:	21ba      	movs	r1, #186	@ 0xba
 800aa02:	f000 fcb3 	bl	800b36c <__assert_func>
 800aa06:	6922      	ldr	r2, [r4, #16]
 800aa08:	3202      	adds	r2, #2
 800aa0a:	f104 010c 	add.w	r1, r4, #12
 800aa0e:	0092      	lsls	r2, r2, #2
 800aa10:	300c      	adds	r0, #12
 800aa12:	f000 fc9d 	bl	800b350 <memcpy>
 800aa16:	4621      	mov	r1, r4
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f7ff ffa5 	bl	800a968 <_Bfree>
 800aa1e:	4644      	mov	r4, r8
 800aa20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa24:	3501      	adds	r5, #1
 800aa26:	615e      	str	r6, [r3, #20]
 800aa28:	6125      	str	r5, [r4, #16]
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	0800cb74 	.word	0x0800cb74
 800aa34:	0800cb96 	.word	0x0800cb96

0800aa38 <__hi0bits>:
 800aa38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	bf36      	itet	cc
 800aa40:	0403      	lslcc	r3, r0, #16
 800aa42:	2000      	movcs	r0, #0
 800aa44:	2010      	movcc	r0, #16
 800aa46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa4a:	bf3c      	itt	cc
 800aa4c:	021b      	lslcc	r3, r3, #8
 800aa4e:	3008      	addcc	r0, #8
 800aa50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa54:	bf3c      	itt	cc
 800aa56:	011b      	lslcc	r3, r3, #4
 800aa58:	3004      	addcc	r0, #4
 800aa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa5e:	bf3c      	itt	cc
 800aa60:	009b      	lslcc	r3, r3, #2
 800aa62:	3002      	addcc	r0, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	db05      	blt.n	800aa74 <__hi0bits+0x3c>
 800aa68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa6c:	f100 0001 	add.w	r0, r0, #1
 800aa70:	bf08      	it	eq
 800aa72:	2020      	moveq	r0, #32
 800aa74:	4770      	bx	lr

0800aa76 <__lo0bits>:
 800aa76:	6803      	ldr	r3, [r0, #0]
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f013 0007 	ands.w	r0, r3, #7
 800aa7e:	d00b      	beq.n	800aa98 <__lo0bits+0x22>
 800aa80:	07d9      	lsls	r1, r3, #31
 800aa82:	d421      	bmi.n	800aac8 <__lo0bits+0x52>
 800aa84:	0798      	lsls	r0, r3, #30
 800aa86:	bf49      	itett	mi
 800aa88:	085b      	lsrmi	r3, r3, #1
 800aa8a:	089b      	lsrpl	r3, r3, #2
 800aa8c:	2001      	movmi	r0, #1
 800aa8e:	6013      	strmi	r3, [r2, #0]
 800aa90:	bf5c      	itt	pl
 800aa92:	6013      	strpl	r3, [r2, #0]
 800aa94:	2002      	movpl	r0, #2
 800aa96:	4770      	bx	lr
 800aa98:	b299      	uxth	r1, r3
 800aa9a:	b909      	cbnz	r1, 800aaa0 <__lo0bits+0x2a>
 800aa9c:	0c1b      	lsrs	r3, r3, #16
 800aa9e:	2010      	movs	r0, #16
 800aaa0:	b2d9      	uxtb	r1, r3
 800aaa2:	b909      	cbnz	r1, 800aaa8 <__lo0bits+0x32>
 800aaa4:	3008      	adds	r0, #8
 800aaa6:	0a1b      	lsrs	r3, r3, #8
 800aaa8:	0719      	lsls	r1, r3, #28
 800aaaa:	bf04      	itt	eq
 800aaac:	091b      	lsreq	r3, r3, #4
 800aaae:	3004      	addeq	r0, #4
 800aab0:	0799      	lsls	r1, r3, #30
 800aab2:	bf04      	itt	eq
 800aab4:	089b      	lsreq	r3, r3, #2
 800aab6:	3002      	addeq	r0, #2
 800aab8:	07d9      	lsls	r1, r3, #31
 800aaba:	d403      	bmi.n	800aac4 <__lo0bits+0x4e>
 800aabc:	085b      	lsrs	r3, r3, #1
 800aabe:	f100 0001 	add.w	r0, r0, #1
 800aac2:	d003      	beq.n	800aacc <__lo0bits+0x56>
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	4770      	bx	lr
 800aac8:	2000      	movs	r0, #0
 800aaca:	4770      	bx	lr
 800aacc:	2020      	movs	r0, #32
 800aace:	4770      	bx	lr

0800aad0 <__i2b>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	460c      	mov	r4, r1
 800aad4:	2101      	movs	r1, #1
 800aad6:	f7ff ff07 	bl	800a8e8 <_Balloc>
 800aada:	4602      	mov	r2, r0
 800aadc:	b928      	cbnz	r0, 800aaea <__i2b+0x1a>
 800aade:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <__i2b+0x24>)
 800aae0:	4805      	ldr	r0, [pc, #20]	@ (800aaf8 <__i2b+0x28>)
 800aae2:	f240 1145 	movw	r1, #325	@ 0x145
 800aae6:	f000 fc41 	bl	800b36c <__assert_func>
 800aaea:	2301      	movs	r3, #1
 800aaec:	6144      	str	r4, [r0, #20]
 800aaee:	6103      	str	r3, [r0, #16]
 800aaf0:	bd10      	pop	{r4, pc}
 800aaf2:	bf00      	nop
 800aaf4:	0800cb74 	.word	0x0800cb74
 800aaf8:	0800cb96 	.word	0x0800cb96

0800aafc <__multiply>:
 800aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	4614      	mov	r4, r2
 800ab02:	690a      	ldr	r2, [r1, #16]
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	bfa8      	it	ge
 800ab0a:	4623      	movge	r3, r4
 800ab0c:	460f      	mov	r7, r1
 800ab0e:	bfa4      	itt	ge
 800ab10:	460c      	movge	r4, r1
 800ab12:	461f      	movge	r7, r3
 800ab14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab1c:	68a3      	ldr	r3, [r4, #8]
 800ab1e:	6861      	ldr	r1, [r4, #4]
 800ab20:	eb0a 0609 	add.w	r6, sl, r9
 800ab24:	42b3      	cmp	r3, r6
 800ab26:	b085      	sub	sp, #20
 800ab28:	bfb8      	it	lt
 800ab2a:	3101      	addlt	r1, #1
 800ab2c:	f7ff fedc 	bl	800a8e8 <_Balloc>
 800ab30:	b930      	cbnz	r0, 800ab40 <__multiply+0x44>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4b44      	ldr	r3, [pc, #272]	@ (800ac48 <__multiply+0x14c>)
 800ab36:	4845      	ldr	r0, [pc, #276]	@ (800ac4c <__multiply+0x150>)
 800ab38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab3c:	f000 fc16 	bl	800b36c <__assert_func>
 800ab40:	f100 0514 	add.w	r5, r0, #20
 800ab44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab48:	462b      	mov	r3, r5
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	4543      	cmp	r3, r8
 800ab4e:	d321      	bcc.n	800ab94 <__multiply+0x98>
 800ab50:	f107 0114 	add.w	r1, r7, #20
 800ab54:	f104 0214 	add.w	r2, r4, #20
 800ab58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab60:	9302      	str	r3, [sp, #8]
 800ab62:	1b13      	subs	r3, r2, r4
 800ab64:	3b15      	subs	r3, #21
 800ab66:	f023 0303 	bic.w	r3, r3, #3
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	f104 0715 	add.w	r7, r4, #21
 800ab70:	42ba      	cmp	r2, r7
 800ab72:	bf38      	it	cc
 800ab74:	2304      	movcc	r3, #4
 800ab76:	9301      	str	r3, [sp, #4]
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	9103      	str	r1, [sp, #12]
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	d80c      	bhi.n	800ab9a <__multiply+0x9e>
 800ab80:	2e00      	cmp	r6, #0
 800ab82:	dd03      	ble.n	800ab8c <__multiply+0x90>
 800ab84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d05b      	beq.n	800ac44 <__multiply+0x148>
 800ab8c:	6106      	str	r6, [r0, #16]
 800ab8e:	b005      	add	sp, #20
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	f843 2b04 	str.w	r2, [r3], #4
 800ab98:	e7d8      	b.n	800ab4c <__multiply+0x50>
 800ab9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab9e:	f1ba 0f00 	cmp.w	sl, #0
 800aba2:	d024      	beq.n	800abee <__multiply+0xf2>
 800aba4:	f104 0e14 	add.w	lr, r4, #20
 800aba8:	46a9      	mov	r9, r5
 800abaa:	f04f 0c00 	mov.w	ip, #0
 800abae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abb2:	f8d9 3000 	ldr.w	r3, [r9]
 800abb6:	fa1f fb87 	uxth.w	fp, r7
 800abba:	b29b      	uxth	r3, r3
 800abbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800abc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800abc4:	f8d9 7000 	ldr.w	r7, [r9]
 800abc8:	4463      	add	r3, ip
 800abca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abce:	fb0a c70b 	mla	r7, sl, fp, ip
 800abd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abdc:	4572      	cmp	r2, lr
 800abde:	f849 3b04 	str.w	r3, [r9], #4
 800abe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abe6:	d8e2      	bhi.n	800abae <__multiply+0xb2>
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	f845 c003 	str.w	ip, [r5, r3]
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800abf4:	3104      	adds	r1, #4
 800abf6:	f1b9 0f00 	cmp.w	r9, #0
 800abfa:	d021      	beq.n	800ac40 <__multiply+0x144>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	f104 0c14 	add.w	ip, r4, #20
 800ac02:	46ae      	mov	lr, r5
 800ac04:	f04f 0a00 	mov.w	sl, #0
 800ac08:	f8bc b000 	ldrh.w	fp, [ip]
 800ac0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac10:	fb09 770b 	mla	r7, r9, fp, r7
 800ac14:	4457      	add	r7, sl
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac1c:	f84e 3b04 	str.w	r3, [lr], #4
 800ac20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac28:	f8be 3000 	ldrh.w	r3, [lr]
 800ac2c:	fb09 330a 	mla	r3, r9, sl, r3
 800ac30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac34:	4562      	cmp	r2, ip
 800ac36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac3a:	d8e5      	bhi.n	800ac08 <__multiply+0x10c>
 800ac3c:	9f01      	ldr	r7, [sp, #4]
 800ac3e:	51eb      	str	r3, [r5, r7]
 800ac40:	3504      	adds	r5, #4
 800ac42:	e799      	b.n	800ab78 <__multiply+0x7c>
 800ac44:	3e01      	subs	r6, #1
 800ac46:	e79b      	b.n	800ab80 <__multiply+0x84>
 800ac48:	0800cb74 	.word	0x0800cb74
 800ac4c:	0800cb96 	.word	0x0800cb96

0800ac50 <__pow5mult>:
 800ac50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac54:	4615      	mov	r5, r2
 800ac56:	f012 0203 	ands.w	r2, r2, #3
 800ac5a:	4607      	mov	r7, r0
 800ac5c:	460e      	mov	r6, r1
 800ac5e:	d007      	beq.n	800ac70 <__pow5mult+0x20>
 800ac60:	4c25      	ldr	r4, [pc, #148]	@ (800acf8 <__pow5mult+0xa8>)
 800ac62:	3a01      	subs	r2, #1
 800ac64:	2300      	movs	r3, #0
 800ac66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac6a:	f7ff fe9f 	bl	800a9ac <__multadd>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	10ad      	asrs	r5, r5, #2
 800ac72:	d03d      	beq.n	800acf0 <__pow5mult+0xa0>
 800ac74:	69fc      	ldr	r4, [r7, #28]
 800ac76:	b97c      	cbnz	r4, 800ac98 <__pow5mult+0x48>
 800ac78:	2010      	movs	r0, #16
 800ac7a:	f7ff fcd3 	bl	800a624 <malloc>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	61f8      	str	r0, [r7, #28]
 800ac82:	b928      	cbnz	r0, 800ac90 <__pow5mult+0x40>
 800ac84:	4b1d      	ldr	r3, [pc, #116]	@ (800acfc <__pow5mult+0xac>)
 800ac86:	481e      	ldr	r0, [pc, #120]	@ (800ad00 <__pow5mult+0xb0>)
 800ac88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac8c:	f000 fb6e 	bl	800b36c <__assert_func>
 800ac90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac94:	6004      	str	r4, [r0, #0]
 800ac96:	60c4      	str	r4, [r0, #12]
 800ac98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aca0:	b94c      	cbnz	r4, 800acb6 <__pow5mult+0x66>
 800aca2:	f240 2171 	movw	r1, #625	@ 0x271
 800aca6:	4638      	mov	r0, r7
 800aca8:	f7ff ff12 	bl	800aad0 <__i2b>
 800acac:	2300      	movs	r3, #0
 800acae:	f8c8 0008 	str.w	r0, [r8, #8]
 800acb2:	4604      	mov	r4, r0
 800acb4:	6003      	str	r3, [r0, #0]
 800acb6:	f04f 0900 	mov.w	r9, #0
 800acba:	07eb      	lsls	r3, r5, #31
 800acbc:	d50a      	bpl.n	800acd4 <__pow5mult+0x84>
 800acbe:	4631      	mov	r1, r6
 800acc0:	4622      	mov	r2, r4
 800acc2:	4638      	mov	r0, r7
 800acc4:	f7ff ff1a 	bl	800aafc <__multiply>
 800acc8:	4631      	mov	r1, r6
 800acca:	4680      	mov	r8, r0
 800accc:	4638      	mov	r0, r7
 800acce:	f7ff fe4b 	bl	800a968 <_Bfree>
 800acd2:	4646      	mov	r6, r8
 800acd4:	106d      	asrs	r5, r5, #1
 800acd6:	d00b      	beq.n	800acf0 <__pow5mult+0xa0>
 800acd8:	6820      	ldr	r0, [r4, #0]
 800acda:	b938      	cbnz	r0, 800acec <__pow5mult+0x9c>
 800acdc:	4622      	mov	r2, r4
 800acde:	4621      	mov	r1, r4
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff ff0b 	bl	800aafc <__multiply>
 800ace6:	6020      	str	r0, [r4, #0]
 800ace8:	f8c0 9000 	str.w	r9, [r0]
 800acec:	4604      	mov	r4, r0
 800acee:	e7e4      	b.n	800acba <__pow5mult+0x6a>
 800acf0:	4630      	mov	r0, r6
 800acf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acf6:	bf00      	nop
 800acf8:	0800cbf0 	.word	0x0800cbf0
 800acfc:	0800cb05 	.word	0x0800cb05
 800ad00:	0800cb96 	.word	0x0800cb96

0800ad04 <__lshift>:
 800ad04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad08:	460c      	mov	r4, r1
 800ad0a:	6849      	ldr	r1, [r1, #4]
 800ad0c:	6923      	ldr	r3, [r4, #16]
 800ad0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	4607      	mov	r7, r0
 800ad16:	4691      	mov	r9, r2
 800ad18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad1c:	f108 0601 	add.w	r6, r8, #1
 800ad20:	42b3      	cmp	r3, r6
 800ad22:	db0b      	blt.n	800ad3c <__lshift+0x38>
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff fddf 	bl	800a8e8 <_Balloc>
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	b948      	cbnz	r0, 800ad42 <__lshift+0x3e>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	4b28      	ldr	r3, [pc, #160]	@ (800add4 <__lshift+0xd0>)
 800ad32:	4829      	ldr	r0, [pc, #164]	@ (800add8 <__lshift+0xd4>)
 800ad34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad38:	f000 fb18 	bl	800b36c <__assert_func>
 800ad3c:	3101      	adds	r1, #1
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	e7ee      	b.n	800ad20 <__lshift+0x1c>
 800ad42:	2300      	movs	r3, #0
 800ad44:	f100 0114 	add.w	r1, r0, #20
 800ad48:	f100 0210 	add.w	r2, r0, #16
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	4553      	cmp	r3, sl
 800ad50:	db33      	blt.n	800adba <__lshift+0xb6>
 800ad52:	6920      	ldr	r0, [r4, #16]
 800ad54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad58:	f104 0314 	add.w	r3, r4, #20
 800ad5c:	f019 091f 	ands.w	r9, r9, #31
 800ad60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad68:	d02b      	beq.n	800adc2 <__lshift+0xbe>
 800ad6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ad6e:	468a      	mov	sl, r1
 800ad70:	2200      	movs	r2, #0
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	fa00 f009 	lsl.w	r0, r0, r9
 800ad78:	4310      	orrs	r0, r2
 800ad7a:	f84a 0b04 	str.w	r0, [sl], #4
 800ad7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad82:	459c      	cmp	ip, r3
 800ad84:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad88:	d8f3      	bhi.n	800ad72 <__lshift+0x6e>
 800ad8a:	ebac 0304 	sub.w	r3, ip, r4
 800ad8e:	3b15      	subs	r3, #21
 800ad90:	f023 0303 	bic.w	r3, r3, #3
 800ad94:	3304      	adds	r3, #4
 800ad96:	f104 0015 	add.w	r0, r4, #21
 800ad9a:	4584      	cmp	ip, r0
 800ad9c:	bf38      	it	cc
 800ad9e:	2304      	movcc	r3, #4
 800ada0:	50ca      	str	r2, [r1, r3]
 800ada2:	b10a      	cbz	r2, 800ada8 <__lshift+0xa4>
 800ada4:	f108 0602 	add.w	r6, r8, #2
 800ada8:	3e01      	subs	r6, #1
 800adaa:	4638      	mov	r0, r7
 800adac:	612e      	str	r6, [r5, #16]
 800adae:	4621      	mov	r1, r4
 800adb0:	f7ff fdda 	bl	800a968 <_Bfree>
 800adb4:	4628      	mov	r0, r5
 800adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adba:	f842 0f04 	str.w	r0, [r2, #4]!
 800adbe:	3301      	adds	r3, #1
 800adc0:	e7c5      	b.n	800ad4e <__lshift+0x4a>
 800adc2:	3904      	subs	r1, #4
 800adc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800adcc:	459c      	cmp	ip, r3
 800adce:	d8f9      	bhi.n	800adc4 <__lshift+0xc0>
 800add0:	e7ea      	b.n	800ada8 <__lshift+0xa4>
 800add2:	bf00      	nop
 800add4:	0800cb74 	.word	0x0800cb74
 800add8:	0800cb96 	.word	0x0800cb96

0800addc <__mcmp>:
 800addc:	690a      	ldr	r2, [r1, #16]
 800adde:	4603      	mov	r3, r0
 800ade0:	6900      	ldr	r0, [r0, #16]
 800ade2:	1a80      	subs	r0, r0, r2
 800ade4:	b530      	push	{r4, r5, lr}
 800ade6:	d10e      	bne.n	800ae06 <__mcmp+0x2a>
 800ade8:	3314      	adds	r3, #20
 800adea:	3114      	adds	r1, #20
 800adec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800adf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800adf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800adf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800adfc:	4295      	cmp	r5, r2
 800adfe:	d003      	beq.n	800ae08 <__mcmp+0x2c>
 800ae00:	d205      	bcs.n	800ae0e <__mcmp+0x32>
 800ae02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae06:	bd30      	pop	{r4, r5, pc}
 800ae08:	42a3      	cmp	r3, r4
 800ae0a:	d3f3      	bcc.n	800adf4 <__mcmp+0x18>
 800ae0c:	e7fb      	b.n	800ae06 <__mcmp+0x2a>
 800ae0e:	2001      	movs	r0, #1
 800ae10:	e7f9      	b.n	800ae06 <__mcmp+0x2a>
	...

0800ae14 <__mdiff>:
 800ae14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	4689      	mov	r9, r1
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4648      	mov	r0, r9
 800ae20:	4614      	mov	r4, r2
 800ae22:	f7ff ffdb 	bl	800addc <__mcmp>
 800ae26:	1e05      	subs	r5, r0, #0
 800ae28:	d112      	bne.n	800ae50 <__mdiff+0x3c>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff fd5b 	bl	800a8e8 <_Balloc>
 800ae32:	4602      	mov	r2, r0
 800ae34:	b928      	cbnz	r0, 800ae42 <__mdiff+0x2e>
 800ae36:	4b3f      	ldr	r3, [pc, #252]	@ (800af34 <__mdiff+0x120>)
 800ae38:	f240 2137 	movw	r1, #567	@ 0x237
 800ae3c:	483e      	ldr	r0, [pc, #248]	@ (800af38 <__mdiff+0x124>)
 800ae3e:	f000 fa95 	bl	800b36c <__assert_func>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae48:	4610      	mov	r0, r2
 800ae4a:	b003      	add	sp, #12
 800ae4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae50:	bfbc      	itt	lt
 800ae52:	464b      	movlt	r3, r9
 800ae54:	46a1      	movlt	r9, r4
 800ae56:	4630      	mov	r0, r6
 800ae58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae5c:	bfba      	itte	lt
 800ae5e:	461c      	movlt	r4, r3
 800ae60:	2501      	movlt	r5, #1
 800ae62:	2500      	movge	r5, #0
 800ae64:	f7ff fd40 	bl	800a8e8 <_Balloc>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	b918      	cbnz	r0, 800ae74 <__mdiff+0x60>
 800ae6c:	4b31      	ldr	r3, [pc, #196]	@ (800af34 <__mdiff+0x120>)
 800ae6e:	f240 2145 	movw	r1, #581	@ 0x245
 800ae72:	e7e3      	b.n	800ae3c <__mdiff+0x28>
 800ae74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae78:	6926      	ldr	r6, [r4, #16]
 800ae7a:	60c5      	str	r5, [r0, #12]
 800ae7c:	f109 0310 	add.w	r3, r9, #16
 800ae80:	f109 0514 	add.w	r5, r9, #20
 800ae84:	f104 0e14 	add.w	lr, r4, #20
 800ae88:	f100 0b14 	add.w	fp, r0, #20
 800ae8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	46d9      	mov	r9, fp
 800ae98:	f04f 0c00 	mov.w	ip, #0
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aea2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	fa1f f38a 	uxth.w	r3, sl
 800aeac:	4619      	mov	r1, r3
 800aeae:	b283      	uxth	r3, r0
 800aeb0:	1acb      	subs	r3, r1, r3
 800aeb2:	0c00      	lsrs	r0, r0, #16
 800aeb4:	4463      	add	r3, ip
 800aeb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aeba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aec4:	4576      	cmp	r6, lr
 800aec6:	f849 3b04 	str.w	r3, [r9], #4
 800aeca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aece:	d8e5      	bhi.n	800ae9c <__mdiff+0x88>
 800aed0:	1b33      	subs	r3, r6, r4
 800aed2:	3b15      	subs	r3, #21
 800aed4:	f023 0303 	bic.w	r3, r3, #3
 800aed8:	3415      	adds	r4, #21
 800aeda:	3304      	adds	r3, #4
 800aedc:	42a6      	cmp	r6, r4
 800aede:	bf38      	it	cc
 800aee0:	2304      	movcc	r3, #4
 800aee2:	441d      	add	r5, r3
 800aee4:	445b      	add	r3, fp
 800aee6:	461e      	mov	r6, r3
 800aee8:	462c      	mov	r4, r5
 800aeea:	4544      	cmp	r4, r8
 800aeec:	d30e      	bcc.n	800af0c <__mdiff+0xf8>
 800aeee:	f108 0103 	add.w	r1, r8, #3
 800aef2:	1b49      	subs	r1, r1, r5
 800aef4:	f021 0103 	bic.w	r1, r1, #3
 800aef8:	3d03      	subs	r5, #3
 800aefa:	45a8      	cmp	r8, r5
 800aefc:	bf38      	it	cc
 800aefe:	2100      	movcc	r1, #0
 800af00:	440b      	add	r3, r1
 800af02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af06:	b191      	cbz	r1, 800af2e <__mdiff+0x11a>
 800af08:	6117      	str	r7, [r2, #16]
 800af0a:	e79d      	b.n	800ae48 <__mdiff+0x34>
 800af0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800af10:	46e6      	mov	lr, ip
 800af12:	0c08      	lsrs	r0, r1, #16
 800af14:	fa1c fc81 	uxtah	ip, ip, r1
 800af18:	4471      	add	r1, lr
 800af1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af1e:	b289      	uxth	r1, r1
 800af20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af24:	f846 1b04 	str.w	r1, [r6], #4
 800af28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af2c:	e7dd      	b.n	800aeea <__mdiff+0xd6>
 800af2e:	3f01      	subs	r7, #1
 800af30:	e7e7      	b.n	800af02 <__mdiff+0xee>
 800af32:	bf00      	nop
 800af34:	0800cb74 	.word	0x0800cb74
 800af38:	0800cb96 	.word	0x0800cb96

0800af3c <__d2b>:
 800af3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af40:	460f      	mov	r7, r1
 800af42:	2101      	movs	r1, #1
 800af44:	ec59 8b10 	vmov	r8, r9, d0
 800af48:	4616      	mov	r6, r2
 800af4a:	f7ff fccd 	bl	800a8e8 <_Balloc>
 800af4e:	4604      	mov	r4, r0
 800af50:	b930      	cbnz	r0, 800af60 <__d2b+0x24>
 800af52:	4602      	mov	r2, r0
 800af54:	4b23      	ldr	r3, [pc, #140]	@ (800afe4 <__d2b+0xa8>)
 800af56:	4824      	ldr	r0, [pc, #144]	@ (800afe8 <__d2b+0xac>)
 800af58:	f240 310f 	movw	r1, #783	@ 0x30f
 800af5c:	f000 fa06 	bl	800b36c <__assert_func>
 800af60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af68:	b10d      	cbz	r5, 800af6e <__d2b+0x32>
 800af6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	f1b8 0300 	subs.w	r3, r8, #0
 800af74:	d023      	beq.n	800afbe <__d2b+0x82>
 800af76:	4668      	mov	r0, sp
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	f7ff fd7c 	bl	800aa76 <__lo0bits>
 800af7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af82:	b1d0      	cbz	r0, 800afba <__d2b+0x7e>
 800af84:	f1c0 0320 	rsb	r3, r0, #32
 800af88:	fa02 f303 	lsl.w	r3, r2, r3
 800af8c:	430b      	orrs	r3, r1
 800af8e:	40c2      	lsrs	r2, r0
 800af90:	6163      	str	r3, [r4, #20]
 800af92:	9201      	str	r2, [sp, #4]
 800af94:	9b01      	ldr	r3, [sp, #4]
 800af96:	61a3      	str	r3, [r4, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bf0c      	ite	eq
 800af9c:	2201      	moveq	r2, #1
 800af9e:	2202      	movne	r2, #2
 800afa0:	6122      	str	r2, [r4, #16]
 800afa2:	b1a5      	cbz	r5, 800afce <__d2b+0x92>
 800afa4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800afa8:	4405      	add	r5, r0
 800afaa:	603d      	str	r5, [r7, #0]
 800afac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800afb0:	6030      	str	r0, [r6, #0]
 800afb2:	4620      	mov	r0, r4
 800afb4:	b003      	add	sp, #12
 800afb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afba:	6161      	str	r1, [r4, #20]
 800afbc:	e7ea      	b.n	800af94 <__d2b+0x58>
 800afbe:	a801      	add	r0, sp, #4
 800afc0:	f7ff fd59 	bl	800aa76 <__lo0bits>
 800afc4:	9b01      	ldr	r3, [sp, #4]
 800afc6:	6163      	str	r3, [r4, #20]
 800afc8:	3020      	adds	r0, #32
 800afca:	2201      	movs	r2, #1
 800afcc:	e7e8      	b.n	800afa0 <__d2b+0x64>
 800afce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800afd6:	6038      	str	r0, [r7, #0]
 800afd8:	6918      	ldr	r0, [r3, #16]
 800afda:	f7ff fd2d 	bl	800aa38 <__hi0bits>
 800afde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afe2:	e7e5      	b.n	800afb0 <__d2b+0x74>
 800afe4:	0800cb74 	.word	0x0800cb74
 800afe8:	0800cb96 	.word	0x0800cb96

0800afec <__sread>:
 800afec:	b510      	push	{r4, lr}
 800afee:	460c      	mov	r4, r1
 800aff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff4:	f000 f978 	bl	800b2e8 <_read_r>
 800aff8:	2800      	cmp	r0, #0
 800affa:	bfab      	itete	ge
 800affc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800affe:	89a3      	ldrhlt	r3, [r4, #12]
 800b000:	181b      	addge	r3, r3, r0
 800b002:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b006:	bfac      	ite	ge
 800b008:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b00a:	81a3      	strhlt	r3, [r4, #12]
 800b00c:	bd10      	pop	{r4, pc}

0800b00e <__swrite>:
 800b00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b012:	461f      	mov	r7, r3
 800b014:	898b      	ldrh	r3, [r1, #12]
 800b016:	05db      	lsls	r3, r3, #23
 800b018:	4605      	mov	r5, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	4616      	mov	r6, r2
 800b01e:	d505      	bpl.n	800b02c <__swrite+0x1e>
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	2302      	movs	r3, #2
 800b026:	2200      	movs	r2, #0
 800b028:	f000 f94c 	bl	800b2c4 <_lseek_r>
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b032:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	4632      	mov	r2, r6
 800b03a:	463b      	mov	r3, r7
 800b03c:	4628      	mov	r0, r5
 800b03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b042:	f000 b973 	b.w	800b32c <_write_r>

0800b046 <__sseek>:
 800b046:	b510      	push	{r4, lr}
 800b048:	460c      	mov	r4, r1
 800b04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04e:	f000 f939 	bl	800b2c4 <_lseek_r>
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	bf15      	itete	ne
 800b058:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b05a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b05e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b062:	81a3      	strheq	r3, [r4, #12]
 800b064:	bf18      	it	ne
 800b066:	81a3      	strhne	r3, [r4, #12]
 800b068:	bd10      	pop	{r4, pc}

0800b06a <__sclose>:
 800b06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06e:	f000 b8f7 	b.w	800b260 <_close_r>

0800b072 <__swbuf_r>:
 800b072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b074:	460e      	mov	r6, r1
 800b076:	4614      	mov	r4, r2
 800b078:	4605      	mov	r5, r0
 800b07a:	b118      	cbz	r0, 800b084 <__swbuf_r+0x12>
 800b07c:	6a03      	ldr	r3, [r0, #32]
 800b07e:	b90b      	cbnz	r3, 800b084 <__swbuf_r+0x12>
 800b080:	f7fe fa60 	bl	8009544 <__sinit>
 800b084:	69a3      	ldr	r3, [r4, #24]
 800b086:	60a3      	str	r3, [r4, #8]
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	071a      	lsls	r2, r3, #28
 800b08c:	d501      	bpl.n	800b092 <__swbuf_r+0x20>
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	b943      	cbnz	r3, 800b0a4 <__swbuf_r+0x32>
 800b092:	4621      	mov	r1, r4
 800b094:	4628      	mov	r0, r5
 800b096:	f000 f82b 	bl	800b0f0 <__swsetup_r>
 800b09a:	b118      	cbz	r0, 800b0a4 <__swbuf_r+0x32>
 800b09c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	6922      	ldr	r2, [r4, #16]
 800b0a8:	1a98      	subs	r0, r3, r2
 800b0aa:	6963      	ldr	r3, [r4, #20]
 800b0ac:	b2f6      	uxtb	r6, r6
 800b0ae:	4283      	cmp	r3, r0
 800b0b0:	4637      	mov	r7, r6
 800b0b2:	dc05      	bgt.n	800b0c0 <__swbuf_r+0x4e>
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f7ff fbe2 	bl	800a880 <_fflush_r>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d1ed      	bne.n	800b09c <__swbuf_r+0x2a>
 800b0c0:	68a3      	ldr	r3, [r4, #8]
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	60a3      	str	r3, [r4, #8]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	6022      	str	r2, [r4, #0]
 800b0cc:	701e      	strb	r6, [r3, #0]
 800b0ce:	6962      	ldr	r2, [r4, #20]
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d004      	beq.n	800b0e0 <__swbuf_r+0x6e>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	07db      	lsls	r3, r3, #31
 800b0da:	d5e1      	bpl.n	800b0a0 <__swbuf_r+0x2e>
 800b0dc:	2e0a      	cmp	r6, #10
 800b0de:	d1df      	bne.n	800b0a0 <__swbuf_r+0x2e>
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7ff fbcc 	bl	800a880 <_fflush_r>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d0d9      	beq.n	800b0a0 <__swbuf_r+0x2e>
 800b0ec:	e7d6      	b.n	800b09c <__swbuf_r+0x2a>
	...

0800b0f0 <__swsetup_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4b29      	ldr	r3, [pc, #164]	@ (800b198 <__swsetup_r+0xa8>)
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	b118      	cbz	r0, 800b104 <__swsetup_r+0x14>
 800b0fc:	6a03      	ldr	r3, [r0, #32]
 800b0fe:	b90b      	cbnz	r3, 800b104 <__swsetup_r+0x14>
 800b100:	f7fe fa20 	bl	8009544 <__sinit>
 800b104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b108:	0719      	lsls	r1, r3, #28
 800b10a:	d422      	bmi.n	800b152 <__swsetup_r+0x62>
 800b10c:	06da      	lsls	r2, r3, #27
 800b10e:	d407      	bmi.n	800b120 <__swsetup_r+0x30>
 800b110:	2209      	movs	r2, #9
 800b112:	602a      	str	r2, [r5, #0]
 800b114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b11e:	e033      	b.n	800b188 <__swsetup_r+0x98>
 800b120:	0758      	lsls	r0, r3, #29
 800b122:	d512      	bpl.n	800b14a <__swsetup_r+0x5a>
 800b124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b126:	b141      	cbz	r1, 800b13a <__swsetup_r+0x4a>
 800b128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b12c:	4299      	cmp	r1, r3
 800b12e:	d002      	beq.n	800b136 <__swsetup_r+0x46>
 800b130:	4628      	mov	r0, r5
 800b132:	f000 f94d 	bl	800b3d0 <_free_r>
 800b136:	2300      	movs	r3, #0
 800b138:	6363      	str	r3, [r4, #52]	@ 0x34
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	2300      	movs	r3, #0
 800b144:	6063      	str	r3, [r4, #4]
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f043 0308 	orr.w	r3, r3, #8
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	b94b      	cbnz	r3, 800b16a <__swsetup_r+0x7a>
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b160:	d003      	beq.n	800b16a <__swsetup_r+0x7a>
 800b162:	4621      	mov	r1, r4
 800b164:	4628      	mov	r0, r5
 800b166:	f000 f83f 	bl	800b1e8 <__smakebuf_r>
 800b16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16e:	f013 0201 	ands.w	r2, r3, #1
 800b172:	d00a      	beq.n	800b18a <__swsetup_r+0x9a>
 800b174:	2200      	movs	r2, #0
 800b176:	60a2      	str	r2, [r4, #8]
 800b178:	6962      	ldr	r2, [r4, #20]
 800b17a:	4252      	negs	r2, r2
 800b17c:	61a2      	str	r2, [r4, #24]
 800b17e:	6922      	ldr	r2, [r4, #16]
 800b180:	b942      	cbnz	r2, 800b194 <__swsetup_r+0xa4>
 800b182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b186:	d1c5      	bne.n	800b114 <__swsetup_r+0x24>
 800b188:	bd38      	pop	{r3, r4, r5, pc}
 800b18a:	0799      	lsls	r1, r3, #30
 800b18c:	bf58      	it	pl
 800b18e:	6962      	ldrpl	r2, [r4, #20]
 800b190:	60a2      	str	r2, [r4, #8]
 800b192:	e7f4      	b.n	800b17e <__swsetup_r+0x8e>
 800b194:	2000      	movs	r0, #0
 800b196:	e7f7      	b.n	800b188 <__swsetup_r+0x98>
 800b198:	20000230 	.word	0x20000230

0800b19c <__swhatbuf_r>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	460c      	mov	r4, r1
 800b1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a4:	2900      	cmp	r1, #0
 800b1a6:	b096      	sub	sp, #88	@ 0x58
 800b1a8:	4615      	mov	r5, r2
 800b1aa:	461e      	mov	r6, r3
 800b1ac:	da0d      	bge.n	800b1ca <__swhatbuf_r+0x2e>
 800b1ae:	89a3      	ldrh	r3, [r4, #12]
 800b1b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1b4:	f04f 0100 	mov.w	r1, #0
 800b1b8:	bf14      	ite	ne
 800b1ba:	2340      	movne	r3, #64	@ 0x40
 800b1bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	6031      	str	r1, [r6, #0]
 800b1c4:	602b      	str	r3, [r5, #0]
 800b1c6:	b016      	add	sp, #88	@ 0x58
 800b1c8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ca:	466a      	mov	r2, sp
 800b1cc:	f000 f858 	bl	800b280 <_fstat_r>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	dbec      	blt.n	800b1ae <__swhatbuf_r+0x12>
 800b1d4:	9901      	ldr	r1, [sp, #4]
 800b1d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1de:	4259      	negs	r1, r3
 800b1e0:	4159      	adcs	r1, r3
 800b1e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1e6:	e7eb      	b.n	800b1c0 <__swhatbuf_r+0x24>

0800b1e8 <__smakebuf_r>:
 800b1e8:	898b      	ldrh	r3, [r1, #12]
 800b1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ec:	079d      	lsls	r5, r3, #30
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	d507      	bpl.n	800b204 <__smakebuf_r+0x1c>
 800b1f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	6123      	str	r3, [r4, #16]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	6163      	str	r3, [r4, #20]
 800b200:	b003      	add	sp, #12
 800b202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b204:	ab01      	add	r3, sp, #4
 800b206:	466a      	mov	r2, sp
 800b208:	f7ff ffc8 	bl	800b19c <__swhatbuf_r>
 800b20c:	9f00      	ldr	r7, [sp, #0]
 800b20e:	4605      	mov	r5, r0
 800b210:	4639      	mov	r1, r7
 800b212:	4630      	mov	r0, r6
 800b214:	f7ff fa30 	bl	800a678 <_malloc_r>
 800b218:	b948      	cbnz	r0, 800b22e <__smakebuf_r+0x46>
 800b21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b21e:	059a      	lsls	r2, r3, #22
 800b220:	d4ee      	bmi.n	800b200 <__smakebuf_r+0x18>
 800b222:	f023 0303 	bic.w	r3, r3, #3
 800b226:	f043 0302 	orr.w	r3, r3, #2
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	e7e2      	b.n	800b1f4 <__smakebuf_r+0xc>
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	6020      	str	r0, [r4, #0]
 800b232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b236:	81a3      	strh	r3, [r4, #12]
 800b238:	9b01      	ldr	r3, [sp, #4]
 800b23a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b23e:	b15b      	cbz	r3, 800b258 <__smakebuf_r+0x70>
 800b240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b244:	4630      	mov	r0, r6
 800b246:	f000 f82d 	bl	800b2a4 <_isatty_r>
 800b24a:	b128      	cbz	r0, 800b258 <__smakebuf_r+0x70>
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	f023 0303 	bic.w	r3, r3, #3
 800b252:	f043 0301 	orr.w	r3, r3, #1
 800b256:	81a3      	strh	r3, [r4, #12]
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	431d      	orrs	r5, r3
 800b25c:	81a5      	strh	r5, [r4, #12]
 800b25e:	e7cf      	b.n	800b200 <__smakebuf_r+0x18>

0800b260 <_close_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d06      	ldr	r5, [pc, #24]	@ (800b27c <_close_r+0x1c>)
 800b264:	2300      	movs	r3, #0
 800b266:	4604      	mov	r4, r0
 800b268:	4608      	mov	r0, r1
 800b26a:	602b      	str	r3, [r5, #0]
 800b26c:	f7f8 fee8 	bl	8004040 <_close>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_close_r+0x1a>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_close_r+0x1a>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	200007f0 	.word	0x200007f0

0800b280 <_fstat_r>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	4d07      	ldr	r5, [pc, #28]	@ (800b2a0 <_fstat_r+0x20>)
 800b284:	2300      	movs	r3, #0
 800b286:	4604      	mov	r4, r0
 800b288:	4608      	mov	r0, r1
 800b28a:	4611      	mov	r1, r2
 800b28c:	602b      	str	r3, [r5, #0]
 800b28e:	f7f8 fee3 	bl	8004058 <_fstat>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	d102      	bne.n	800b29c <_fstat_r+0x1c>
 800b296:	682b      	ldr	r3, [r5, #0]
 800b298:	b103      	cbz	r3, 800b29c <_fstat_r+0x1c>
 800b29a:	6023      	str	r3, [r4, #0]
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
 800b29e:	bf00      	nop
 800b2a0:	200007f0 	.word	0x200007f0

0800b2a4 <_isatty_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d06      	ldr	r5, [pc, #24]	@ (800b2c0 <_isatty_r+0x1c>)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	602b      	str	r3, [r5, #0]
 800b2b0:	f7f8 fee2 	bl	8004078 <_isatty>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_isatty_r+0x1a>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_isatty_r+0x1a>
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	200007f0 	.word	0x200007f0

0800b2c4 <_lseek_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d07      	ldr	r5, [pc, #28]	@ (800b2e4 <_lseek_r+0x20>)
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	4608      	mov	r0, r1
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	602a      	str	r2, [r5, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f7f8 fedb 	bl	800408e <_lseek>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d102      	bne.n	800b2e2 <_lseek_r+0x1e>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	b103      	cbz	r3, 800b2e2 <_lseek_r+0x1e>
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	200007f0 	.word	0x200007f0

0800b2e8 <_read_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d07      	ldr	r5, [pc, #28]	@ (800b308 <_read_r+0x20>)
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	602a      	str	r2, [r5, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f7f8 fe69 	bl	8003fce <_read>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_read_r+0x1e>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_read_r+0x1e>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	200007f0 	.word	0x200007f0

0800b30c <_sbrk_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d06      	ldr	r5, [pc, #24]	@ (800b328 <_sbrk_r+0x1c>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	602b      	str	r3, [r5, #0]
 800b318:	f7f8 fec6 	bl	80040a8 <_sbrk>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_sbrk_r+0x1a>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_sbrk_r+0x1a>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	200007f0 	.word	0x200007f0

0800b32c <_write_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d07      	ldr	r5, [pc, #28]	@ (800b34c <_write_r+0x20>)
 800b330:	4604      	mov	r4, r0
 800b332:	4608      	mov	r0, r1
 800b334:	4611      	mov	r1, r2
 800b336:	2200      	movs	r2, #0
 800b338:	602a      	str	r2, [r5, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	f7f8 fe64 	bl	8004008 <_write>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_write_r+0x1e>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_write_r+0x1e>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	200007f0 	.word	0x200007f0

0800b350 <memcpy>:
 800b350:	440a      	add	r2, r1
 800b352:	4291      	cmp	r1, r2
 800b354:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b358:	d100      	bne.n	800b35c <memcpy+0xc>
 800b35a:	4770      	bx	lr
 800b35c:	b510      	push	{r4, lr}
 800b35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b362:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b366:	4291      	cmp	r1, r2
 800b368:	d1f9      	bne.n	800b35e <memcpy+0xe>
 800b36a:	bd10      	pop	{r4, pc}

0800b36c <__assert_func>:
 800b36c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b36e:	4614      	mov	r4, r2
 800b370:	461a      	mov	r2, r3
 800b372:	4b09      	ldr	r3, [pc, #36]	@ (800b398 <__assert_func+0x2c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4605      	mov	r5, r0
 800b378:	68d8      	ldr	r0, [r3, #12]
 800b37a:	b954      	cbnz	r4, 800b392 <__assert_func+0x26>
 800b37c:	4b07      	ldr	r3, [pc, #28]	@ (800b39c <__assert_func+0x30>)
 800b37e:	461c      	mov	r4, r3
 800b380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b384:	9100      	str	r1, [sp, #0]
 800b386:	462b      	mov	r3, r5
 800b388:	4905      	ldr	r1, [pc, #20]	@ (800b3a0 <__assert_func+0x34>)
 800b38a:	f000 f87d 	bl	800b488 <fiprintf>
 800b38e:	f000 f89a 	bl	800b4c6 <abort>
 800b392:	4b04      	ldr	r3, [pc, #16]	@ (800b3a4 <__assert_func+0x38>)
 800b394:	e7f4      	b.n	800b380 <__assert_func+0x14>
 800b396:	bf00      	nop
 800b398:	20000230 	.word	0x20000230
 800b39c:	0800ce36 	.word	0x0800ce36
 800b3a0:	0800ce08 	.word	0x0800ce08
 800b3a4:	0800cdfb 	.word	0x0800cdfb

0800b3a8 <_calloc_r>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	fba1 5402 	umull	r5, r4, r1, r2
 800b3ae:	b93c      	cbnz	r4, 800b3c0 <_calloc_r+0x18>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7ff f961 	bl	800a678 <_malloc_r>
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	b928      	cbnz	r0, 800b3c6 <_calloc_r+0x1e>
 800b3ba:	2600      	movs	r6, #0
 800b3bc:	4630      	mov	r0, r6
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
 800b3c0:	220c      	movs	r2, #12
 800b3c2:	6002      	str	r2, [r0, #0]
 800b3c4:	e7f9      	b.n	800b3ba <_calloc_r+0x12>
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	f7fe f961 	bl	8009690 <memset>
 800b3ce:	e7f5      	b.n	800b3bc <_calloc_r+0x14>

0800b3d0 <_free_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	2900      	cmp	r1, #0
 800b3d6:	d041      	beq.n	800b45c <_free_r+0x8c>
 800b3d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3dc:	1f0c      	subs	r4, r1, #4
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bfb8      	it	lt
 800b3e2:	18e4      	addlt	r4, r4, r3
 800b3e4:	f7ff fa74 	bl	800a8d0 <__malloc_lock>
 800b3e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b460 <_free_r+0x90>)
 800b3ea:	6813      	ldr	r3, [r2, #0]
 800b3ec:	b933      	cbnz	r3, 800b3fc <_free_r+0x2c>
 800b3ee:	6063      	str	r3, [r4, #4]
 800b3f0:	6014      	str	r4, [r2, #0]
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3f8:	f7ff ba70 	b.w	800a8dc <__malloc_unlock>
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	d908      	bls.n	800b412 <_free_r+0x42>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	1821      	adds	r1, r4, r0
 800b404:	428b      	cmp	r3, r1
 800b406:	bf01      	itttt	eq
 800b408:	6819      	ldreq	r1, [r3, #0]
 800b40a:	685b      	ldreq	r3, [r3, #4]
 800b40c:	1809      	addeq	r1, r1, r0
 800b40e:	6021      	streq	r1, [r4, #0]
 800b410:	e7ed      	b.n	800b3ee <_free_r+0x1e>
 800b412:	461a      	mov	r2, r3
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	b10b      	cbz	r3, 800b41c <_free_r+0x4c>
 800b418:	42a3      	cmp	r3, r4
 800b41a:	d9fa      	bls.n	800b412 <_free_r+0x42>
 800b41c:	6811      	ldr	r1, [r2, #0]
 800b41e:	1850      	adds	r0, r2, r1
 800b420:	42a0      	cmp	r0, r4
 800b422:	d10b      	bne.n	800b43c <_free_r+0x6c>
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	4401      	add	r1, r0
 800b428:	1850      	adds	r0, r2, r1
 800b42a:	4283      	cmp	r3, r0
 800b42c:	6011      	str	r1, [r2, #0]
 800b42e:	d1e0      	bne.n	800b3f2 <_free_r+0x22>
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	6053      	str	r3, [r2, #4]
 800b436:	4408      	add	r0, r1
 800b438:	6010      	str	r0, [r2, #0]
 800b43a:	e7da      	b.n	800b3f2 <_free_r+0x22>
 800b43c:	d902      	bls.n	800b444 <_free_r+0x74>
 800b43e:	230c      	movs	r3, #12
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	e7d6      	b.n	800b3f2 <_free_r+0x22>
 800b444:	6820      	ldr	r0, [r4, #0]
 800b446:	1821      	adds	r1, r4, r0
 800b448:	428b      	cmp	r3, r1
 800b44a:	bf04      	itt	eq
 800b44c:	6819      	ldreq	r1, [r3, #0]
 800b44e:	685b      	ldreq	r3, [r3, #4]
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	bf04      	itt	eq
 800b454:	1809      	addeq	r1, r1, r0
 800b456:	6021      	streq	r1, [r4, #0]
 800b458:	6054      	str	r4, [r2, #4]
 800b45a:	e7ca      	b.n	800b3f2 <_free_r+0x22>
 800b45c:	bd38      	pop	{r3, r4, r5, pc}
 800b45e:	bf00      	nop
 800b460:	200007ec 	.word	0x200007ec

0800b464 <__ascii_mbtowc>:
 800b464:	b082      	sub	sp, #8
 800b466:	b901      	cbnz	r1, 800b46a <__ascii_mbtowc+0x6>
 800b468:	a901      	add	r1, sp, #4
 800b46a:	b142      	cbz	r2, 800b47e <__ascii_mbtowc+0x1a>
 800b46c:	b14b      	cbz	r3, 800b482 <__ascii_mbtowc+0x1e>
 800b46e:	7813      	ldrb	r3, [r2, #0]
 800b470:	600b      	str	r3, [r1, #0]
 800b472:	7812      	ldrb	r2, [r2, #0]
 800b474:	1e10      	subs	r0, r2, #0
 800b476:	bf18      	it	ne
 800b478:	2001      	movne	r0, #1
 800b47a:	b002      	add	sp, #8
 800b47c:	4770      	bx	lr
 800b47e:	4610      	mov	r0, r2
 800b480:	e7fb      	b.n	800b47a <__ascii_mbtowc+0x16>
 800b482:	f06f 0001 	mvn.w	r0, #1
 800b486:	e7f8      	b.n	800b47a <__ascii_mbtowc+0x16>

0800b488 <fiprintf>:
 800b488:	b40e      	push	{r1, r2, r3}
 800b48a:	b503      	push	{r0, r1, lr}
 800b48c:	4601      	mov	r1, r0
 800b48e:	ab03      	add	r3, sp, #12
 800b490:	4805      	ldr	r0, [pc, #20]	@ (800b4a8 <fiprintf+0x20>)
 800b492:	f853 2b04 	ldr.w	r2, [r3], #4
 800b496:	6800      	ldr	r0, [r0, #0]
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	f7fe ffab 	bl	800a3f4 <_vfiprintf_r>
 800b49e:	b002      	add	sp, #8
 800b4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4a4:	b003      	add	sp, #12
 800b4a6:	4770      	bx	lr
 800b4a8:	20000230 	.word	0x20000230

0800b4ac <__ascii_wctomb>:
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	4608      	mov	r0, r1
 800b4b0:	b141      	cbz	r1, 800b4c4 <__ascii_wctomb+0x18>
 800b4b2:	2aff      	cmp	r2, #255	@ 0xff
 800b4b4:	d904      	bls.n	800b4c0 <__ascii_wctomb+0x14>
 800b4b6:	228a      	movs	r2, #138	@ 0x8a
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4be:	4770      	bx	lr
 800b4c0:	700a      	strb	r2, [r1, #0]
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	4770      	bx	lr

0800b4c6 <abort>:
 800b4c6:	b508      	push	{r3, lr}
 800b4c8:	2006      	movs	r0, #6
 800b4ca:	f000 f82b 	bl	800b524 <raise>
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	f7f8 fd72 	bl	8003fb8 <_exit>

0800b4d4 <_raise_r>:
 800b4d4:	291f      	cmp	r1, #31
 800b4d6:	b538      	push	{r3, r4, r5, lr}
 800b4d8:	4605      	mov	r5, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	d904      	bls.n	800b4e8 <_raise_r+0x14>
 800b4de:	2316      	movs	r3, #22
 800b4e0:	6003      	str	r3, [r0, #0]
 800b4e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
 800b4e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4ea:	b112      	cbz	r2, 800b4f2 <_raise_r+0x1e>
 800b4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4f0:	b94b      	cbnz	r3, 800b506 <_raise_r+0x32>
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f000 f830 	bl	800b558 <_getpid_r>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b502:	f000 b817 	b.w	800b534 <_kill_r>
 800b506:	2b01      	cmp	r3, #1
 800b508:	d00a      	beq.n	800b520 <_raise_r+0x4c>
 800b50a:	1c59      	adds	r1, r3, #1
 800b50c:	d103      	bne.n	800b516 <_raise_r+0x42>
 800b50e:	2316      	movs	r3, #22
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	2001      	movs	r0, #1
 800b514:	e7e7      	b.n	800b4e6 <_raise_r+0x12>
 800b516:	2100      	movs	r1, #0
 800b518:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b51c:	4620      	mov	r0, r4
 800b51e:	4798      	blx	r3
 800b520:	2000      	movs	r0, #0
 800b522:	e7e0      	b.n	800b4e6 <_raise_r+0x12>

0800b524 <raise>:
 800b524:	4b02      	ldr	r3, [pc, #8]	@ (800b530 <raise+0xc>)
 800b526:	4601      	mov	r1, r0
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f7ff bfd3 	b.w	800b4d4 <_raise_r>
 800b52e:	bf00      	nop
 800b530:	20000230 	.word	0x20000230

0800b534 <_kill_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d07      	ldr	r5, [pc, #28]	@ (800b554 <_kill_r+0x20>)
 800b538:	2300      	movs	r3, #0
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	4611      	mov	r1, r2
 800b540:	602b      	str	r3, [r5, #0]
 800b542:	f7f8 fd29 	bl	8003f98 <_kill>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d102      	bne.n	800b550 <_kill_r+0x1c>
 800b54a:	682b      	ldr	r3, [r5, #0]
 800b54c:	b103      	cbz	r3, 800b550 <_kill_r+0x1c>
 800b54e:	6023      	str	r3, [r4, #0]
 800b550:	bd38      	pop	{r3, r4, r5, pc}
 800b552:	bf00      	nop
 800b554:	200007f0 	.word	0x200007f0

0800b558 <_getpid_r>:
 800b558:	f7f8 bd16 	b.w	8003f88 <_getpid>

0800b55c <_init>:
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55e:	bf00      	nop
 800b560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b562:	bc08      	pop	{r3}
 800b564:	469e      	mov	lr, r3
 800b566:	4770      	bx	lr

0800b568 <_fini>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr
